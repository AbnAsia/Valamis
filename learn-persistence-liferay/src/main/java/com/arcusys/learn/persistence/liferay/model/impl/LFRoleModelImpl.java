package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFRole;
import com.arcusys.learn.persistence.liferay.model.LFRoleModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
* The base model implementation for the LFRole service. Represents a row in the &quot;Learn_LFRole&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFRoleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFRoleImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFRoleImpl
* @see com.arcusys.learn.persistence.liferay.model.LFRole
* @see com.arcusys.learn.persistence.liferay.model.LFRoleModel
* @generated
*/
public class LFRoleModelImpl extends BaseModelImpl<LFRole>
    implements LFRoleModel {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this class directly. All methods that expect a l f role model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFRole} interface instead.
    */
    public static final String TABLE_NAME = "Learn_LFRole";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "liferayRoleID", Types.INTEGER },
            { "permission", Types.VARCHAR },
            { "isDefault", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFRole (id_ LONG not null primary key,liferayRoleID INTEGER,permission VARCHAR(75) null,isDefault BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFRole";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFRole"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFRole"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFRole"),
            true);
    public static long ISDEFAULT_COLUMN_BITMASK = 1L;
    public static long LIFERAYROLEID_COLUMN_BITMASK = 2L;
    public static long PERMISSION_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFRole"));
    private static ClassLoader _classLoader = LFRole.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            LFRole.class
        };
    private long _id;
    private Integer _liferayRoleID;
    private Integer _originalLiferayRoleID;
    private boolean _setOriginalLiferayRoleID;
    private String _permission;
    private String _originalPermission;
    private Boolean _isDefault;
    private Boolean _originalIsDefault;
    private boolean _setOriginalIsDefault;
    private long _columnBitmask;
    private LFRole _escapedModelProxy;

    public LFRoleModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return LFRole.class;
    }

    public String getModelClassName() {
        return LFRole.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("liferayRoleID", getLiferayRoleID());
        attributes.put("permission", getPermission());
        attributes.put("isDefault", getIsDefault());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer liferayRoleID = (Integer) attributes.get("liferayRoleID");

        if (liferayRoleID != null) {
            setLiferayRoleID(liferayRoleID);
        }

        String permission = (String) attributes.get("permission");

        if (permission != null) {
            setPermission(permission);
        }

        Boolean isDefault = (Boolean) attributes.get("isDefault");

        if (isDefault != null) {
            setIsDefault(isDefault);
        }
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public Integer getLiferayRoleID() {
        return _liferayRoleID;
    }

    public void setLiferayRoleID(Integer liferayRoleID) {
        _columnBitmask |= LIFERAYROLEID_COLUMN_BITMASK;

        if (!_setOriginalLiferayRoleID) {
            _setOriginalLiferayRoleID = true;

            _originalLiferayRoleID = _liferayRoleID;
        }

        _liferayRoleID = liferayRoleID;
    }

    public Integer getOriginalLiferayRoleID() {
        return _originalLiferayRoleID;
    }

    public String getPermission() {
        if (_permission == null) {
            return StringPool.BLANK;
        } else {
            return _permission;
        }
    }

    public void setPermission(String permission) {
        _columnBitmask |= PERMISSION_COLUMN_BITMASK;

        if (_originalPermission == null) {
            _originalPermission = _permission;
        }

        _permission = permission;
    }

    public String getOriginalPermission() {
        return GetterUtil.getString(_originalPermission);
    }

    public Boolean getIsDefault() {
        return _isDefault;
    }

    public void setIsDefault(Boolean isDefault) {
        _columnBitmask |= ISDEFAULT_COLUMN_BITMASK;

        if (!_setOriginalIsDefault) {
            _setOriginalIsDefault = true;

            _originalIsDefault = _isDefault;
        }

        _isDefault = isDefault;
    }

    public Boolean getOriginalIsDefault() {
        return _originalIsDefault;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFRole.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFRole toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (LFRole) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LFRoleImpl lfRoleImpl = new LFRoleImpl();

        lfRoleImpl.setId(getId());
        lfRoleImpl.setLiferayRoleID(getLiferayRoleID());
        lfRoleImpl.setPermission(getPermission());
        lfRoleImpl.setIsDefault(getIsDefault());

        lfRoleImpl.resetOriginalValues();

        return lfRoleImpl;
    }

    public int compareTo(LFRole lfRole) {
        long primaryKey = lfRole.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        LFRole lfRole = null;

        try {
            lfRole = (LFRole) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = lfRole.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFRoleModelImpl lfRoleModelImpl = this;

        lfRoleModelImpl._originalLiferayRoleID = lfRoleModelImpl._liferayRoleID;

        lfRoleModelImpl._setOriginalLiferayRoleID = false;

        lfRoleModelImpl._originalPermission = lfRoleModelImpl._permission;

        lfRoleModelImpl._originalIsDefault = lfRoleModelImpl._isDefault;

        lfRoleModelImpl._setOriginalIsDefault = false;

        lfRoleModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFRole> toCacheModel() {
        LFRoleCacheModel lfRoleCacheModel = new LFRoleCacheModel();

        lfRoleCacheModel.id = getId();

        lfRoleCacheModel.liferayRoleID = getLiferayRoleID();

        lfRoleCacheModel.permission = getPermission();

        String permission = lfRoleCacheModel.permission;

        if ((permission != null) && (permission.length() == 0)) {
            lfRoleCacheModel.permission = null;
        }

        lfRoleCacheModel.isDefault = getIsDefault();

        return lfRoleCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", liferayRoleID=");
        sb.append(getLiferayRoleID());
        sb.append(", permission=");
        sb.append(getPermission());
        sb.append(", isDefault=");
        sb.append(getIsDefault());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.arcusys.learn.persistence.liferay.model.LFRole");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>liferayRoleID</column-name><column-value><![CDATA[");
        sb.append(getLiferayRoleID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>permission</column-name><column-value><![CDATA[");
        sb.append(getPermission());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isDefault</column-name><column-value><![CDATA[");
        sb.append(getIsDefault());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
