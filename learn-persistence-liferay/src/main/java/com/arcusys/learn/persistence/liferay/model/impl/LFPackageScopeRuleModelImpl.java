package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFPackageScopeRule;
import com.arcusys.learn.persistence.liferay.model.LFPackageScopeRuleModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
* The base model implementation for the LFPackageScopeRule service. Represents a row in the &quot;Learn_LFPackageScopeRule&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFPackageScopeRuleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFPackageScopeRuleImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFPackageScopeRuleImpl
* @see com.arcusys.learn.persistence.liferay.model.LFPackageScopeRule
* @see com.arcusys.learn.persistence.liferay.model.LFPackageScopeRuleModel
* @generated
*/
public class LFPackageScopeRuleModelImpl extends BaseModelImpl<LFPackageScopeRule>
    implements LFPackageScopeRuleModel {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this class directly. All methods that expect a l f package scope rule model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFPackageScopeRule} interface instead.
    */
    public static final String TABLE_NAME = "Learn_LFPackageScopeRule";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "packageID", Types.INTEGER },
            { "scope", Types.CLOB },
            { "scopeID", Types.CLOB },
            { "visibility", Types.BOOLEAN },
            { "isDefault", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFPackageScopeRule (id_ LONG not null primary key,packageID INTEGER null,scope TEXT null,scopeID TEXT null,visibility BOOLEAN null,isDefault BOOLEAN null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFPackageScopeRule";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFPackageScopeRule"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFPackageScopeRule"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFPackageScopeRule"),
            true);
    public static long ISDEFAULT_COLUMN_BITMASK = 1L;
    public static long PACKAGEID_COLUMN_BITMASK = 2L;
    public static long SCOPE_COLUMN_BITMASK = 4L;
    public static long SCOPEID_COLUMN_BITMASK = 8L;
    public static long VISIBILITY_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFPackageScopeRule"));
    private static ClassLoader _classLoader = LFPackageScopeRule.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            LFPackageScopeRule.class
        };
    private long _id;
    private Integer _packageID;
    private Integer _originalPackageID;
    private boolean _setOriginalPackageID;
    private String _scope;
    private String _originalScope;
    private String _scopeID;
    private String _originalScopeID;
    private Boolean _visibility;
    private Boolean _originalVisibility;
    private boolean _setOriginalVisibility;
    private Boolean _isDefault;
    private Boolean _originalIsDefault;
    private boolean _setOriginalIsDefault;
    private long _columnBitmask;
    private LFPackageScopeRule _escapedModelProxy;

    public LFPackageScopeRuleModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return LFPackageScopeRule.class;
    }

    public String getModelClassName() {
        return LFPackageScopeRule.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("packageID", getPackageID());
        attributes.put("scope", getScope());
        attributes.put("scopeID", getScopeID());
        attributes.put("visibility", getVisibility());
        attributes.put("isDefault", getIsDefault());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer packageID = (Integer) attributes.get("packageID");

        if (packageID != null) {
            setPackageID(packageID);
        }

        String scope = (String) attributes.get("scope");

        if (scope != null) {
            setScope(scope);
        }

        String scopeID = (String) attributes.get("scopeID");

        if (scopeID != null) {
            setScopeID(scopeID);
        }

        Boolean visibility = (Boolean) attributes.get("visibility");

        if (visibility != null) {
            setVisibility(visibility);
        }

        Boolean isDefault = (Boolean) attributes.get("isDefault");

        if (isDefault != null) {
            setIsDefault(isDefault);
        }
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public Integer getPackageID() {
        return _packageID;
    }

    public void setPackageID(Integer packageID) {
        _columnBitmask |= PACKAGEID_COLUMN_BITMASK;

        if (!_setOriginalPackageID) {
            _setOriginalPackageID = true;

            _originalPackageID = _packageID;
        }

        _packageID = packageID;
    }

    public Integer getOriginalPackageID() {
        return _originalPackageID;
    }

    public String getScope() {
        if (_scope == null) {
            return StringPool.BLANK;
        } else {
            return _scope;
        }
    }

    public void setScope(String scope) {
        _columnBitmask |= SCOPE_COLUMN_BITMASK;

        if (_originalScope == null) {
            _originalScope = _scope;
        }

        _scope = scope;
    }

    public String getOriginalScope() {
        return GetterUtil.getString(_originalScope);
    }

    public String getScopeID() {
        return _scopeID;
    }

    public void setScopeID(String scopeID) {
        _columnBitmask |= SCOPEID_COLUMN_BITMASK;

        if (_originalScopeID == null) {
            _originalScopeID = _scopeID;
        }

        _scopeID = scopeID;
    }

    public String getOriginalScopeID() {
        return _originalScopeID;
    }

    public Boolean getVisibility() {
        return _visibility;
    }

    public void setVisibility(Boolean visibility) {
        _columnBitmask |= VISIBILITY_COLUMN_BITMASK;

        if (!_setOriginalVisibility) {
            _setOriginalVisibility = true;

            _originalVisibility = _visibility;
        }

        _visibility = visibility;
    }

    public Boolean getOriginalVisibility() {
        return _originalVisibility;
    }

    public Boolean getIsDefault() {
        return _isDefault;
    }

    public void setIsDefault(Boolean isDefault) {
        _columnBitmask |= ISDEFAULT_COLUMN_BITMASK;

        if (!_setOriginalIsDefault) {
            _setOriginalIsDefault = true;

            _originalIsDefault = _isDefault;
        }

        _isDefault = isDefault;
    }

    public Boolean getOriginalIsDefault() {
        return _originalIsDefault;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFPackageScopeRule.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFPackageScopeRule toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (LFPackageScopeRule) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LFPackageScopeRuleImpl lfPackageScopeRuleImpl = new LFPackageScopeRuleImpl();

        lfPackageScopeRuleImpl.setId(getId());
        lfPackageScopeRuleImpl.setPackageID(getPackageID());
        lfPackageScopeRuleImpl.setScope(getScope());
        lfPackageScopeRuleImpl.setScopeID(getScopeID());
        lfPackageScopeRuleImpl.setVisibility(getVisibility());
        lfPackageScopeRuleImpl.setIsDefault(getIsDefault());

        lfPackageScopeRuleImpl.resetOriginalValues();

        return lfPackageScopeRuleImpl;
    }

    public int compareTo(LFPackageScopeRule lfPackageScopeRule) {
        long primaryKey = lfPackageScopeRule.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        LFPackageScopeRule lfPackageScopeRule = null;

        try {
            lfPackageScopeRule = (LFPackageScopeRule) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = lfPackageScopeRule.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFPackageScopeRuleModelImpl lfPackageScopeRuleModelImpl = this;

        lfPackageScopeRuleModelImpl._originalPackageID = lfPackageScopeRuleModelImpl._packageID;

        lfPackageScopeRuleModelImpl._setOriginalPackageID = false;

        lfPackageScopeRuleModelImpl._originalScope = lfPackageScopeRuleModelImpl._scope;

        lfPackageScopeRuleModelImpl._originalScopeID = lfPackageScopeRuleModelImpl._scopeID;

        lfPackageScopeRuleModelImpl._originalVisibility = lfPackageScopeRuleModelImpl._visibility;

        lfPackageScopeRuleModelImpl._setOriginalVisibility = false;

        lfPackageScopeRuleModelImpl._originalIsDefault = lfPackageScopeRuleModelImpl._isDefault;

        lfPackageScopeRuleModelImpl._setOriginalIsDefault = false;

        lfPackageScopeRuleModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFPackageScopeRule> toCacheModel() {
        LFPackageScopeRuleCacheModel lfPackageScopeRuleCacheModel = new LFPackageScopeRuleCacheModel();

        lfPackageScopeRuleCacheModel.id = getId();

        lfPackageScopeRuleCacheModel.packageID = getPackageID();

        lfPackageScopeRuleCacheModel.scope = getScope();

        String scope = lfPackageScopeRuleCacheModel.scope;

        if ((scope != null) && (scope.length() == 0)) {
            lfPackageScopeRuleCacheModel.scope = null;
        }

        lfPackageScopeRuleCacheModel.scopeID = getScopeID();

        String scopeID = lfPackageScopeRuleCacheModel.scopeID;

        if ((scopeID != null) && (scopeID.length() == 0)) {
            lfPackageScopeRuleCacheModel.scopeID = null;
        }

        lfPackageScopeRuleCacheModel.visibility = getVisibility();

        lfPackageScopeRuleCacheModel.isDefault = getIsDefault();

        return lfPackageScopeRuleCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", packageID=");
        sb.append(getPackageID());
        sb.append(", scope=");
        sb.append(getScope());
        sb.append(", scopeID=");
        sb.append(getScopeID());
        sb.append(", visibility=");
        sb.append(getVisibility());
        sb.append(", isDefault=");
        sb.append(getIsDefault());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFPackageScopeRule");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageID</column-name><column-value><![CDATA[");
        sb.append(getPackageID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>scope</column-name><column-value><![CDATA[");
        sb.append(getScope());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>scopeID</column-name><column-value><![CDATA[");
        sb.append(getScopeID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>visibility</column-name><column-value><![CDATA[");
        sb.append(getVisibility());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isDefault</column-name><column-value><![CDATA[");
        sb.append(getIsDefault());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
