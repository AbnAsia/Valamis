package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFTincanLrsDocument;
import com.arcusys.learn.persistence.liferay.model.LFTincanLrsDocumentModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFTincanLrsDocument service. Represents a row in the &quot;Learn_LFTincanLrsDocument&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFTincanLrsDocumentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFTincanLrsDocumentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFTincanLrsDocumentImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFTincanLrsDocument
 * @see com.arcusys.learn.persistence.liferay.model.LFTincanLrsDocumentModel
 * @generated
 */
public class LFTincanLrsDocumentModelImpl extends BaseModelImpl<LFTincanLrsDocument>
    implements LFTincanLrsDocumentModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f tincan lrs document model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFTincanLrsDocument} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFTincanLrsDocument";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "documentId", Types.VARCHAR },
            { "update_", Types.TIMESTAMP },
            { "content", Types.CLOB },
            { "contentType", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFTincanLrsDocument (id_ LONG not null primary key,documentId VARCHAR(75) null,update_ DATE null,content TEXT null,contentType VARCHAR(2000) null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFTincanLrsDocument";
    public static final String ORDER_BY_JPQL = " ORDER BY lfTincanLrsDocument.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFTincanLrsDocument.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsDocument"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsDocument"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsDocument"),
            true);
    public static long DOCUMENTID_COLUMN_BITMASK = 1L;
    public static long ID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFTincanLrsDocument"));
    private static ClassLoader _classLoader = LFTincanLrsDocument.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFTincanLrsDocument.class
        };
    private long _id;
    private String _documentId;
    private String _originalDocumentId;
    private Date _update;
    private String _content;
    private String _contentType;
    private long _columnBitmask;
    private LFTincanLrsDocument _escapedModel;

    public LFTincanLrsDocumentModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFTincanLrsDocument.class;
    }

    @Override
    public String getModelClassName() {
        return LFTincanLrsDocument.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("documentId", getDocumentId());
        attributes.put("update", getUpdate());
        attributes.put("content", getContent());
        attributes.put("contentType", getContentType());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String documentId = (String) attributes.get("documentId");

        if (documentId != null) {
            setDocumentId(documentId);
        }

        Date update = (Date) attributes.get("update");

        if (update != null) {
            setUpdate(update);
        }

        String content = (String) attributes.get("content");

        if (content != null) {
            setContent(content);
        }

        String contentType = (String) attributes.get("contentType");

        if (contentType != null) {
            setContentType(contentType);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public String getDocumentId() {
        return _documentId;
    }

    @Override
    public void setDocumentId(String documentId) {
        _columnBitmask |= DOCUMENTID_COLUMN_BITMASK;

        if (_originalDocumentId == null) {
            _originalDocumentId = _documentId;
        }

        _documentId = documentId;
    }

    public String getOriginalDocumentId() {
        return _originalDocumentId;
    }

    @Override
    public Date getUpdate() {
        return _update;
    }

    @Override
    public void setUpdate(Date update) {
        _update = update;
    }

    @Override
    public String getContent() {
        return _content;
    }

    @Override
    public void setContent(String content) {
        _content = content;
    }

    @Override
    public String getContentType() {
        return _contentType;
    }

    @Override
    public void setContentType(String contentType) {
        _contentType = contentType;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFTincanLrsDocument.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFTincanLrsDocument toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFTincanLrsDocument) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFTincanLrsDocumentImpl lfTincanLrsDocumentImpl = new LFTincanLrsDocumentImpl();

        lfTincanLrsDocumentImpl.setId(getId());
        lfTincanLrsDocumentImpl.setDocumentId(getDocumentId());
        lfTincanLrsDocumentImpl.setUpdate(getUpdate());
        lfTincanLrsDocumentImpl.setContent(getContent());
        lfTincanLrsDocumentImpl.setContentType(getContentType());

        lfTincanLrsDocumentImpl.resetOriginalValues();

        return lfTincanLrsDocumentImpl;
    }

    @Override
    public int compareTo(LFTincanLrsDocument lfTincanLrsDocument) {
        long primaryKey = lfTincanLrsDocument.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFTincanLrsDocument)) {
            return false;
        }

        LFTincanLrsDocument lfTincanLrsDocument = (LFTincanLrsDocument) obj;

        long primaryKey = lfTincanLrsDocument.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFTincanLrsDocumentModelImpl lfTincanLrsDocumentModelImpl = this;

        lfTincanLrsDocumentModelImpl._originalDocumentId = lfTincanLrsDocumentModelImpl._documentId;

        lfTincanLrsDocumentModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFTincanLrsDocument> toCacheModel() {
        LFTincanLrsDocumentCacheModel lfTincanLrsDocumentCacheModel = new LFTincanLrsDocumentCacheModel();

        lfTincanLrsDocumentCacheModel.id = getId();

        lfTincanLrsDocumentCacheModel.documentId = getDocumentId();

        String documentId = lfTincanLrsDocumentCacheModel.documentId;

        if ((documentId != null) && (documentId.length() == 0)) {
            lfTincanLrsDocumentCacheModel.documentId = null;
        }

        Date update = getUpdate();

        if (update != null) {
            lfTincanLrsDocumentCacheModel.update = update.getTime();
        } else {
            lfTincanLrsDocumentCacheModel.update = Long.MIN_VALUE;
        }

        lfTincanLrsDocumentCacheModel.content = getContent();

        String content = lfTincanLrsDocumentCacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            lfTincanLrsDocumentCacheModel.content = null;
        }

        lfTincanLrsDocumentCacheModel.contentType = getContentType();

        String contentType = lfTincanLrsDocumentCacheModel.contentType;

        if ((contentType != null) && (contentType.length() == 0)) {
            lfTincanLrsDocumentCacheModel.contentType = null;
        }

        return lfTincanLrsDocumentCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", documentId=");
        sb.append(getDocumentId());
        sb.append(", update=");
        sb.append(getUpdate());
        sb.append(", content=");
        sb.append(getContent());
        sb.append(", contentType=");
        sb.append(getContentType());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFTincanLrsDocument");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>documentId</column-name><column-value><![CDATA[");
        sb.append(getDocumentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>update</column-name><column-value><![CDATA[");
        sb.append(getUpdate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contentType</column-name><column-value><![CDATA[");
        sb.append(getContentType());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
