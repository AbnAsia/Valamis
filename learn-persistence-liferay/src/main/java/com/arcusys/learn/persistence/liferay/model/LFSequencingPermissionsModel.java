package com.arcusys.learn.persistence.liferay.model;

import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
* The base model interface for the LFSequencingPermissions service. Represents a row in the &quot;Learn_LFSequencingPermissions&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This interface and its corresponding implementation {@link com.arcusys.learn.persistence.liferay.model.impl.LFSequencingPermissionsModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.arcusys.learn.persistence.liferay.model.impl.LFSequencingPermissionsImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFSequencingPermissions
* @see com.arcusys.learn.persistence.liferay.model.impl.LFSequencingPermissionsImpl
* @see com.arcusys.learn.persistence.liferay.model.impl.LFSequencingPermissionsModelImpl
* @generated
*/
public interface LFSequencingPermissionsModel extends BaseModel<LFSequencingPermissions> {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this interface directly. All methods that expect a l f sequencing permissions model instance should use the {@link LFSequencingPermissions} interface instead.
    */

    /**
    * Returns the primary key of this l f sequencing permissions.
    *
    * @return the primary key of this l f sequencing permissions
    */
    public long getPrimaryKey();

    /**
    * Sets the primary key of this l f sequencing permissions.
    *
    * @param primaryKey the primary key of this l f sequencing permissions
    */
    public void setPrimaryKey(long primaryKey);

    /**
    * Returns the ID of this l f sequencing permissions.
    *
    * @return the ID of this l f sequencing permissions
    */
    public long getId();

    /**
        * Sets the ID of this l f sequencing permissions.
    *
    * @param id the ID of this l f sequencing permissions
    */
    public void setId(long id);

    /**
    * Returns the sequencing i d of this l f sequencing permissions.
    *
    * @return the sequencing i d of this l f sequencing permissions
    */
    public Integer getSequencingID();

    /**
        * Sets the sequencing i d of this l f sequencing permissions.
    *
    * @param sequencingID the sequencing i d of this l f sequencing permissions
    */
    public void setSequencingID(Integer sequencingID);

    /**
    * Returns the choice for children of this l f sequencing permissions.
    *
    * @return the choice for children of this l f sequencing permissions
    */
    public boolean getChoiceForChildren();

    /**
    * Returns <code>true</code> if this l f sequencing permissions is choice for children.
    *
    * @return <code>true</code> if this l f sequencing permissions is choice for children; <code>false</code> otherwise
    */
    public boolean isChoiceForChildren();

    /**
        * Sets whether this l f sequencing permissions is choice for children.
    *
    * @param choiceForChildren the choice for children of this l f sequencing permissions
    */
    public void setChoiceForChildren(boolean choiceForChildren);

    /**
    * Returns the choice for non descendants of this l f sequencing permissions.
    *
    * @return the choice for non descendants of this l f sequencing permissions
    */
    public boolean getChoiceForNonDescendants();

    /**
    * Returns <code>true</code> if this l f sequencing permissions is choice for non descendants.
    *
    * @return <code>true</code> if this l f sequencing permissions is choice for non descendants; <code>false</code> otherwise
    */
    public boolean isChoiceForNonDescendants();

    /**
        * Sets whether this l f sequencing permissions is choice for non descendants.
    *
    * @param choiceForNonDescendants the choice for non descendants of this l f sequencing permissions
    */
    public void setChoiceForNonDescendants(boolean choiceForNonDescendants);

    /**
    * Returns the flow for children of this l f sequencing permissions.
    *
    * @return the flow for children of this l f sequencing permissions
    */
    public boolean getFlowForChildren();

    /**
    * Returns <code>true</code> if this l f sequencing permissions is flow for children.
    *
    * @return <code>true</code> if this l f sequencing permissions is flow for children; <code>false</code> otherwise
    */
    public boolean isFlowForChildren();

    /**
        * Sets whether this l f sequencing permissions is flow for children.
    *
    * @param flowForChildren the flow for children of this l f sequencing permissions
    */
    public void setFlowForChildren(boolean flowForChildren);

    /**
    * Returns the forward only for children of this l f sequencing permissions.
    *
    * @return the forward only for children of this l f sequencing permissions
    */
    public boolean getForwardOnlyForChildren();

    /**
    * Returns <code>true</code> if this l f sequencing permissions is forward only for children.
    *
    * @return <code>true</code> if this l f sequencing permissions is forward only for children; <code>false</code> otherwise
    */
    public boolean isForwardOnlyForChildren();

    /**
        * Sets whether this l f sequencing permissions is forward only for children.
    *
    * @param forwardOnlyForChildren the forward only for children of this l f sequencing permissions
    */
    public void setForwardOnlyForChildren(boolean forwardOnlyForChildren);

    public boolean isNew();

    public void setNew(boolean n);

    public boolean isCachedModel();

    public void setCachedModel(boolean cachedModel);

    public boolean isEscapedModel();

    public Serializable getPrimaryKeyObj();

    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    public ExpandoBridge getExpandoBridge();

    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    public Object clone();

    public int compareTo(LFSequencingPermissions lfSequencingPermissions);

    public int hashCode();

    public CacheModel<LFSequencingPermissions> toCacheModel();

    public LFSequencingPermissions toEscapedModel();

    public String toString();

    public String toXmlString();
}
