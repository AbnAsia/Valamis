package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFSequencingPermissions;
import com.arcusys.learn.persistence.liferay.model.LFSequencingPermissionsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
* The base model implementation for the LFSequencingPermissions service. Represents a row in the &quot;Learn_LFSequencingPermissions&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFSequencingPermissionsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFSequencingPermissionsImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFSequencingPermissionsImpl
* @see com.arcusys.learn.persistence.liferay.model.LFSequencingPermissions
* @see com.arcusys.learn.persistence.liferay.model.LFSequencingPermissionsModel
* @generated
*/
public class LFSequencingPermissionsModelImpl extends BaseModelImpl<LFSequencingPermissions>
    implements LFSequencingPermissionsModel {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this class directly. All methods that expect a l f sequencing permissions model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFSequencingPermissions} interface instead.
    */
    public static final String TABLE_NAME = "Learn_LFSequencingPermissions";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "sequencingID", Types.INTEGER },
            { "choiceForChildren", Types.BOOLEAN },
            { "choiceForNonDescendants", Types.BOOLEAN },
            { "flowForChildren", Types.BOOLEAN },
            { "forwardOnlyForChildren", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFSequencingPermissions (id_ LONG not null primary key,sequencingID INTEGER,choiceForChildren BOOLEAN,choiceForNonDescendants BOOLEAN,flowForChildren BOOLEAN,forwardOnlyForChildren BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFSequencingPermissions";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFSequencingPermissions"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFSequencingPermissions"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFSequencingPermissions"),
            true);
    public static long SEQUENCINGID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFSequencingPermissions"));
    private static ClassLoader _classLoader = LFSequencingPermissions.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            LFSequencingPermissions.class
        };
    private long _id;
    private Integer _sequencingID;
    private Integer _originalSequencingID;
    private boolean _setOriginalSequencingID;
    private boolean _choiceForChildren;
    private boolean _choiceForNonDescendants;
    private boolean _flowForChildren;
    private boolean _forwardOnlyForChildren;
    private long _columnBitmask;
    private LFSequencingPermissions _escapedModelProxy;

    public LFSequencingPermissionsModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return LFSequencingPermissions.class;
    }

    public String getModelClassName() {
        return LFSequencingPermissions.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("sequencingID", getSequencingID());
        attributes.put("choiceForChildren", getChoiceForChildren());
        attributes.put("choiceForNonDescendants", getChoiceForNonDescendants());
        attributes.put("flowForChildren", getFlowForChildren());
        attributes.put("forwardOnlyForChildren", getForwardOnlyForChildren());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer sequencingID = (Integer) attributes.get("sequencingID");

        if (sequencingID != null) {
            setSequencingID(sequencingID);
        }

        Boolean choiceForChildren = (Boolean) attributes.get(
                "choiceForChildren");

        if (choiceForChildren != null) {
            setChoiceForChildren(choiceForChildren);
        }

        Boolean choiceForNonDescendants = (Boolean) attributes.get(
                "choiceForNonDescendants");

        if (choiceForNonDescendants != null) {
            setChoiceForNonDescendants(choiceForNonDescendants);
        }

        Boolean flowForChildren = (Boolean) attributes.get("flowForChildren");

        if (flowForChildren != null) {
            setFlowForChildren(flowForChildren);
        }

        Boolean forwardOnlyForChildren = (Boolean) attributes.get(
                "forwardOnlyForChildren");

        if (forwardOnlyForChildren != null) {
            setForwardOnlyForChildren(forwardOnlyForChildren);
        }
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public Integer getSequencingID() {
        return _sequencingID;
    }

    public void setSequencingID(Integer sequencingID) {
        _columnBitmask |= SEQUENCINGID_COLUMN_BITMASK;

        if (!_setOriginalSequencingID) {
            _setOriginalSequencingID = true;

            _originalSequencingID = _sequencingID;
        }

        _sequencingID = sequencingID;
    }

    public Integer getOriginalSequencingID() {
        return _originalSequencingID;
    }

    public boolean getChoiceForChildren() {
        return _choiceForChildren;
    }

    public boolean isChoiceForChildren() {
        return _choiceForChildren;
    }

    public void setChoiceForChildren(boolean choiceForChildren) {
        _choiceForChildren = choiceForChildren;
    }

    public boolean getChoiceForNonDescendants() {
        return _choiceForNonDescendants;
    }

    public boolean isChoiceForNonDescendants() {
        return _choiceForNonDescendants;
    }

    public void setChoiceForNonDescendants(boolean choiceForNonDescendants) {
        _choiceForNonDescendants = choiceForNonDescendants;
    }

    public boolean getFlowForChildren() {
        return _flowForChildren;
    }

    public boolean isFlowForChildren() {
        return _flowForChildren;
    }

    public void setFlowForChildren(boolean flowForChildren) {
        _flowForChildren = flowForChildren;
    }

    public boolean getForwardOnlyForChildren() {
        return _forwardOnlyForChildren;
    }

    public boolean isForwardOnlyForChildren() {
        return _forwardOnlyForChildren;
    }

    public void setForwardOnlyForChildren(boolean forwardOnlyForChildren) {
        _forwardOnlyForChildren = forwardOnlyForChildren;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFSequencingPermissions.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFSequencingPermissions toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (LFSequencingPermissions) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LFSequencingPermissionsImpl lfSequencingPermissionsImpl = new LFSequencingPermissionsImpl();

        lfSequencingPermissionsImpl.setId(getId());
        lfSequencingPermissionsImpl.setSequencingID(getSequencingID());
        lfSequencingPermissionsImpl.setChoiceForChildren(getChoiceForChildren());
        lfSequencingPermissionsImpl.setChoiceForNonDescendants(getChoiceForNonDescendants());
        lfSequencingPermissionsImpl.setFlowForChildren(getFlowForChildren());
        lfSequencingPermissionsImpl.setForwardOnlyForChildren(getForwardOnlyForChildren());

        lfSequencingPermissionsImpl.resetOriginalValues();

        return lfSequencingPermissionsImpl;
    }

    public int compareTo(LFSequencingPermissions lfSequencingPermissions) {
        long primaryKey = lfSequencingPermissions.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        LFSequencingPermissions lfSequencingPermissions = null;

        try {
            lfSequencingPermissions = (LFSequencingPermissions) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = lfSequencingPermissions.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFSequencingPermissionsModelImpl lfSequencingPermissionsModelImpl = this;

        lfSequencingPermissionsModelImpl._originalSequencingID = lfSequencingPermissionsModelImpl._sequencingID;

        lfSequencingPermissionsModelImpl._setOriginalSequencingID = false;

        lfSequencingPermissionsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFSequencingPermissions> toCacheModel() {
        LFSequencingPermissionsCacheModel lfSequencingPermissionsCacheModel = new LFSequencingPermissionsCacheModel();

        lfSequencingPermissionsCacheModel.id = getId();

        lfSequencingPermissionsCacheModel.sequencingID = getSequencingID();

        lfSequencingPermissionsCacheModel.choiceForChildren = getChoiceForChildren();

        lfSequencingPermissionsCacheModel.choiceForNonDescendants = getChoiceForNonDescendants();

        lfSequencingPermissionsCacheModel.flowForChildren = getFlowForChildren();

        lfSequencingPermissionsCacheModel.forwardOnlyForChildren = getForwardOnlyForChildren();

        return lfSequencingPermissionsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", sequencingID=");
        sb.append(getSequencingID());
        sb.append(", choiceForChildren=");
        sb.append(getChoiceForChildren());
        sb.append(", choiceForNonDescendants=");
        sb.append(getChoiceForNonDescendants());
        sb.append(", flowForChildren=");
        sb.append(getFlowForChildren());
        sb.append(", forwardOnlyForChildren=");
        sb.append(getForwardOnlyForChildren());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFSequencingPermissions");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sequencingID</column-name><column-value><![CDATA[");
        sb.append(getSequencingID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>choiceForChildren</column-name><column-value><![CDATA[");
        sb.append(getChoiceForChildren());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>choiceForNonDescendants</column-name><column-value><![CDATA[");
        sb.append(getChoiceForNonDescendants());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>flowForChildren</column-name><column-value><![CDATA[");
        sb.append(getFlowForChildren());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forwardOnlyForChildren</column-name><column-value><![CDATA[");
        sb.append(getForwardOnlyForChildren());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
