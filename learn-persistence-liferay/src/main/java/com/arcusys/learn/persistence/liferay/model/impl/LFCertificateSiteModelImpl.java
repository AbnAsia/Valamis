package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFCertificateSite;
import com.arcusys.learn.persistence.liferay.model.LFCertificateSiteModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFCertificateSite service. Represents a row in the &quot;Learn_LFCertificateSite&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFCertificateSiteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFCertificateSiteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFCertificateSiteImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFCertificateSite
 * @see com.arcusys.learn.persistence.liferay.model.LFCertificateSiteModel
 * @generated
 */
public class LFCertificateSiteModelImpl extends BaseModelImpl<LFCertificateSite>
    implements LFCertificateSiteModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f certificate site model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFCertificateSite} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFCertificateSite";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "certificateID", Types.INTEGER },
            { "siteID", Types.INTEGER },
            { "arrangementIndex", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFCertificateSite (id_ LONG not null primary key,certificateID INTEGER null,siteID INTEGER null,arrangementIndex INTEGER null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFCertificateSite";
    public static final String ORDER_BY_JPQL = " ORDER BY lfCertificateSite.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFCertificateSite.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFCertificateSite"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFCertificateSite"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFCertificateSite"),
            true);
    public static long CERTIFICATEID_COLUMN_BITMASK = 1L;
    public static long SITEID_COLUMN_BITMASK = 2L;
    public static long ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFCertificateSite"));
    private static ClassLoader _classLoader = LFCertificateSite.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFCertificateSite.class
        };
    private long _id;
    private Integer _certificateID;
    private Integer _originalCertificateID;
    private boolean _setOriginalCertificateID;
    private Integer _siteID;
    private Integer _originalSiteID;
    private boolean _setOriginalSiteID;
    private Integer _arrangementIndex;
    private long _columnBitmask;
    private LFCertificateSite _escapedModel;

    public LFCertificateSiteModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFCertificateSite.class;
    }

    @Override
    public String getModelClassName() {
        return LFCertificateSite.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("certificateID", getCertificateID());
        attributes.put("siteID", getSiteID());
        attributes.put("arrangementIndex", getArrangementIndex());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer certificateID = (Integer) attributes.get("certificateID");

        if (certificateID != null) {
            setCertificateID(certificateID);
        }

        Integer siteID = (Integer) attributes.get("siteID");

        if (siteID != null) {
            setSiteID(siteID);
        }

        Integer arrangementIndex = (Integer) attributes.get("arrangementIndex");

        if (arrangementIndex != null) {
            setArrangementIndex(arrangementIndex);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public Integer getCertificateID() {
        return _certificateID;
    }

    @Override
    public void setCertificateID(Integer certificateID) {
        _columnBitmask |= CERTIFICATEID_COLUMN_BITMASK;

        if (!_setOriginalCertificateID) {
            _setOriginalCertificateID = true;

            _originalCertificateID = _certificateID;
        }

        _certificateID = certificateID;
    }

    public Integer getOriginalCertificateID() {
        return _originalCertificateID;
    }

    @Override
    public Integer getSiteID() {
        return _siteID;
    }

    @Override
    public void setSiteID(Integer siteID) {
        _columnBitmask |= SITEID_COLUMN_BITMASK;

        if (!_setOriginalSiteID) {
            _setOriginalSiteID = true;

            _originalSiteID = _siteID;
        }

        _siteID = siteID;
    }

    public Integer getOriginalSiteID() {
        return _originalSiteID;
    }

    @Override
    public Integer getArrangementIndex() {
        return _arrangementIndex;
    }

    @Override
    public void setArrangementIndex(Integer arrangementIndex) {
        _arrangementIndex = arrangementIndex;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFCertificateSite.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFCertificateSite toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFCertificateSite) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFCertificateSiteImpl lfCertificateSiteImpl = new LFCertificateSiteImpl();

        lfCertificateSiteImpl.setId(getId());
        lfCertificateSiteImpl.setCertificateID(getCertificateID());
        lfCertificateSiteImpl.setSiteID(getSiteID());
        lfCertificateSiteImpl.setArrangementIndex(getArrangementIndex());

        lfCertificateSiteImpl.resetOriginalValues();

        return lfCertificateSiteImpl;
    }

    @Override
    public int compareTo(LFCertificateSite lfCertificateSite) {
        long primaryKey = lfCertificateSite.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFCertificateSite)) {
            return false;
        }

        LFCertificateSite lfCertificateSite = (LFCertificateSite) obj;

        long primaryKey = lfCertificateSite.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFCertificateSiteModelImpl lfCertificateSiteModelImpl = this;

        lfCertificateSiteModelImpl._originalCertificateID = lfCertificateSiteModelImpl._certificateID;

        lfCertificateSiteModelImpl._setOriginalCertificateID = false;

        lfCertificateSiteModelImpl._originalSiteID = lfCertificateSiteModelImpl._siteID;

        lfCertificateSiteModelImpl._setOriginalSiteID = false;

        lfCertificateSiteModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFCertificateSite> toCacheModel() {
        LFCertificateSiteCacheModel lfCertificateSiteCacheModel = new LFCertificateSiteCacheModel();

        lfCertificateSiteCacheModel.id = getId();

        lfCertificateSiteCacheModel.certificateID = getCertificateID();

        lfCertificateSiteCacheModel.siteID = getSiteID();

        lfCertificateSiteCacheModel.arrangementIndex = getArrangementIndex();

        return lfCertificateSiteCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", certificateID=");
        sb.append(getCertificateID());
        sb.append(", siteID=");
        sb.append(getSiteID());
        sb.append(", arrangementIndex=");
        sb.append(getArrangementIndex());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFCertificateSite");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>certificateID</column-name><column-value><![CDATA[");
        sb.append(getCertificateID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>siteID</column-name><column-value><![CDATA[");
        sb.append(getSiteID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>arrangementIndex</column-name><column-value><![CDATA[");
        sb.append(getArrangementIndex());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
