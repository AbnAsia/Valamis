package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFPlayerScopeRule;
import com.arcusys.learn.persistence.liferay.model.LFPlayerScopeRuleModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFPlayerScopeRule service. Represents a row in the &quot;Learn_LFPlayerScopeRule&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFPlayerScopeRuleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFPlayerScopeRuleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFPlayerScopeRuleImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFPlayerScopeRule
 * @see com.arcusys.learn.persistence.liferay.model.LFPlayerScopeRuleModel
 * @generated
 */
public class LFPlayerScopeRuleModelImpl extends BaseModelImpl<LFPlayerScopeRule>
    implements LFPlayerScopeRuleModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f player scope rule model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFPlayerScopeRule} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFPlayerScopeRule";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "playerID", Types.CLOB },
            { "scope", Types.CLOB }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFPlayerScopeRule (id_ LONG not null primary key,playerID TEXT null,scope TEXT null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFPlayerScopeRule";
    public static final String ORDER_BY_JPQL = " ORDER BY lfPlayerScopeRule.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFPlayerScopeRule.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFPlayerScopeRule"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFPlayerScopeRule"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFPlayerScopeRule"),
            true);
    public static long PLAYERID_COLUMN_BITMASK = 1L;
    public static long ID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFPlayerScopeRule"));
    private static ClassLoader _classLoader = LFPlayerScopeRule.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFPlayerScopeRule.class
        };
    private long _id;
    private String _playerID;
    private String _originalPlayerID;
    private String _scope;
    private long _columnBitmask;
    private LFPlayerScopeRule _escapedModel;

    public LFPlayerScopeRuleModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFPlayerScopeRule.class;
    }

    @Override
    public String getModelClassName() {
        return LFPlayerScopeRule.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("playerID", getPlayerID());
        attributes.put("scope", getScope());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String playerID = (String) attributes.get("playerID");

        if (playerID != null) {
            setPlayerID(playerID);
        }

        String scope = (String) attributes.get("scope");

        if (scope != null) {
            setScope(scope);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public String getPlayerID() {
        if (_playerID == null) {
            return StringPool.BLANK;
        } else {
            return _playerID;
        }
    }

    @Override
    public void setPlayerID(String playerID) {
        _columnBitmask |= PLAYERID_COLUMN_BITMASK;

        if (_originalPlayerID == null) {
            _originalPlayerID = _playerID;
        }

        _playerID = playerID;
    }

    public String getOriginalPlayerID() {
        return GetterUtil.getString(_originalPlayerID);
    }

    @Override
    public String getScope() {
        if (_scope == null) {
            return StringPool.BLANK;
        } else {
            return _scope;
        }
    }

    @Override
    public void setScope(String scope) {
        _scope = scope;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFPlayerScopeRule.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFPlayerScopeRule toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFPlayerScopeRule) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFPlayerScopeRuleImpl lfPlayerScopeRuleImpl = new LFPlayerScopeRuleImpl();

        lfPlayerScopeRuleImpl.setId(getId());
        lfPlayerScopeRuleImpl.setPlayerID(getPlayerID());
        lfPlayerScopeRuleImpl.setScope(getScope());

        lfPlayerScopeRuleImpl.resetOriginalValues();

        return lfPlayerScopeRuleImpl;
    }

    @Override
    public int compareTo(LFPlayerScopeRule lfPlayerScopeRule) {
        long primaryKey = lfPlayerScopeRule.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFPlayerScopeRule)) {
            return false;
        }

        LFPlayerScopeRule lfPlayerScopeRule = (LFPlayerScopeRule) obj;

        long primaryKey = lfPlayerScopeRule.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFPlayerScopeRuleModelImpl lfPlayerScopeRuleModelImpl = this;

        lfPlayerScopeRuleModelImpl._originalPlayerID = lfPlayerScopeRuleModelImpl._playerID;

        lfPlayerScopeRuleModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFPlayerScopeRule> toCacheModel() {
        LFPlayerScopeRuleCacheModel lfPlayerScopeRuleCacheModel = new LFPlayerScopeRuleCacheModel();

        lfPlayerScopeRuleCacheModel.id = getId();

        lfPlayerScopeRuleCacheModel.playerID = getPlayerID();

        String playerID = lfPlayerScopeRuleCacheModel.playerID;

        if ((playerID != null) && (playerID.length() == 0)) {
            lfPlayerScopeRuleCacheModel.playerID = null;
        }

        lfPlayerScopeRuleCacheModel.scope = getScope();

        String scope = lfPlayerScopeRuleCacheModel.scope;

        if ((scope != null) && (scope.length() == 0)) {
            lfPlayerScopeRuleCacheModel.scope = null;
        }

        return lfPlayerScopeRuleCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", playerID=");
        sb.append(getPlayerID());
        sb.append(", scope=");
        sb.append(getScope());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFPlayerScopeRule");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>playerID</column-name><column-value><![CDATA[");
        sb.append(getPlayerID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>scope</column-name><column-value><![CDATA[");
        sb.append(getScope());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
