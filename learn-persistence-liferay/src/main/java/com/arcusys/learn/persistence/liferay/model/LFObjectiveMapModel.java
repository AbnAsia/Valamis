package com.arcusys.learn.persistence.liferay.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
* The base model interface for the LFObjectiveMap service. Represents a row in the &quot;Learn_LFObjectiveMap&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This interface and its corresponding implementation {@link com.arcusys.learn.persistence.liferay.model.impl.LFObjectiveMapModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.arcusys.learn.persistence.liferay.model.impl.LFObjectiveMapImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFObjectiveMap
* @see com.arcusys.learn.persistence.liferay.model.impl.LFObjectiveMapImpl
* @see com.arcusys.learn.persistence.liferay.model.impl.LFObjectiveMapModelImpl
* @generated
*/
public interface LFObjectiveMapModel extends BaseModel<LFObjectiveMap> {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this interface directly. All methods that expect a l f objective map model instance should use the {@link LFObjectiveMap} interface instead.
    */

    /**
    * Returns the primary key of this l f objective map.
    *
    * @return the primary key of this l f objective map
    */
    public long getPrimaryKey();

    /**
    * Sets the primary key of this l f objective map.
    *
    * @param primaryKey the primary key of this l f objective map
    */
    public void setPrimaryKey(long primaryKey);

    /**
    * Returns the ID of this l f objective map.
    *
    * @return the ID of this l f objective map
    */
    public long getId();

    /**
        * Sets the ID of this l f objective map.
    *
    * @param id the ID of this l f objective map
    */
    public void setId(long id);

    /**
    * Returns the objective i d of this l f objective map.
    *
    * @return the objective i d of this l f objective map
    */
    public Integer getObjectiveID();

    /**
        * Sets the objective i d of this l f objective map.
    *
    * @param objectiveID the objective i d of this l f objective map
    */
    public void setObjectiveID(Integer objectiveID);

    /**
    * Returns the read satisfied status from of this l f objective map.
    *
    * @return the read satisfied status from of this l f objective map
    */
    @AutoEscape
    public String getReadSatisfiedStatusFrom();

    /**
        * Sets the read satisfied status from of this l f objective map.
    *
    * @param readSatisfiedStatusFrom the read satisfied status from of this l f objective map
    */
    public void setReadSatisfiedStatusFrom(String readSatisfiedStatusFrom);

    /**
    * Returns the read normalized measure from of this l f objective map.
    *
    * @return the read normalized measure from of this l f objective map
    */
    @AutoEscape
    public String getReadNormalizedMeasureFrom();

    /**
        * Sets the read normalized measure from of this l f objective map.
    *
    * @param readNormalizedMeasureFrom the read normalized measure from of this l f objective map
    */
    public void setReadNormalizedMeasureFrom(String readNormalizedMeasureFrom);

    /**
    * Returns the write satisfied status to of this l f objective map.
    *
    * @return the write satisfied status to of this l f objective map
    */
    @AutoEscape
    public String getWriteSatisfiedStatusTo();

    /**
        * Sets the write satisfied status to of this l f objective map.
    *
    * @param writeSatisfiedStatusTo the write satisfied status to of this l f objective map
    */
    public void setWriteSatisfiedStatusTo(String writeSatisfiedStatusTo);

    /**
    * Returns the write normalized measure to of this l f objective map.
    *
    * @return the write normalized measure to of this l f objective map
    */
    @AutoEscape
    public String getWriteNormalizedMeasureTo();

    /**
        * Sets the write normalized measure to of this l f objective map.
    *
    * @param writeNormalizedMeasureTo the write normalized measure to of this l f objective map
    */
    public void setWriteNormalizedMeasureTo(String writeNormalizedMeasureTo);

    /**
    * Returns the read raw score from of this l f objective map.
    *
    * @return the read raw score from of this l f objective map
    */
    @AutoEscape
    public String getReadRawScoreFrom();

    /**
        * Sets the read raw score from of this l f objective map.
    *
    * @param readRawScoreFrom the read raw score from of this l f objective map
    */
    public void setReadRawScoreFrom(String readRawScoreFrom);

    /**
    * Returns the read min score from of this l f objective map.
    *
    * @return the read min score from of this l f objective map
    */
    @AutoEscape
    public String getReadMinScoreFrom();

    /**
        * Sets the read min score from of this l f objective map.
    *
    * @param readMinScoreFrom the read min score from of this l f objective map
    */
    public void setReadMinScoreFrom(String readMinScoreFrom);

    /**
    * Returns the read max score from of this l f objective map.
    *
    * @return the read max score from of this l f objective map
    */
    @AutoEscape
    public String getReadMaxScoreFrom();

    /**
        * Sets the read max score from of this l f objective map.
    *
    * @param readMaxScoreFrom the read max score from of this l f objective map
    */
    public void setReadMaxScoreFrom(String readMaxScoreFrom);

    /**
    * Returns the read completion status from of this l f objective map.
    *
    * @return the read completion status from of this l f objective map
    */
    @AutoEscape
    public String getReadCompletionStatusFrom();

    /**
        * Sets the read completion status from of this l f objective map.
    *
    * @param readCompletionStatusFrom the read completion status from of this l f objective map
    */
    public void setReadCompletionStatusFrom(String readCompletionStatusFrom);

    /**
    * Returns the read progress measure from of this l f objective map.
    *
    * @return the read progress measure from of this l f objective map
    */
    @AutoEscape
    public String getReadProgressMeasureFrom();

    /**
        * Sets the read progress measure from of this l f objective map.
    *
    * @param readProgressMeasureFrom the read progress measure from of this l f objective map
    */
    public void setReadProgressMeasureFrom(String readProgressMeasureFrom);

    /**
    * Returns the write raw score to of this l f objective map.
    *
    * @return the write raw score to of this l f objective map
    */
    @AutoEscape
    public String getWriteRawScoreTo();

    /**
        * Sets the write raw score to of this l f objective map.
    *
    * @param writeRawScoreTo the write raw score to of this l f objective map
    */
    public void setWriteRawScoreTo(String writeRawScoreTo);

    /**
    * Returns the write min score to of this l f objective map.
    *
    * @return the write min score to of this l f objective map
    */
    @AutoEscape
    public String getWriteMinScoreTo();

    /**
        * Sets the write min score to of this l f objective map.
    *
    * @param writeMinScoreTo the write min score to of this l f objective map
    */
    public void setWriteMinScoreTo(String writeMinScoreTo);

    /**
    * Returns the write max score to of this l f objective map.
    *
    * @return the write max score to of this l f objective map
    */
    @AutoEscape
    public String getWriteMaxScoreTo();

    /**
        * Sets the write max score to of this l f objective map.
    *
    * @param writeMaxScoreTo the write max score to of this l f objective map
    */
    public void setWriteMaxScoreTo(String writeMaxScoreTo);

    /**
    * Returns the write completion status to of this l f objective map.
    *
    * @return the write completion status to of this l f objective map
    */
    @AutoEscape
    public String getWriteCompletionStatusTo();

    /**
        * Sets the write completion status to of this l f objective map.
    *
    * @param writeCompletionStatusTo the write completion status to of this l f objective map
    */
    public void setWriteCompletionStatusTo(String writeCompletionStatusTo);

    /**
    * Returns the write progress measure to of this l f objective map.
    *
    * @return the write progress measure to of this l f objective map
    */
    @AutoEscape
    public String getWriteProgressMeasureTo();

    /**
        * Sets the write progress measure to of this l f objective map.
    *
    * @param writeProgressMeasureTo the write progress measure to of this l f objective map
    */
    public void setWriteProgressMeasureTo(String writeProgressMeasureTo);

    public boolean isNew();

    public void setNew(boolean n);

    public boolean isCachedModel();

    public void setCachedModel(boolean cachedModel);

    public boolean isEscapedModel();

    public Serializable getPrimaryKeyObj();

    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    public ExpandoBridge getExpandoBridge();

    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    public Object clone();

    public int compareTo(LFObjectiveMap lfObjectiveMap);

    public int hashCode();

    public CacheModel<LFObjectiveMap> toCacheModel();

    public LFObjectiveMap toEscapedModel();

    public String toString();

    public String toXmlString();
}
