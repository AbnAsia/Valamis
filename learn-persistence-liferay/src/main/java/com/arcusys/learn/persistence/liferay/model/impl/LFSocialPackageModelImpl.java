package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFSocialPackage;
import com.arcusys.learn.persistence.liferay.model.LFSocialPackageModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
* The base model implementation for the LFSocialPackage service. Represents a row in the &quot;Learn_LFSocialPackage&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFSocialPackageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFSocialPackageImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFSocialPackageImpl
* @see com.arcusys.learn.persistence.liferay.model.LFSocialPackage
* @see com.arcusys.learn.persistence.liferay.model.LFSocialPackageModel
* @generated
*/
public class LFSocialPackageModelImpl extends BaseModelImpl<LFSocialPackage>
    implements LFSocialPackageModel {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this class directly. All methods that expect a l f social package model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFSocialPackage} interface instead.
    */
    public static final String TABLE_NAME = "Learn_LFSocialPackage";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "packageID", Types.INTEGER },
            { "aboutPackage", Types.CLOB },
            { "publishDate", Types.TIMESTAMP },
            { "authorID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFSocialPackage (id_ LONG not null primary key,packageID INTEGER,aboutPackage TEXT null,publishDate DATE null,authorID INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFSocialPackage";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFSocialPackage"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFSocialPackage"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFSocialPackage"),
            true);
    public static long AUTHORID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFSocialPackage"));
    private static ClassLoader _classLoader = LFSocialPackage.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            LFSocialPackage.class
        };
    private long _id;
    private Integer _packageID;
    private String _aboutPackage;
    private Date _publishDate;
    private Integer _authorID;
    private Integer _originalAuthorID;
    private boolean _setOriginalAuthorID;
    private long _columnBitmask;
    private LFSocialPackage _escapedModelProxy;

    public LFSocialPackageModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return LFSocialPackage.class;
    }

    public String getModelClassName() {
        return LFSocialPackage.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("packageID", getPackageID());
        attributes.put("aboutPackage", getAboutPackage());
        attributes.put("publishDate", getPublishDate());
        attributes.put("authorID", getAuthorID());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer packageID = (Integer) attributes.get("packageID");

        if (packageID != null) {
            setPackageID(packageID);
        }

        String aboutPackage = (String) attributes.get("aboutPackage");

        if (aboutPackage != null) {
            setAboutPackage(aboutPackage);
        }

        Date publishDate = (Date) attributes.get("publishDate");

        if (publishDate != null) {
            setPublishDate(publishDate);
        }

        Integer authorID = (Integer) attributes.get("authorID");

        if (authorID != null) {
            setAuthorID(authorID);
        }
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public Integer getPackageID() {
        return _packageID;
    }

    public void setPackageID(Integer packageID) {
        _packageID = packageID;
    }

    public String getAboutPackage() {
        if (_aboutPackage == null) {
            return StringPool.BLANK;
        } else {
            return _aboutPackage;
        }
    }

    public void setAboutPackage(String aboutPackage) {
        _aboutPackage = aboutPackage;
    }

    public Date getPublishDate() {
        return _publishDate;
    }

    public void setPublishDate(Date publishDate) {
        _publishDate = publishDate;
    }

    public Integer getAuthorID() {
        return _authorID;
    }

    public void setAuthorID(Integer authorID) {
        _columnBitmask |= AUTHORID_COLUMN_BITMASK;

        if (!_setOriginalAuthorID) {
            _setOriginalAuthorID = true;

            _originalAuthorID = _authorID;
        }

        _authorID = authorID;
    }

    public Integer getOriginalAuthorID() {
        return _originalAuthorID;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFSocialPackage.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFSocialPackage toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (LFSocialPackage) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LFSocialPackageImpl lfSocialPackageImpl = new LFSocialPackageImpl();

        lfSocialPackageImpl.setId(getId());
        lfSocialPackageImpl.setPackageID(getPackageID());
        lfSocialPackageImpl.setAboutPackage(getAboutPackage());
        lfSocialPackageImpl.setPublishDate(getPublishDate());
        lfSocialPackageImpl.setAuthorID(getAuthorID());

        lfSocialPackageImpl.resetOriginalValues();

        return lfSocialPackageImpl;
    }

    public int compareTo(LFSocialPackage lfSocialPackage) {
        long primaryKey = lfSocialPackage.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        LFSocialPackage lfSocialPackage = null;

        try {
            lfSocialPackage = (LFSocialPackage) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = lfSocialPackage.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFSocialPackageModelImpl lfSocialPackageModelImpl = this;

        lfSocialPackageModelImpl._originalAuthorID = lfSocialPackageModelImpl._authorID;

        lfSocialPackageModelImpl._setOriginalAuthorID = false;

        lfSocialPackageModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFSocialPackage> toCacheModel() {
        LFSocialPackageCacheModel lfSocialPackageCacheModel = new LFSocialPackageCacheModel();

        lfSocialPackageCacheModel.id = getId();

        lfSocialPackageCacheModel.packageID = getPackageID();

        lfSocialPackageCacheModel.aboutPackage = getAboutPackage();

        String aboutPackage = lfSocialPackageCacheModel.aboutPackage;

        if ((aboutPackage != null) && (aboutPackage.length() == 0)) {
            lfSocialPackageCacheModel.aboutPackage = null;
        }

        Date publishDate = getPublishDate();

        if (publishDate != null) {
            lfSocialPackageCacheModel.publishDate = publishDate.getTime();
        } else {
            lfSocialPackageCacheModel.publishDate = Long.MIN_VALUE;
        }

        lfSocialPackageCacheModel.authorID = getAuthorID();

        return lfSocialPackageCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", packageID=");
        sb.append(getPackageID());
        sb.append(", aboutPackage=");
        sb.append(getAboutPackage());
        sb.append(", publishDate=");
        sb.append(getPublishDate());
        sb.append(", authorID=");
        sb.append(getAuthorID());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.arcusys.learn.persistence.liferay.model.LFSocialPackage");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageID</column-name><column-value><![CDATA[");
        sb.append(getPackageID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>aboutPackage</column-name><column-value><![CDATA[");
        sb.append(getAboutPackage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>publishDate</column-name><column-value><![CDATA[");
        sb.append(getPublishDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorID</column-name><column-value><![CDATA[");
        sb.append(getAuthorID());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
