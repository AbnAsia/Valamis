package com.arcusys.learn.persistence.liferay.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.math.BigDecimal;

/**
* The base model interface for the LFGlobalObjectiveState service. Represents a row in the &quot;Learn_LFGlobalObjectiveState&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This interface and its corresponding implementation {@link com.arcusys.learn.persistence.liferay.model.impl.LFGlobalObjectiveStateModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.arcusys.learn.persistence.liferay.model.impl.LFGlobalObjectiveStateImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFGlobalObjectiveState
* @see com.arcusys.learn.persistence.liferay.model.impl.LFGlobalObjectiveStateImpl
* @see com.arcusys.learn.persistence.liferay.model.impl.LFGlobalObjectiveStateModelImpl
* @generated
*/
public interface LFGlobalObjectiveStateModel extends BaseModel<LFGlobalObjectiveState> {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this interface directly. All methods that expect a l f global objective state model instance should use the {@link LFGlobalObjectiveState} interface instead.
    */

    /**
    * Returns the primary key of this l f global objective state.
    *
    * @return the primary key of this l f global objective state
    */
    public long getPrimaryKey();

    /**
    * Sets the primary key of this l f global objective state.
    *
    * @param primaryKey the primary key of this l f global objective state
    */
    public void setPrimaryKey(long primaryKey);

    /**
    * Returns the ID of this l f global objective state.
    *
    * @return the ID of this l f global objective state
    */
    public long getId();

    /**
        * Sets the ID of this l f global objective state.
    *
    * @param id the ID of this l f global objective state
    */
    public void setId(long id);

    /**
    * Returns the satisfied of this l f global objective state.
    *
    * @return the satisfied of this l f global objective state
    */
    public Boolean getSatisfied();

    /**
        * Sets the satisfied of this l f global objective state.
    *
    * @param satisfied the satisfied of this l f global objective state
    */
    public void setSatisfied(Boolean satisfied);

    /**
    * Returns the normalized measure of this l f global objective state.
    *
    * @return the normalized measure of this l f global objective state
    */
    public BigDecimal getNormalizedMeasure();

    /**
        * Sets the normalized measure of this l f global objective state.
    *
    * @param normalizedMeasure the normalized measure of this l f global objective state
    */
    public void setNormalizedMeasure(BigDecimal normalizedMeasure);

    /**
    * Returns the attempt completed of this l f global objective state.
    *
    * @return the attempt completed of this l f global objective state
    */
    public Boolean getAttemptCompleted();

    /**
        * Sets the attempt completed of this l f global objective state.
    *
    * @param attemptCompleted the attempt completed of this l f global objective state
    */
    public void setAttemptCompleted(Boolean attemptCompleted);

    /**
    * Returns the map key of this l f global objective state.
    *
    * @return the map key of this l f global objective state
    */
    @AutoEscape
    public String getMapKey();

    /**
        * Sets the map key of this l f global objective state.
    *
    * @param mapKey the map key of this l f global objective state
    */
    public void setMapKey(String mapKey);

    /**
    * Returns the tree i d of this l f global objective state.
    *
    * @return the tree i d of this l f global objective state
    */
    public Integer getTreeID();

    /**
        * Sets the tree i d of this l f global objective state.
    *
    * @param treeID the tree i d of this l f global objective state
    */
    public void setTreeID(Integer treeID);

    public boolean isNew();

    public void setNew(boolean n);

    public boolean isCachedModel();

    public void setCachedModel(boolean cachedModel);

    public boolean isEscapedModel();

    public Serializable getPrimaryKeyObj();

    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    public ExpandoBridge getExpandoBridge();

    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    public Object clone();

    public int compareTo(LFGlobalObjectiveState lfGlobalObjectiveState);

    public int hashCode();

    public CacheModel<LFGlobalObjectiveState> toCacheModel();

    public LFGlobalObjectiveState toEscapedModel();

    public String toString();

    public String toXmlString();
}
