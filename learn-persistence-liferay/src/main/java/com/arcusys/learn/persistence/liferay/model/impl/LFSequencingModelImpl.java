package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFSequencing;
import com.arcusys.learn.persistence.liferay.model.LFSequencingModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFSequencing service. Represents a row in the &quot;Learn_LFSequencing&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFSequencingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFSequencingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFSequencingImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFSequencing
 * @see com.arcusys.learn.persistence.liferay.model.LFSequencingModel
 * @generated
 */
public class LFSequencingModelImpl extends BaseModelImpl<LFSequencing>
    implements LFSequencingModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f sequencing model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFSequencing} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFSequencing";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "packageID", Types.INTEGER },
            { "activityID", Types.VARCHAR },
            { "sharedId", Types.CLOB },
            { "sharedSequencingIdReference", Types.CLOB },
            { "onlyCurrentAttemptObjectiveProgressForChildren", Types.BOOLEAN },
            { "onlyCurrentAttemptAttemptProgressForChildren", Types.BOOLEAN },
            { "attemptLimit", Types.INTEGER },
            { "durationLimitInMilliseconds", Types.BIGINT },
            { "rollupContributionID", Types.INTEGER },
            { "preventChildrenActivation", Types.BOOLEAN },
            { "constrainChoice", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFSequencing (id_ LONG not null primary key,packageID INTEGER null,activityID VARCHAR(512) null,sharedId TEXT null,sharedSequencingIdReference TEXT null,onlyCurrentAttemptObjectiveProgressForChildren BOOLEAN null,onlyCurrentAttemptAttemptProgressForChildren BOOLEAN null,attemptLimit INTEGER null,durationLimitInMilliseconds LONG null,rollupContributionID INTEGER null,preventChildrenActivation BOOLEAN null,constrainChoice BOOLEAN null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFSequencing";
    public static final String ORDER_BY_JPQL = " ORDER BY lfSequencing.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFSequencing.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFSequencing"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFSequencing"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFSequencing"),
            true);
    public static long ACTIVITYID_COLUMN_BITMASK = 1L;
    public static long PACKAGEID_COLUMN_BITMASK = 2L;
    public static long ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFSequencing"));
    private static ClassLoader _classLoader = LFSequencing.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFSequencing.class
        };
    private long _id;
    private Integer _packageID;
    private Integer _originalPackageID;
    private boolean _setOriginalPackageID;
    private String _activityID;
    private String _originalActivityID;
    private String _sharedId;
    private String _sharedSequencingIdReference;
    private boolean _onlyCurrentAttemptObjectiveProgressForChildren;
    private boolean _onlyCurrentAttemptAttemptProgressForChildren;
    private Integer _attemptLimit;
    private Long _durationLimitInMilliseconds;
    private Integer _rollupContributionID;
    private boolean _preventChildrenActivation;
    private boolean _constrainChoice;
    private long _columnBitmask;
    private LFSequencing _escapedModel;

    public LFSequencingModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFSequencing.class;
    }

    @Override
    public String getModelClassName() {
        return LFSequencing.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("packageID", getPackageID());
        attributes.put("activityID", getActivityID());
        attributes.put("sharedId", getSharedId());
        attributes.put("sharedSequencingIdReference",
            getSharedSequencingIdReference());
        attributes.put("onlyCurrentAttemptObjectiveProgressForChildren",
            getOnlyCurrentAttemptObjectiveProgressForChildren());
        attributes.put("onlyCurrentAttemptAttemptProgressForChildren",
            getOnlyCurrentAttemptAttemptProgressForChildren());
        attributes.put("attemptLimit", getAttemptLimit());
        attributes.put("durationLimitInMilliseconds",
            getDurationLimitInMilliseconds());
        attributes.put("rollupContributionID", getRollupContributionID());
        attributes.put("preventChildrenActivation",
            getPreventChildrenActivation());
        attributes.put("constrainChoice", getConstrainChoice());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer packageID = (Integer) attributes.get("packageID");

        if (packageID != null) {
            setPackageID(packageID);
        }

        String activityID = (String) attributes.get("activityID");

        if (activityID != null) {
            setActivityID(activityID);
        }

        String sharedId = (String) attributes.get("sharedId");

        if (sharedId != null) {
            setSharedId(sharedId);
        }

        String sharedSequencingIdReference = (String) attributes.get(
                "sharedSequencingIdReference");

        if (sharedSequencingIdReference != null) {
            setSharedSequencingIdReference(sharedSequencingIdReference);
        }

        Boolean onlyCurrentAttemptObjectiveProgressForChildren = (Boolean) attributes.get(
                "onlyCurrentAttemptObjectiveProgressForChildren");

        if (onlyCurrentAttemptObjectiveProgressForChildren != null) {
            setOnlyCurrentAttemptObjectiveProgressForChildren(onlyCurrentAttemptObjectiveProgressForChildren);
        }

        Boolean onlyCurrentAttemptAttemptProgressForChildren = (Boolean) attributes.get(
                "onlyCurrentAttemptAttemptProgressForChildren");

        if (onlyCurrentAttemptAttemptProgressForChildren != null) {
            setOnlyCurrentAttemptAttemptProgressForChildren(onlyCurrentAttemptAttemptProgressForChildren);
        }

        Integer attemptLimit = (Integer) attributes.get("attemptLimit");

        if (attemptLimit != null) {
            setAttemptLimit(attemptLimit);
        }

        Long durationLimitInMilliseconds = (Long) attributes.get(
                "durationLimitInMilliseconds");

        if (durationLimitInMilliseconds != null) {
            setDurationLimitInMilliseconds(durationLimitInMilliseconds);
        }

        Integer rollupContributionID = (Integer) attributes.get(
                "rollupContributionID");

        if (rollupContributionID != null) {
            setRollupContributionID(rollupContributionID);
        }

        Boolean preventChildrenActivation = (Boolean) attributes.get(
                "preventChildrenActivation");

        if (preventChildrenActivation != null) {
            setPreventChildrenActivation(preventChildrenActivation);
        }

        Boolean constrainChoice = (Boolean) attributes.get("constrainChoice");

        if (constrainChoice != null) {
            setConstrainChoice(constrainChoice);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public Integer getPackageID() {
        return _packageID;
    }

    @Override
    public void setPackageID(Integer packageID) {
        _columnBitmask |= PACKAGEID_COLUMN_BITMASK;

        if (!_setOriginalPackageID) {
            _setOriginalPackageID = true;

            _originalPackageID = _packageID;
        }

        _packageID = packageID;
    }

    public Integer getOriginalPackageID() {
        return _originalPackageID;
    }

    @Override
    public String getActivityID() {
        if (_activityID == null) {
            return StringPool.BLANK;
        } else {
            return _activityID;
        }
    }

    @Override
    public void setActivityID(String activityID) {
        _columnBitmask |= ACTIVITYID_COLUMN_BITMASK;

        if (_originalActivityID == null) {
            _originalActivityID = _activityID;
        }

        _activityID = activityID;
    }

    public String getOriginalActivityID() {
        return GetterUtil.getString(_originalActivityID);
    }

    @Override
    public String getSharedId() {
        return _sharedId;
    }

    @Override
    public void setSharedId(String sharedId) {
        _sharedId = sharedId;
    }

    @Override
    public String getSharedSequencingIdReference() {
        return _sharedSequencingIdReference;
    }

    @Override
    public void setSharedSequencingIdReference(
        String sharedSequencingIdReference) {
        _sharedSequencingIdReference = sharedSequencingIdReference;
    }

    @Override
    public boolean getOnlyCurrentAttemptObjectiveProgressForChildren() {
        return _onlyCurrentAttemptObjectiveProgressForChildren;
    }

    @Override
    public boolean isOnlyCurrentAttemptObjectiveProgressForChildren() {
        return _onlyCurrentAttemptObjectiveProgressForChildren;
    }

    @Override
    public void setOnlyCurrentAttemptObjectiveProgressForChildren(
        boolean onlyCurrentAttemptObjectiveProgressForChildren) {
        _onlyCurrentAttemptObjectiveProgressForChildren = onlyCurrentAttemptObjectiveProgressForChildren;
    }

    @Override
    public boolean getOnlyCurrentAttemptAttemptProgressForChildren() {
        return _onlyCurrentAttemptAttemptProgressForChildren;
    }

    @Override
    public boolean isOnlyCurrentAttemptAttemptProgressForChildren() {
        return _onlyCurrentAttemptAttemptProgressForChildren;
    }

    @Override
    public void setOnlyCurrentAttemptAttemptProgressForChildren(
        boolean onlyCurrentAttemptAttemptProgressForChildren) {
        _onlyCurrentAttemptAttemptProgressForChildren = onlyCurrentAttemptAttemptProgressForChildren;
    }

    @Override
    public Integer getAttemptLimit() {
        return _attemptLimit;
    }

    @Override
    public void setAttemptLimit(Integer attemptLimit) {
        _attemptLimit = attemptLimit;
    }

    @Override
    public Long getDurationLimitInMilliseconds() {
        return _durationLimitInMilliseconds;
    }

    @Override
    public void setDurationLimitInMilliseconds(Long durationLimitInMilliseconds) {
        _durationLimitInMilliseconds = durationLimitInMilliseconds;
    }

    @Override
    public Integer getRollupContributionID() {
        return _rollupContributionID;
    }

    @Override
    public void setRollupContributionID(Integer rollupContributionID) {
        _rollupContributionID = rollupContributionID;
    }

    @Override
    public boolean getPreventChildrenActivation() {
        return _preventChildrenActivation;
    }

    @Override
    public boolean isPreventChildrenActivation() {
        return _preventChildrenActivation;
    }

    @Override
    public void setPreventChildrenActivation(boolean preventChildrenActivation) {
        _preventChildrenActivation = preventChildrenActivation;
    }

    @Override
    public boolean getConstrainChoice() {
        return _constrainChoice;
    }

    @Override
    public boolean isConstrainChoice() {
        return _constrainChoice;
    }

    @Override
    public void setConstrainChoice(boolean constrainChoice) {
        _constrainChoice = constrainChoice;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFSequencing.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFSequencing toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFSequencing) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFSequencingImpl lfSequencingImpl = new LFSequencingImpl();

        lfSequencingImpl.setId(getId());
        lfSequencingImpl.setPackageID(getPackageID());
        lfSequencingImpl.setActivityID(getActivityID());
        lfSequencingImpl.setSharedId(getSharedId());
        lfSequencingImpl.setSharedSequencingIdReference(getSharedSequencingIdReference());
        lfSequencingImpl.setOnlyCurrentAttemptObjectiveProgressForChildren(getOnlyCurrentAttemptObjectiveProgressForChildren());
        lfSequencingImpl.setOnlyCurrentAttemptAttemptProgressForChildren(getOnlyCurrentAttemptAttemptProgressForChildren());
        lfSequencingImpl.setAttemptLimit(getAttemptLimit());
        lfSequencingImpl.setDurationLimitInMilliseconds(getDurationLimitInMilliseconds());
        lfSequencingImpl.setRollupContributionID(getRollupContributionID());
        lfSequencingImpl.setPreventChildrenActivation(getPreventChildrenActivation());
        lfSequencingImpl.setConstrainChoice(getConstrainChoice());

        lfSequencingImpl.resetOriginalValues();

        return lfSequencingImpl;
    }

    @Override
    public int compareTo(LFSequencing lfSequencing) {
        long primaryKey = lfSequencing.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFSequencing)) {
            return false;
        }

        LFSequencing lfSequencing = (LFSequencing) obj;

        long primaryKey = lfSequencing.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFSequencingModelImpl lfSequencingModelImpl = this;

        lfSequencingModelImpl._originalPackageID = lfSequencingModelImpl._packageID;

        lfSequencingModelImpl._setOriginalPackageID = false;

        lfSequencingModelImpl._originalActivityID = lfSequencingModelImpl._activityID;

        lfSequencingModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFSequencing> toCacheModel() {
        LFSequencingCacheModel lfSequencingCacheModel = new LFSequencingCacheModel();

        lfSequencingCacheModel.id = getId();

        lfSequencingCacheModel.packageID = getPackageID();

        lfSequencingCacheModel.activityID = getActivityID();

        String activityID = lfSequencingCacheModel.activityID;

        if ((activityID != null) && (activityID.length() == 0)) {
            lfSequencingCacheModel.activityID = null;
        }

        lfSequencingCacheModel.sharedId = getSharedId();

        String sharedId = lfSequencingCacheModel.sharedId;

        if ((sharedId != null) && (sharedId.length() == 0)) {
            lfSequencingCacheModel.sharedId = null;
        }

        lfSequencingCacheModel.sharedSequencingIdReference = getSharedSequencingIdReference();

        String sharedSequencingIdReference = lfSequencingCacheModel.sharedSequencingIdReference;

        if ((sharedSequencingIdReference != null) &&
                (sharedSequencingIdReference.length() == 0)) {
            lfSequencingCacheModel.sharedSequencingIdReference = null;
        }

        lfSequencingCacheModel.onlyCurrentAttemptObjectiveProgressForChildren = getOnlyCurrentAttemptObjectiveProgressForChildren();

        lfSequencingCacheModel.onlyCurrentAttemptAttemptProgressForChildren = getOnlyCurrentAttemptAttemptProgressForChildren();

        lfSequencingCacheModel.attemptLimit = getAttemptLimit();

        lfSequencingCacheModel.durationLimitInMilliseconds = getDurationLimitInMilliseconds();

        lfSequencingCacheModel.rollupContributionID = getRollupContributionID();

        lfSequencingCacheModel.preventChildrenActivation = getPreventChildrenActivation();

        lfSequencingCacheModel.constrainChoice = getConstrainChoice();

        return lfSequencingCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", packageID=");
        sb.append(getPackageID());
        sb.append(", activityID=");
        sb.append(getActivityID());
        sb.append(", sharedId=");
        sb.append(getSharedId());
        sb.append(", sharedSequencingIdReference=");
        sb.append(getSharedSequencingIdReference());
        sb.append(", onlyCurrentAttemptObjectiveProgressForChildren=");
        sb.append(getOnlyCurrentAttemptObjectiveProgressForChildren());
        sb.append(", onlyCurrentAttemptAttemptProgressForChildren=");
        sb.append(getOnlyCurrentAttemptAttemptProgressForChildren());
        sb.append(", attemptLimit=");
        sb.append(getAttemptLimit());
        sb.append(", durationLimitInMilliseconds=");
        sb.append(getDurationLimitInMilliseconds());
        sb.append(", rollupContributionID=");
        sb.append(getRollupContributionID());
        sb.append(", preventChildrenActivation=");
        sb.append(getPreventChildrenActivation());
        sb.append(", constrainChoice=");
        sb.append(getConstrainChoice());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.arcusys.learn.persistence.liferay.model.LFSequencing");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageID</column-name><column-value><![CDATA[");
        sb.append(getPackageID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>activityID</column-name><column-value><![CDATA[");
        sb.append(getActivityID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sharedId</column-name><column-value><![CDATA[");
        sb.append(getSharedId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sharedSequencingIdReference</column-name><column-value><![CDATA[");
        sb.append(getSharedSequencingIdReference());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>onlyCurrentAttemptObjectiveProgressForChildren</column-name><column-value><![CDATA[");
        sb.append(getOnlyCurrentAttemptObjectiveProgressForChildren());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>onlyCurrentAttemptAttemptProgressForChildren</column-name><column-value><![CDATA[");
        sb.append(getOnlyCurrentAttemptAttemptProgressForChildren());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>attemptLimit</column-name><column-value><![CDATA[");
        sb.append(getAttemptLimit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>durationLimitInMilliseconds</column-name><column-value><![CDATA[");
        sb.append(getDurationLimitInMilliseconds());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rollupContributionID</column-name><column-value><![CDATA[");
        sb.append(getRollupContributionID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>preventChildrenActivation</column-name><column-value><![CDATA[");
        sb.append(getPreventChildrenActivation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>constrainChoice</column-name><column-value><![CDATA[");
        sb.append(getConstrainChoice());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
