package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFTincanLrsSubStatement;
import com.arcusys.learn.persistence.liferay.model.LFTincanLrsSubStatementModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
* The base model implementation for the LFTincanLrsSubStatement service. Represents a row in the &quot;Learn_LFTincanLrsSubStatement&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFTincanLrsSubStatementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFTincanLrsSubStatementImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFTincanLrsSubStatementImpl
* @see com.arcusys.learn.persistence.liferay.model.LFTincanLrsSubStatement
* @see com.arcusys.learn.persistence.liferay.model.LFTincanLrsSubStatementModel
* @generated
*/
public class LFTincanLrsSubStatementModelImpl extends BaseModelImpl<LFTincanLrsSubStatement>
    implements LFTincanLrsSubStatementModel {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this class directly. All methods that expect a l f tincan lrs sub statement model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFTincanLrsSubStatement} interface instead.
    */
    public static final String TABLE_NAME = "Learn_LFTincanLrsSubStatement";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "actorID", Types.INTEGER },
            { "verbID", Types.VARCHAR },
            { "verbDisplay", Types.CLOB },
            { "objType", Types.VARCHAR },
            { "objID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFTincanLrsSubStatement (id_ LONG not null primary key,actorID INTEGER null,verbID VARCHAR(2000) null,verbDisplay TEXT null,objType VARCHAR(2000) null,objID INTEGER null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFTincanLrsSubStatement";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsSubStatement"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsSubStatement"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFTincanLrsSubStatement"));
    private static ClassLoader _classLoader = LFTincanLrsSubStatement.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            LFTincanLrsSubStatement.class
        };
    private long _id;
    private Integer _actorID;
    private String _verbID;
    private String _verbDisplay;
    private String _objType;
    private Integer _objID;
    private LFTincanLrsSubStatement _escapedModelProxy;

    public LFTincanLrsSubStatementModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return LFTincanLrsSubStatement.class;
    }

    public String getModelClassName() {
        return LFTincanLrsSubStatement.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("actorID", getActorID());
        attributes.put("verbID", getVerbID());
        attributes.put("verbDisplay", getVerbDisplay());
        attributes.put("objType", getObjType());
        attributes.put("objID", getObjID());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer actorID = (Integer) attributes.get("actorID");

        if (actorID != null) {
            setActorID(actorID);
        }

        String verbID = (String) attributes.get("verbID");

        if (verbID != null) {
            setVerbID(verbID);
        }

        String verbDisplay = (String) attributes.get("verbDisplay");

        if (verbDisplay != null) {
            setVerbDisplay(verbDisplay);
        }

        String objType = (String) attributes.get("objType");

        if (objType != null) {
            setObjType(objType);
        }

        Integer objID = (Integer) attributes.get("objID");

        if (objID != null) {
            setObjID(objID);
        }
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public Integer getActorID() {
        return _actorID;
    }

    public void setActorID(Integer actorID) {
        _actorID = actorID;
    }

    public String getVerbID() {
        return _verbID;
    }

    public void setVerbID(String verbID) {
        _verbID = verbID;
    }

    public String getVerbDisplay() {
        return _verbDisplay;
    }

    public void setVerbDisplay(String verbDisplay) {
        _verbDisplay = verbDisplay;
    }

    public String getObjType() {
        return _objType;
    }

    public void setObjType(String objType) {
        _objType = objType;
    }

    public Integer getObjID() {
        return _objID;
    }

    public void setObjID(Integer objID) {
        _objID = objID;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFTincanLrsSubStatement.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFTincanLrsSubStatement toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (LFTincanLrsSubStatement) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LFTincanLrsSubStatementImpl lfTincanLrsSubStatementImpl = new LFTincanLrsSubStatementImpl();

        lfTincanLrsSubStatementImpl.setId(getId());
        lfTincanLrsSubStatementImpl.setActorID(getActorID());
        lfTincanLrsSubStatementImpl.setVerbID(getVerbID());
        lfTincanLrsSubStatementImpl.setVerbDisplay(getVerbDisplay());
        lfTincanLrsSubStatementImpl.setObjType(getObjType());
        lfTincanLrsSubStatementImpl.setObjID(getObjID());

        lfTincanLrsSubStatementImpl.resetOriginalValues();

        return lfTincanLrsSubStatementImpl;
    }

    public int compareTo(LFTincanLrsSubStatement lfTincanLrsSubStatement) {
        long primaryKey = lfTincanLrsSubStatement.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        LFTincanLrsSubStatement lfTincanLrsSubStatement = null;

        try {
            lfTincanLrsSubStatement = (LFTincanLrsSubStatement) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = lfTincanLrsSubStatement.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<LFTincanLrsSubStatement> toCacheModel() {
        LFTincanLrsSubStatementCacheModel lfTincanLrsSubStatementCacheModel = new LFTincanLrsSubStatementCacheModel();

        lfTincanLrsSubStatementCacheModel.id = getId();

        lfTincanLrsSubStatementCacheModel.actorID = getActorID();

        lfTincanLrsSubStatementCacheModel.verbID = getVerbID();

        String verbID = lfTincanLrsSubStatementCacheModel.verbID;

        if ((verbID != null) && (verbID.length() == 0)) {
            lfTincanLrsSubStatementCacheModel.verbID = null;
        }

        lfTincanLrsSubStatementCacheModel.verbDisplay = getVerbDisplay();

        String verbDisplay = lfTincanLrsSubStatementCacheModel.verbDisplay;

        if ((verbDisplay != null) && (verbDisplay.length() == 0)) {
            lfTincanLrsSubStatementCacheModel.verbDisplay = null;
        }

        lfTincanLrsSubStatementCacheModel.objType = getObjType();

        String objType = lfTincanLrsSubStatementCacheModel.objType;

        if ((objType != null) && (objType.length() == 0)) {
            lfTincanLrsSubStatementCacheModel.objType = null;
        }

        lfTincanLrsSubStatementCacheModel.objID = getObjID();

        return lfTincanLrsSubStatementCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", actorID=");
        sb.append(getActorID());
        sb.append(", verbID=");
        sb.append(getVerbID());
        sb.append(", verbDisplay=");
        sb.append(getVerbDisplay());
        sb.append(", objType=");
        sb.append(getObjType());
        sb.append(", objID=");
        sb.append(getObjID());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFTincanLrsSubStatement");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actorID</column-name><column-value><![CDATA[");
        sb.append(getActorID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>verbID</column-name><column-value><![CDATA[");
        sb.append(getVerbID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>verbDisplay</column-name><column-value><![CDATA[");
        sb.append(getVerbDisplay());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>objType</column-name><column-value><![CDATA[");
        sb.append(getObjType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>objID</column-name><column-value><![CDATA[");
        sb.append(getObjID());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
