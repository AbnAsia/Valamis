package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFResource;
import com.arcusys.learn.persistence.liferay.model.LFResourceModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
* The base model implementation for the LFResource service. Represents a row in the &quot;Learn_LFResource&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFResourceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFResourceImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFResourceImpl
* @see com.arcusys.learn.persistence.liferay.model.LFResource
* @see com.arcusys.learn.persistence.liferay.model.LFResourceModel
* @generated
*/
public class LFResourceModelImpl extends BaseModelImpl<LFResource>
    implements LFResourceModel {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this class directly. All methods that expect a l f resource model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFResource} interface instead.
    */
    public static final String TABLE_NAME = "Learn_LFResource";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "packageID", Types.INTEGER },
            { "scormType", Types.CLOB },
            { "resourceID", Types.CLOB },
            { "href", Types.CLOB },
            { "base", Types.CLOB }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFResource (id_ LONG not null primary key,packageID INTEGER,scormType TEXT null,resourceID TEXT null,href TEXT null,base TEXT null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFResource";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFResource"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFResource"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFResource"),
            true);
    public static long PACKAGEID_COLUMN_BITMASK = 1L;
    public static long RESOURCEID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFResource"));
    private static ClassLoader _classLoader = LFResource.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            LFResource.class
        };
    private long _id;
    private Integer _packageID;
    private Integer _originalPackageID;
    private boolean _setOriginalPackageID;
    private String _scormType;
    private String _resourceID;
    private String _originalResourceID;
    private String _href;
    private String _base;
    private long _columnBitmask;
    private LFResource _escapedModelProxy;

    public LFResourceModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return LFResource.class;
    }

    public String getModelClassName() {
        return LFResource.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("packageID", getPackageID());
        attributes.put("scormType", getScormType());
        attributes.put("resourceID", getResourceID());
        attributes.put("href", getHref());
        attributes.put("base", getBase());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer packageID = (Integer) attributes.get("packageID");

        if (packageID != null) {
            setPackageID(packageID);
        }

        String scormType = (String) attributes.get("scormType");

        if (scormType != null) {
            setScormType(scormType);
        }

        String resourceID = (String) attributes.get("resourceID");

        if (resourceID != null) {
            setResourceID(resourceID);
        }

        String href = (String) attributes.get("href");

        if (href != null) {
            setHref(href);
        }

        String base = (String) attributes.get("base");

        if (base != null) {
            setBase(base);
        }
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public Integer getPackageID() {
        return _packageID;
    }

    public void setPackageID(Integer packageID) {
        _columnBitmask |= PACKAGEID_COLUMN_BITMASK;

        if (!_setOriginalPackageID) {
            _setOriginalPackageID = true;

            _originalPackageID = _packageID;
        }

        _packageID = packageID;
    }

    public Integer getOriginalPackageID() {
        return _originalPackageID;
    }

    public String getScormType() {
        if (_scormType == null) {
            return StringPool.BLANK;
        } else {
            return _scormType;
        }
    }

    public void setScormType(String scormType) {
        _scormType = scormType;
    }

    public String getResourceID() {
        if (_resourceID == null) {
            return StringPool.BLANK;
        } else {
            return _resourceID;
        }
    }

    public void setResourceID(String resourceID) {
        _columnBitmask |= RESOURCEID_COLUMN_BITMASK;

        if (_originalResourceID == null) {
            _originalResourceID = _resourceID;
        }

        _resourceID = resourceID;
    }

    public String getOriginalResourceID() {
        return GetterUtil.getString(_originalResourceID);
    }

    public String getHref() {
        if (_href == null) {
            return StringPool.BLANK;
        } else {
            return _href;
        }
    }

    public void setHref(String href) {
        _href = href;
    }

    public String getBase() {
        if (_base == null) {
            return StringPool.BLANK;
        } else {
            return _base;
        }
    }

    public void setBase(String base) {
        _base = base;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFResource.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFResource toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (LFResource) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LFResourceImpl lfResourceImpl = new LFResourceImpl();

        lfResourceImpl.setId(getId());
        lfResourceImpl.setPackageID(getPackageID());
        lfResourceImpl.setScormType(getScormType());
        lfResourceImpl.setResourceID(getResourceID());
        lfResourceImpl.setHref(getHref());
        lfResourceImpl.setBase(getBase());

        lfResourceImpl.resetOriginalValues();

        return lfResourceImpl;
    }

    public int compareTo(LFResource lfResource) {
        long primaryKey = lfResource.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        LFResource lfResource = null;

        try {
            lfResource = (LFResource) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = lfResource.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFResourceModelImpl lfResourceModelImpl = this;

        lfResourceModelImpl._originalPackageID = lfResourceModelImpl._packageID;

        lfResourceModelImpl._setOriginalPackageID = false;

        lfResourceModelImpl._originalResourceID = lfResourceModelImpl._resourceID;

        lfResourceModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFResource> toCacheModel() {
        LFResourceCacheModel lfResourceCacheModel = new LFResourceCacheModel();

        lfResourceCacheModel.id = getId();

        lfResourceCacheModel.packageID = getPackageID();

        lfResourceCacheModel.scormType = getScormType();

        String scormType = lfResourceCacheModel.scormType;

        if ((scormType != null) && (scormType.length() == 0)) {
            lfResourceCacheModel.scormType = null;
        }

        lfResourceCacheModel.resourceID = getResourceID();

        String resourceID = lfResourceCacheModel.resourceID;

        if ((resourceID != null) && (resourceID.length() == 0)) {
            lfResourceCacheModel.resourceID = null;
        }

        lfResourceCacheModel.href = getHref();

        String href = lfResourceCacheModel.href;

        if ((href != null) && (href.length() == 0)) {
            lfResourceCacheModel.href = null;
        }

        lfResourceCacheModel.base = getBase();

        String base = lfResourceCacheModel.base;

        if ((base != null) && (base.length() == 0)) {
            lfResourceCacheModel.base = null;
        }

        return lfResourceCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", packageID=");
        sb.append(getPackageID());
        sb.append(", scormType=");
        sb.append(getScormType());
        sb.append(", resourceID=");
        sb.append(getResourceID());
        sb.append(", href=");
        sb.append(getHref());
        sb.append(", base=");
        sb.append(getBase());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.arcusys.learn.persistence.liferay.model.LFResource");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageID</column-name><column-value><![CDATA[");
        sb.append(getPackageID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>scormType</column-name><column-value><![CDATA[");
        sb.append(getScormType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>resourceID</column-name><column-value><![CDATA[");
        sb.append(getResourceID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>href</column-name><column-value><![CDATA[");
        sb.append(getHref());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>base</column-name><column-value><![CDATA[");
        sb.append(getBase());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
