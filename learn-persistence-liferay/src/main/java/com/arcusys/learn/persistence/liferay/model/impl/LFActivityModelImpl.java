package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFActivity;
import com.arcusys.learn.persistence.liferay.model.LFActivityModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
* The base model implementation for the LFActivity service. Represents a row in the &quot;Learn_LFActivity&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFActivityImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFActivityImpl
* @see com.arcusys.learn.persistence.liferay.model.LFActivity
* @see com.arcusys.learn.persistence.liferay.model.LFActivityModel
* @generated
*/
public class LFActivityModelImpl extends BaseModelImpl<LFActivity>
    implements LFActivityModel {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this class directly. All methods that expect a l f activity model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFActivity} interface instead.
    */
    public static final String TABLE_NAME = "Learn_LFActivity";
    public static final Object[][] TABLE_COLUMNS = {
            { "indexNumber", Types.BIGINT },
            { "id_", Types.VARCHAR },
            { "packageID", Types.INTEGER },
            { "organizationID", Types.VARCHAR },
            { "parentID", Types.VARCHAR },
            { "title", Types.CLOB },
            { "identifierRef", Types.CLOB },
            { "resourceParameters", Types.CLOB },
            { "hideLMSUI", Types.CLOB },
            { "visible", Types.BOOLEAN },
            { "objectivesGlobalToSystem", Types.BOOLEAN },
            { "sharedDataGlobalToSystem", Types.BOOLEAN },
            { "masteryScore", Types.CLOB },
            { "maxTimeAllowed", Types.CLOB }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFActivity (indexNumber LONG not null primary key,id_ VARCHAR(512) null,packageID INTEGER,organizationID VARCHAR(512) null,parentID VARCHAR(512) null,title TEXT null,identifierRef TEXT null,resourceParameters TEXT null,hideLMSUI TEXT null,visible BOOLEAN,objectivesGlobalToSystem BOOLEAN,sharedDataGlobalToSystem BOOLEAN,masteryScore TEXT null,maxTimeAllowed TEXT null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFActivity";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFActivity"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFActivity"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFActivity"),
            true);
    public static long ID_COLUMN_BITMASK = 1L;
    public static long ORGANIZATIONID_COLUMN_BITMASK = 2L;
    public static long PACKAGEID_COLUMN_BITMASK = 4L;
    public static long PARENTID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFActivity"));
    private static ClassLoader _classLoader = LFActivity.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            LFActivity.class
        };
    private long _indexNumber;
    private String _id;
    private String _originalId;
    private Integer _packageID;
    private Integer _originalPackageID;
    private boolean _setOriginalPackageID;
    private String _organizationID;
    private String _originalOrganizationID;
    private String _parentID;
    private String _originalParentID;
    private String _title;
    private String _identifierRef;
    private String _resourceParameters;
    private String _hideLMSUI;
    private boolean _visible;
    private boolean _objectivesGlobalToSystem;
    private boolean _sharedDataGlobalToSystem;
    private String _masteryScore;
    private String _maxTimeAllowed;
    private long _columnBitmask;
    private LFActivity _escapedModelProxy;

    public LFActivityModelImpl() {
    }

    public long getPrimaryKey() {
        return _indexNumber;
    }

    public void setPrimaryKey(long primaryKey) {
        setIndexNumber(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_indexNumber);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return LFActivity.class;
    }

    public String getModelClassName() {
        return LFActivity.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("indexNumber", getIndexNumber());
        attributes.put("id", getId());
        attributes.put("packageID", getPackageID());
        attributes.put("organizationID", getOrganizationID());
        attributes.put("parentID", getParentID());
        attributes.put("title", getTitle());
        attributes.put("identifierRef", getIdentifierRef());
        attributes.put("resourceParameters", getResourceParameters());
        attributes.put("hideLMSUI", getHideLMSUI());
        attributes.put("visible", getVisible());
        attributes.put("objectivesGlobalToSystem", getObjectivesGlobalToSystem());
        attributes.put("sharedDataGlobalToSystem", getSharedDataGlobalToSystem());
        attributes.put("masteryScore", getMasteryScore());
        attributes.put("maxTimeAllowed", getMaxTimeAllowed());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long indexNumber = (Long) attributes.get("indexNumber");

        if (indexNumber != null) {
            setIndexNumber(indexNumber);
        }

        String id = (String) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer packageID = (Integer) attributes.get("packageID");

        if (packageID != null) {
            setPackageID(packageID);
        }

        String organizationID = (String) attributes.get("organizationID");

        if (organizationID != null) {
            setOrganizationID(organizationID);
        }

        String parentID = (String) attributes.get("parentID");

        if (parentID != null) {
            setParentID(parentID);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String identifierRef = (String) attributes.get("identifierRef");

        if (identifierRef != null) {
            setIdentifierRef(identifierRef);
        }

        String resourceParameters = (String) attributes.get(
                "resourceParameters");

        if (resourceParameters != null) {
            setResourceParameters(resourceParameters);
        }

        String hideLMSUI = (String) attributes.get("hideLMSUI");

        if (hideLMSUI != null) {
            setHideLMSUI(hideLMSUI);
        }

        Boolean visible = (Boolean) attributes.get("visible");

        if (visible != null) {
            setVisible(visible);
        }

        Boolean objectivesGlobalToSystem = (Boolean) attributes.get(
                "objectivesGlobalToSystem");

        if (objectivesGlobalToSystem != null) {
            setObjectivesGlobalToSystem(objectivesGlobalToSystem);
        }

        Boolean sharedDataGlobalToSystem = (Boolean) attributes.get(
                "sharedDataGlobalToSystem");

        if (sharedDataGlobalToSystem != null) {
            setSharedDataGlobalToSystem(sharedDataGlobalToSystem);
        }

        String masteryScore = (String) attributes.get("masteryScore");

        if (masteryScore != null) {
            setMasteryScore(masteryScore);
        }

        String maxTimeAllowed = (String) attributes.get("maxTimeAllowed");

        if (maxTimeAllowed != null) {
            setMaxTimeAllowed(maxTimeAllowed);
        }
    }

    public long getIndexNumber() {
        return _indexNumber;
    }

    public void setIndexNumber(long indexNumber) {
        _indexNumber = indexNumber;
    }

    public String getId() {
        if (_id == null) {
            return StringPool.BLANK;
        } else {
            return _id;
        }
    }

    public void setId(String id) {
        _columnBitmask |= ID_COLUMN_BITMASK;

        if (_originalId == null) {
            _originalId = _id;
        }

        _id = id;
    }

    public String getOriginalId() {
        return GetterUtil.getString(_originalId);
    }

    public Integer getPackageID() {
        return _packageID;
    }

    public void setPackageID(Integer packageID) {
        _columnBitmask |= PACKAGEID_COLUMN_BITMASK;

        if (!_setOriginalPackageID) {
            _setOriginalPackageID = true;

            _originalPackageID = _packageID;
        }

        _packageID = packageID;
    }

    public Integer getOriginalPackageID() {
        return _originalPackageID;
    }

    public String getOrganizationID() {
        if (_organizationID == null) {
            return StringPool.BLANK;
        } else {
            return _organizationID;
        }
    }

    public void setOrganizationID(String organizationID) {
        _columnBitmask |= ORGANIZATIONID_COLUMN_BITMASK;

        if (_originalOrganizationID == null) {
            _originalOrganizationID = _organizationID;
        }

        _organizationID = organizationID;
    }

    public String getOriginalOrganizationID() {
        return GetterUtil.getString(_originalOrganizationID);
    }

    public String getParentID() {
        return _parentID;
    }

    public void setParentID(String parentID) {
        _columnBitmask |= PARENTID_COLUMN_BITMASK;

        if (_originalParentID == null) {
            _originalParentID = _parentID;
        }

        _parentID = parentID;
    }

    public String getOriginalParentID() {
        return _originalParentID;
    }

    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    public void setTitle(String title) {
        _title = title;
    }

    public String getIdentifierRef() {
        if (_identifierRef == null) {
            return StringPool.BLANK;
        } else {
            return _identifierRef;
        }
    }

    public void setIdentifierRef(String identifierRef) {
        _identifierRef = identifierRef;
    }

    public String getResourceParameters() {
        return _resourceParameters;
    }

    public void setResourceParameters(String resourceParameters) {
        _resourceParameters = resourceParameters;
    }

    public String getHideLMSUI() {
        return _hideLMSUI;
    }

    public void setHideLMSUI(String hideLMSUI) {
        _hideLMSUI = hideLMSUI;
    }

    public boolean getVisible() {
        return _visible;
    }

    public boolean isVisible() {
        return _visible;
    }

    public void setVisible(boolean visible) {
        _visible = visible;
    }

    public boolean getObjectivesGlobalToSystem() {
        return _objectivesGlobalToSystem;
    }

    public boolean isObjectivesGlobalToSystem() {
        return _objectivesGlobalToSystem;
    }

    public void setObjectivesGlobalToSystem(boolean objectivesGlobalToSystem) {
        _objectivesGlobalToSystem = objectivesGlobalToSystem;
    }

    public boolean getSharedDataGlobalToSystem() {
        return _sharedDataGlobalToSystem;
    }

    public boolean isSharedDataGlobalToSystem() {
        return _sharedDataGlobalToSystem;
    }

    public void setSharedDataGlobalToSystem(boolean sharedDataGlobalToSystem) {
        _sharedDataGlobalToSystem = sharedDataGlobalToSystem;
    }

    public String getMasteryScore() {
        return _masteryScore;
    }

    public void setMasteryScore(String masteryScore) {
        _masteryScore = masteryScore;
    }

    public String getMaxTimeAllowed() {
        return _maxTimeAllowed;
    }

    public void setMaxTimeAllowed(String maxTimeAllowed) {
        _maxTimeAllowed = maxTimeAllowed;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFActivity.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFActivity toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (LFActivity) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LFActivityImpl lfActivityImpl = new LFActivityImpl();

        lfActivityImpl.setIndexNumber(getIndexNumber());
        lfActivityImpl.setId(getId());
        lfActivityImpl.setPackageID(getPackageID());
        lfActivityImpl.setOrganizationID(getOrganizationID());
        lfActivityImpl.setParentID(getParentID());
        lfActivityImpl.setTitle(getTitle());
        lfActivityImpl.setIdentifierRef(getIdentifierRef());
        lfActivityImpl.setResourceParameters(getResourceParameters());
        lfActivityImpl.setHideLMSUI(getHideLMSUI());
        lfActivityImpl.setVisible(getVisible());
        lfActivityImpl.setObjectivesGlobalToSystem(getObjectivesGlobalToSystem());
        lfActivityImpl.setSharedDataGlobalToSystem(getSharedDataGlobalToSystem());
        lfActivityImpl.setMasteryScore(getMasteryScore());
        lfActivityImpl.setMaxTimeAllowed(getMaxTimeAllowed());

        lfActivityImpl.resetOriginalValues();

        return lfActivityImpl;
    }

    public int compareTo(LFActivity lfActivity) {
        long primaryKey = lfActivity.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        LFActivity lfActivity = null;

        try {
            lfActivity = (LFActivity) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = lfActivity.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFActivityModelImpl lfActivityModelImpl = this;

        lfActivityModelImpl._originalId = lfActivityModelImpl._id;

        lfActivityModelImpl._originalPackageID = lfActivityModelImpl._packageID;

        lfActivityModelImpl._setOriginalPackageID = false;

        lfActivityModelImpl._originalOrganizationID = lfActivityModelImpl._organizationID;

        lfActivityModelImpl._originalParentID = lfActivityModelImpl._parentID;

        lfActivityModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFActivity> toCacheModel() {
        LFActivityCacheModel lfActivityCacheModel = new LFActivityCacheModel();

        lfActivityCacheModel.indexNumber = getIndexNumber();

        lfActivityCacheModel.id = getId();

        String id = lfActivityCacheModel.id;

        if ((id != null) && (id.length() == 0)) {
            lfActivityCacheModel.id = null;
        }

        lfActivityCacheModel.packageID = getPackageID();

        lfActivityCacheModel.organizationID = getOrganizationID();

        String organizationID = lfActivityCacheModel.organizationID;

        if ((organizationID != null) && (organizationID.length() == 0)) {
            lfActivityCacheModel.organizationID = null;
        }

        lfActivityCacheModel.parentID = getParentID();

        String parentID = lfActivityCacheModel.parentID;

        if ((parentID != null) && (parentID.length() == 0)) {
            lfActivityCacheModel.parentID = null;
        }

        lfActivityCacheModel.title = getTitle();

        String title = lfActivityCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            lfActivityCacheModel.title = null;
        }

        lfActivityCacheModel.identifierRef = getIdentifierRef();

        String identifierRef = lfActivityCacheModel.identifierRef;

        if ((identifierRef != null) && (identifierRef.length() == 0)) {
            lfActivityCacheModel.identifierRef = null;
        }

        lfActivityCacheModel.resourceParameters = getResourceParameters();

        String resourceParameters = lfActivityCacheModel.resourceParameters;

        if ((resourceParameters != null) && (resourceParameters.length() == 0)) {
            lfActivityCacheModel.resourceParameters = null;
        }

        lfActivityCacheModel.hideLMSUI = getHideLMSUI();

        String hideLMSUI = lfActivityCacheModel.hideLMSUI;

        if ((hideLMSUI != null) && (hideLMSUI.length() == 0)) {
            lfActivityCacheModel.hideLMSUI = null;
        }

        lfActivityCacheModel.visible = getVisible();

        lfActivityCacheModel.objectivesGlobalToSystem = getObjectivesGlobalToSystem();

        lfActivityCacheModel.sharedDataGlobalToSystem = getSharedDataGlobalToSystem();

        lfActivityCacheModel.masteryScore = getMasteryScore();

        String masteryScore = lfActivityCacheModel.masteryScore;

        if ((masteryScore != null) && (masteryScore.length() == 0)) {
            lfActivityCacheModel.masteryScore = null;
        }

        lfActivityCacheModel.maxTimeAllowed = getMaxTimeAllowed();

        String maxTimeAllowed = lfActivityCacheModel.maxTimeAllowed;

        if ((maxTimeAllowed != null) && (maxTimeAllowed.length() == 0)) {
            lfActivityCacheModel.maxTimeAllowed = null;
        }

        return lfActivityCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(29);

        sb.append("{indexNumber=");
        sb.append(getIndexNumber());
        sb.append(", id=");
        sb.append(getId());
        sb.append(", packageID=");
        sb.append(getPackageID());
        sb.append(", organizationID=");
        sb.append(getOrganizationID());
        sb.append(", parentID=");
        sb.append(getParentID());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", identifierRef=");
        sb.append(getIdentifierRef());
        sb.append(", resourceParameters=");
        sb.append(getResourceParameters());
        sb.append(", hideLMSUI=");
        sb.append(getHideLMSUI());
        sb.append(", visible=");
        sb.append(getVisible());
        sb.append(", objectivesGlobalToSystem=");
        sb.append(getObjectivesGlobalToSystem());
        sb.append(", sharedDataGlobalToSystem=");
        sb.append(getSharedDataGlobalToSystem());
        sb.append(", masteryScore=");
        sb.append(getMasteryScore());
        sb.append(", maxTimeAllowed=");
        sb.append(getMaxTimeAllowed());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(46);

        sb.append("<model><model-name>");
        sb.append("com.arcusys.learn.persistence.liferay.model.LFActivity");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>indexNumber</column-name><column-value><![CDATA[");
        sb.append(getIndexNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageID</column-name><column-value><![CDATA[");
        sb.append(getPackageID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationID</column-name><column-value><![CDATA[");
        sb.append(getOrganizationID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentID</column-name><column-value><![CDATA[");
        sb.append(getParentID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>identifierRef</column-name><column-value><![CDATA[");
        sb.append(getIdentifierRef());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>resourceParameters</column-name><column-value><![CDATA[");
        sb.append(getResourceParameters());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hideLMSUI</column-name><column-value><![CDATA[");
        sb.append(getHideLMSUI());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>visible</column-name><column-value><![CDATA[");
        sb.append(getVisible());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>objectivesGlobalToSystem</column-name><column-value><![CDATA[");
        sb.append(getObjectivesGlobalToSystem());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sharedDataGlobalToSystem</column-name><column-value><![CDATA[");
        sb.append(getSharedDataGlobalToSystem());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>masteryScore</column-name><column-value><![CDATA[");
        sb.append(getMasteryScore());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>maxTimeAllowed</column-name><column-value><![CDATA[");
        sb.append(getMaxTimeAllowed());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
