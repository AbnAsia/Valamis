package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFTincanLrsResult;
import com.arcusys.learn.persistence.liferay.model.LFTincanLrsResultModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
* The base model implementation for the LFTincanLrsResult service. Represents a row in the &quot;Learn_LFTincanLrsResult&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFTincanLrsResultModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFTincanLrsResultImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFTincanLrsResultImpl
* @see com.arcusys.learn.persistence.liferay.model.LFTincanLrsResult
* @see com.arcusys.learn.persistence.liferay.model.LFTincanLrsResultModel
* @generated
*/
public class LFTincanLrsResultModelImpl extends BaseModelImpl<LFTincanLrsResult>
    implements LFTincanLrsResultModel {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this class directly. All methods that expect a l f tincan lrs result model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFTincanLrsResult} interface instead.
    */
    public static final String TABLE_NAME = "Learn_LFTincanLrsResult";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "score", Types.CLOB },
            { "success", Types.BOOLEAN },
            { "completion", Types.BOOLEAN },
            { "response", Types.CLOB },
            { "duration", Types.DOUBLE },
            { "extension", Types.CLOB }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFTincanLrsResult (id_ LONG not null primary key,score TEXT null,success BOOLEAN null,completion BOOLEAN null,response TEXT null,duration DOUBLE null,extension TEXT null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFTincanLrsResult";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsResult"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsResult"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFTincanLrsResult"));
    private static ClassLoader _classLoader = LFTincanLrsResult.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            LFTincanLrsResult.class
        };
    private long _id;
    private String _score;
    private Boolean _success;
    private Boolean _completion;
    private String _response;
    private Double _duration;
    private String _extension;
    private LFTincanLrsResult _escapedModelProxy;

    public LFTincanLrsResultModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return LFTincanLrsResult.class;
    }

    public String getModelClassName() {
        return LFTincanLrsResult.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("score", getScore());
        attributes.put("success", getSuccess());
        attributes.put("completion", getCompletion());
        attributes.put("response", getResponse());
        attributes.put("duration", getDuration());
        attributes.put("extension", getExtension());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String score = (String) attributes.get("score");

        if (score != null) {
            setScore(score);
        }

        Boolean success = (Boolean) attributes.get("success");

        if (success != null) {
            setSuccess(success);
        }

        Boolean completion = (Boolean) attributes.get("completion");

        if (completion != null) {
            setCompletion(completion);
        }

        String response = (String) attributes.get("response");

        if (response != null) {
            setResponse(response);
        }

        Double duration = (Double) attributes.get("duration");

        if (duration != null) {
            setDuration(duration);
        }

        String extension = (String) attributes.get("extension");

        if (extension != null) {
            setExtension(extension);
        }
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public String getScore() {
        return _score;
    }

    public void setScore(String score) {
        _score = score;
    }

    public Boolean getSuccess() {
        return _success;
    }

    public void setSuccess(Boolean success) {
        _success = success;
    }

    public Boolean getCompletion() {
        return _completion;
    }

    public void setCompletion(Boolean completion) {
        _completion = completion;
    }

    public String getResponse() {
        return _response;
    }

    public void setResponse(String response) {
        _response = response;
    }

    public Double getDuration() {
        return _duration;
    }

    public void setDuration(Double duration) {
        _duration = duration;
    }

    public String getExtension() {
        return _extension;
    }

    public void setExtension(String extension) {
        _extension = extension;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFTincanLrsResult.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFTincanLrsResult toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (LFTincanLrsResult) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LFTincanLrsResultImpl lfTincanLrsResultImpl = new LFTincanLrsResultImpl();

        lfTincanLrsResultImpl.setId(getId());
        lfTincanLrsResultImpl.setScore(getScore());
        lfTincanLrsResultImpl.setSuccess(getSuccess());
        lfTincanLrsResultImpl.setCompletion(getCompletion());
        lfTincanLrsResultImpl.setResponse(getResponse());
        lfTincanLrsResultImpl.setDuration(getDuration());
        lfTincanLrsResultImpl.setExtension(getExtension());

        lfTincanLrsResultImpl.resetOriginalValues();

        return lfTincanLrsResultImpl;
    }

    public int compareTo(LFTincanLrsResult lfTincanLrsResult) {
        long primaryKey = lfTincanLrsResult.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        LFTincanLrsResult lfTincanLrsResult = null;

        try {
            lfTincanLrsResult = (LFTincanLrsResult) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = lfTincanLrsResult.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<LFTincanLrsResult> toCacheModel() {
        LFTincanLrsResultCacheModel lfTincanLrsResultCacheModel = new LFTincanLrsResultCacheModel();

        lfTincanLrsResultCacheModel.id = getId();

        lfTincanLrsResultCacheModel.score = getScore();

        String score = lfTincanLrsResultCacheModel.score;

        if ((score != null) && (score.length() == 0)) {
            lfTincanLrsResultCacheModel.score = null;
        }

        lfTincanLrsResultCacheModel.success = getSuccess();

        lfTincanLrsResultCacheModel.completion = getCompletion();

        lfTincanLrsResultCacheModel.response = getResponse();

        String response = lfTincanLrsResultCacheModel.response;

        if ((response != null) && (response.length() == 0)) {
            lfTincanLrsResultCacheModel.response = null;
        }

        lfTincanLrsResultCacheModel.duration = getDuration();

        lfTincanLrsResultCacheModel.extension = getExtension();

        String extension = lfTincanLrsResultCacheModel.extension;

        if ((extension != null) && (extension.length() == 0)) {
            lfTincanLrsResultCacheModel.extension = null;
        }

        return lfTincanLrsResultCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", score=");
        sb.append(getScore());
        sb.append(", success=");
        sb.append(getSuccess());
        sb.append(", completion=");
        sb.append(getCompletion());
        sb.append(", response=");
        sb.append(getResponse());
        sb.append(", duration=");
        sb.append(getDuration());
        sb.append(", extension=");
        sb.append(getExtension());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFTincanLrsResult");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>score</column-name><column-value><![CDATA[");
        sb.append(getScore());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>success</column-name><column-value><![CDATA[");
        sb.append(getSuccess());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>completion</column-name><column-value><![CDATA[");
        sb.append(getCompletion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>response</column-name><column-value><![CDATA[");
        sb.append(getResponse());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>duration</column-name><column-value><![CDATA[");
        sb.append(getDuration());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>extension</column-name><column-value><![CDATA[");
        sb.append(getExtension());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
