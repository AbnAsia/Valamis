package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFTincanLrsStatement;
import com.arcusys.learn.persistence.liferay.model.LFTincanLrsStatementModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
* The base model implementation for the LFTincanLrsStatement service. Represents a row in the &quot;Learn_LFTincanLrsStatement&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFTincanLrsStatementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFTincanLrsStatementImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFTincanLrsStatementImpl
* @see com.arcusys.learn.persistence.liferay.model.LFTincanLrsStatement
* @see com.arcusys.learn.persistence.liferay.model.LFTincanLrsStatementModel
* @generated
*/
public class LFTincanLrsStatementModelImpl extends BaseModelImpl<LFTincanLrsStatement>
    implements LFTincanLrsStatementModel {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this class directly. All methods that expect a l f tincan lrs statement model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFTincanLrsStatement} interface instead.
    */
    public static final String TABLE_NAME = "Learn_LFTincanLrsStatement";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "tincanID", Types.VARCHAR },
            { "actorID", Types.INTEGER },
            { "verbID", Types.VARCHAR },
            { "verbDisplay", Types.CLOB },
            { "objType", Types.VARCHAR },
            { "objID", Types.INTEGER },
            { "resultID", Types.INTEGER },
            { "contextID", Types.INTEGER },
            { "timestamp", Types.TIMESTAMP },
            { "stored", Types.TIMESTAMP },
            { "authorityID", Types.INTEGER },
            { "version", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFTincanLrsStatement (id_ LONG not null primary key,tincanID VARCHAR(75) null,actorID INTEGER null,verbID VARCHAR(2000) null,verbDisplay TEXT null,objType VARCHAR(2000) null,objID INTEGER null,resultID INTEGER null,contextID INTEGER null,timestamp DATE null,stored DATE null,authorityID INTEGER null,version VARCHAR(2000) null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFTincanLrsStatement";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsStatement"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsStatement"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsStatement"),
            true);
    public static long ACTORID_COLUMN_BITMASK = 1L;
    public static long OBJID_COLUMN_BITMASK = 2L;
    public static long OBJTYPE_COLUMN_BITMASK = 4L;
    public static long TINCANID_COLUMN_BITMASK = 8L;
    public static long VERBID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFTincanLrsStatement"));
    private static ClassLoader _classLoader = LFTincanLrsStatement.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            LFTincanLrsStatement.class
        };
    private long _id;
    private String _tincanID;
    private String _originalTincanID;
    private Integer _actorID;
    private Integer _originalActorID;
    private boolean _setOriginalActorID;
    private String _verbID;
    private String _originalVerbID;
    private String _verbDisplay;
    private String _objType;
    private String _originalObjType;
    private Integer _objID;
    private Integer _originalObjID;
    private boolean _setOriginalObjID;
    private Integer _resultID;
    private Integer _contextID;
    private Date _timestamp;
    private Date _stored;
    private Integer _authorityID;
    private String _version;
    private long _columnBitmask;
    private LFTincanLrsStatement _escapedModelProxy;

    public LFTincanLrsStatementModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return LFTincanLrsStatement.class;
    }

    public String getModelClassName() {
        return LFTincanLrsStatement.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("tincanID", getTincanID());
        attributes.put("actorID", getActorID());
        attributes.put("verbID", getVerbID());
        attributes.put("verbDisplay", getVerbDisplay());
        attributes.put("objType", getObjType());
        attributes.put("objID", getObjID());
        attributes.put("resultID", getResultID());
        attributes.put("contextID", getContextID());
        attributes.put("timestamp", getTimestamp());
        attributes.put("stored", getStored());
        attributes.put("authorityID", getAuthorityID());
        attributes.put("version", getVersion());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String tincanID = (String) attributes.get("tincanID");

        if (tincanID != null) {
            setTincanID(tincanID);
        }

        Integer actorID = (Integer) attributes.get("actorID");

        if (actorID != null) {
            setActorID(actorID);
        }

        String verbID = (String) attributes.get("verbID");

        if (verbID != null) {
            setVerbID(verbID);
        }

        String verbDisplay = (String) attributes.get("verbDisplay");

        if (verbDisplay != null) {
            setVerbDisplay(verbDisplay);
        }

        String objType = (String) attributes.get("objType");

        if (objType != null) {
            setObjType(objType);
        }

        Integer objID = (Integer) attributes.get("objID");

        if (objID != null) {
            setObjID(objID);
        }

        Integer resultID = (Integer) attributes.get("resultID");

        if (resultID != null) {
            setResultID(resultID);
        }

        Integer contextID = (Integer) attributes.get("contextID");

        if (contextID != null) {
            setContextID(contextID);
        }

        Date timestamp = (Date) attributes.get("timestamp");

        if (timestamp != null) {
            setTimestamp(timestamp);
        }

        Date stored = (Date) attributes.get("stored");

        if (stored != null) {
            setStored(stored);
        }

        Integer authorityID = (Integer) attributes.get("authorityID");

        if (authorityID != null) {
            setAuthorityID(authorityID);
        }

        String version = (String) attributes.get("version");

        if (version != null) {
            setVersion(version);
        }
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public String getTincanID() {
        return _tincanID;
    }

    public void setTincanID(String tincanID) {
        _columnBitmask |= TINCANID_COLUMN_BITMASK;

        if (_originalTincanID == null) {
            _originalTincanID = _tincanID;
        }

        _tincanID = tincanID;
    }

    public String getOriginalTincanID() {
        return _originalTincanID;
    }

    public Integer getActorID() {
        return _actorID;
    }

    public void setActorID(Integer actorID) {
        _columnBitmask |= ACTORID_COLUMN_BITMASK;

        if (!_setOriginalActorID) {
            _setOriginalActorID = true;

            _originalActorID = _actorID;
        }

        _actorID = actorID;
    }

    public Integer getOriginalActorID() {
        return _originalActorID;
    }

    public String getVerbID() {
        return _verbID;
    }

    public void setVerbID(String verbID) {
        _columnBitmask |= VERBID_COLUMN_BITMASK;

        if (_originalVerbID == null) {
            _originalVerbID = _verbID;
        }

        _verbID = verbID;
    }

    public String getOriginalVerbID() {
        return _originalVerbID;
    }

    public String getVerbDisplay() {
        return _verbDisplay;
    }

    public void setVerbDisplay(String verbDisplay) {
        _verbDisplay = verbDisplay;
    }

    public String getObjType() {
        return _objType;
    }

    public void setObjType(String objType) {
        _columnBitmask |= OBJTYPE_COLUMN_BITMASK;

        if (_originalObjType == null) {
            _originalObjType = _objType;
        }

        _objType = objType;
    }

    public String getOriginalObjType() {
        return _originalObjType;
    }

    public Integer getObjID() {
        return _objID;
    }

    public void setObjID(Integer objID) {
        _columnBitmask |= OBJID_COLUMN_BITMASK;

        if (!_setOriginalObjID) {
            _setOriginalObjID = true;

            _originalObjID = _objID;
        }

        _objID = objID;
    }

    public Integer getOriginalObjID() {
        return _originalObjID;
    }

    public Integer getResultID() {
        return _resultID;
    }

    public void setResultID(Integer resultID) {
        _resultID = resultID;
    }

    public Integer getContextID() {
        return _contextID;
    }

    public void setContextID(Integer contextID) {
        _contextID = contextID;
    }

    public Date getTimestamp() {
        return _timestamp;
    }

    public void setTimestamp(Date timestamp) {
        _timestamp = timestamp;
    }

    public Date getStored() {
        return _stored;
    }

    public void setStored(Date stored) {
        _stored = stored;
    }

    public Integer getAuthorityID() {
        return _authorityID;
    }

    public void setAuthorityID(Integer authorityID) {
        _authorityID = authorityID;
    }

    public String getVersion() {
        return _version;
    }

    public void setVersion(String version) {
        _version = version;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFTincanLrsStatement.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFTincanLrsStatement toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (LFTincanLrsStatement) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LFTincanLrsStatementImpl lfTincanLrsStatementImpl = new LFTincanLrsStatementImpl();

        lfTincanLrsStatementImpl.setId(getId());
        lfTincanLrsStatementImpl.setTincanID(getTincanID());
        lfTincanLrsStatementImpl.setActorID(getActorID());
        lfTincanLrsStatementImpl.setVerbID(getVerbID());
        lfTincanLrsStatementImpl.setVerbDisplay(getVerbDisplay());
        lfTincanLrsStatementImpl.setObjType(getObjType());
        lfTincanLrsStatementImpl.setObjID(getObjID());
        lfTincanLrsStatementImpl.setResultID(getResultID());
        lfTincanLrsStatementImpl.setContextID(getContextID());
        lfTincanLrsStatementImpl.setTimestamp(getTimestamp());
        lfTincanLrsStatementImpl.setStored(getStored());
        lfTincanLrsStatementImpl.setAuthorityID(getAuthorityID());
        lfTincanLrsStatementImpl.setVersion(getVersion());

        lfTincanLrsStatementImpl.resetOriginalValues();

        return lfTincanLrsStatementImpl;
    }

    public int compareTo(LFTincanLrsStatement lfTincanLrsStatement) {
        long primaryKey = lfTincanLrsStatement.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        LFTincanLrsStatement lfTincanLrsStatement = null;

        try {
            lfTincanLrsStatement = (LFTincanLrsStatement) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = lfTincanLrsStatement.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFTincanLrsStatementModelImpl lfTincanLrsStatementModelImpl = this;

        lfTincanLrsStatementModelImpl._originalTincanID = lfTincanLrsStatementModelImpl._tincanID;

        lfTincanLrsStatementModelImpl._originalActorID = lfTincanLrsStatementModelImpl._actorID;

        lfTincanLrsStatementModelImpl._setOriginalActorID = false;

        lfTincanLrsStatementModelImpl._originalVerbID = lfTincanLrsStatementModelImpl._verbID;

        lfTincanLrsStatementModelImpl._originalObjType = lfTincanLrsStatementModelImpl._objType;

        lfTincanLrsStatementModelImpl._originalObjID = lfTincanLrsStatementModelImpl._objID;

        lfTincanLrsStatementModelImpl._setOriginalObjID = false;

        lfTincanLrsStatementModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFTincanLrsStatement> toCacheModel() {
        LFTincanLrsStatementCacheModel lfTincanLrsStatementCacheModel = new LFTincanLrsStatementCacheModel();

        lfTincanLrsStatementCacheModel.id = getId();

        lfTincanLrsStatementCacheModel.tincanID = getTincanID();

        String tincanID = lfTincanLrsStatementCacheModel.tincanID;

        if ((tincanID != null) && (tincanID.length() == 0)) {
            lfTincanLrsStatementCacheModel.tincanID = null;
        }

        lfTincanLrsStatementCacheModel.actorID = getActorID();

        lfTincanLrsStatementCacheModel.verbID = getVerbID();

        String verbID = lfTincanLrsStatementCacheModel.verbID;

        if ((verbID != null) && (verbID.length() == 0)) {
            lfTincanLrsStatementCacheModel.verbID = null;
        }

        lfTincanLrsStatementCacheModel.verbDisplay = getVerbDisplay();

        String verbDisplay = lfTincanLrsStatementCacheModel.verbDisplay;

        if ((verbDisplay != null) && (verbDisplay.length() == 0)) {
            lfTincanLrsStatementCacheModel.verbDisplay = null;
        }

        lfTincanLrsStatementCacheModel.objType = getObjType();

        String objType = lfTincanLrsStatementCacheModel.objType;

        if ((objType != null) && (objType.length() == 0)) {
            lfTincanLrsStatementCacheModel.objType = null;
        }

        lfTincanLrsStatementCacheModel.objID = getObjID();

        lfTincanLrsStatementCacheModel.resultID = getResultID();

        lfTincanLrsStatementCacheModel.contextID = getContextID();

        Date timestamp = getTimestamp();

        if (timestamp != null) {
            lfTincanLrsStatementCacheModel.timestamp = timestamp.getTime();
        } else {
            lfTincanLrsStatementCacheModel.timestamp = Long.MIN_VALUE;
        }

        Date stored = getStored();

        if (stored != null) {
            lfTincanLrsStatementCacheModel.stored = stored.getTime();
        } else {
            lfTincanLrsStatementCacheModel.stored = Long.MIN_VALUE;
        }

        lfTincanLrsStatementCacheModel.authorityID = getAuthorityID();

        lfTincanLrsStatementCacheModel.version = getVersion();

        String version = lfTincanLrsStatementCacheModel.version;

        if ((version != null) && (version.length() == 0)) {
            lfTincanLrsStatementCacheModel.version = null;
        }

        return lfTincanLrsStatementCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", tincanID=");
        sb.append(getTincanID());
        sb.append(", actorID=");
        sb.append(getActorID());
        sb.append(", verbID=");
        sb.append(getVerbID());
        sb.append(", verbDisplay=");
        sb.append(getVerbDisplay());
        sb.append(", objType=");
        sb.append(getObjType());
        sb.append(", objID=");
        sb.append(getObjID());
        sb.append(", resultID=");
        sb.append(getResultID());
        sb.append(", contextID=");
        sb.append(getContextID());
        sb.append(", timestamp=");
        sb.append(getTimestamp());
        sb.append(", stored=");
        sb.append(getStored());
        sb.append(", authorityID=");
        sb.append(getAuthorityID());
        sb.append(", version=");
        sb.append(getVersion());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFTincanLrsStatement");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tincanID</column-name><column-value><![CDATA[");
        sb.append(getTincanID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>actorID</column-name><column-value><![CDATA[");
        sb.append(getActorID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>verbID</column-name><column-value><![CDATA[");
        sb.append(getVerbID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>verbDisplay</column-name><column-value><![CDATA[");
        sb.append(getVerbDisplay());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>objType</column-name><column-value><![CDATA[");
        sb.append(getObjType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>objID</column-name><column-value><![CDATA[");
        sb.append(getObjID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>resultID</column-name><column-value><![CDATA[");
        sb.append(getResultID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contextID</column-name><column-value><![CDATA[");
        sb.append(getContextID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>timestamp</column-name><column-value><![CDATA[");
        sb.append(getTimestamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stored</column-name><column-value><![CDATA[");
        sb.append(getStored());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorityID</column-name><column-value><![CDATA[");
        sb.append(getAuthorityID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>version</column-name><column-value><![CDATA[");
        sb.append(getVersion());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
