package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFObjectiveMap;
import com.arcusys.learn.persistence.liferay.model.LFObjectiveMapModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
* The base model implementation for the LFObjectiveMap service. Represents a row in the &quot;Learn_LFObjectiveMap&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFObjectiveMapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFObjectiveMapImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFObjectiveMapImpl
* @see com.arcusys.learn.persistence.liferay.model.LFObjectiveMap
* @see com.arcusys.learn.persistence.liferay.model.LFObjectiveMapModel
* @generated
*/
public class LFObjectiveMapModelImpl extends BaseModelImpl<LFObjectiveMap>
    implements LFObjectiveMapModel {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this class directly. All methods that expect a l f objective map model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFObjectiveMap} interface instead.
    */
    public static final String TABLE_NAME = "Learn_LFObjectiveMap";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "objectiveID", Types.INTEGER },
            { "readSatisfiedStatusFrom", Types.CLOB },
            { "readNormalizedMeasureFrom", Types.CLOB },
            { "writeSatisfiedStatusTo", Types.CLOB },
            { "writeNormalizedMeasureTo", Types.CLOB },
            { "readRawScoreFrom", Types.CLOB },
            { "readMinScoreFrom", Types.CLOB },
            { "readMaxScoreFrom", Types.CLOB },
            { "readCompletionStatusFrom", Types.CLOB },
            { "readProgressMeasureFrom", Types.CLOB },
            { "writeRawScoreTo", Types.CLOB },
            { "writeMinScoreTo", Types.CLOB },
            { "writeMaxScoreTo", Types.CLOB },
            { "writeCompletionStatusTo", Types.CLOB },
            { "writeProgressMeasureTo", Types.CLOB }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFObjectiveMap (id_ LONG not null primary key,objectiveID INTEGER,readSatisfiedStatusFrom TEXT null,readNormalizedMeasureFrom TEXT null,writeSatisfiedStatusTo TEXT null,writeNormalizedMeasureTo TEXT null,readRawScoreFrom TEXT null,readMinScoreFrom TEXT null,readMaxScoreFrom TEXT null,readCompletionStatusFrom TEXT null,readProgressMeasureFrom TEXT null,writeRawScoreTo TEXT null,writeMinScoreTo TEXT null,writeMaxScoreTo TEXT null,writeCompletionStatusTo TEXT null,writeProgressMeasureTo TEXT null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFObjectiveMap";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFObjectiveMap"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFObjectiveMap"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFObjectiveMap"),
            true);
    public static long OBJECTIVEID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFObjectiveMap"));
    private static ClassLoader _classLoader = LFObjectiveMap.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            LFObjectiveMap.class
        };
    private long _id;
    private Integer _objectiveID;
    private Integer _originalObjectiveID;
    private boolean _setOriginalObjectiveID;
    private String _readSatisfiedStatusFrom;
    private String _readNormalizedMeasureFrom;
    private String _writeSatisfiedStatusTo;
    private String _writeNormalizedMeasureTo;
    private String _readRawScoreFrom;
    private String _readMinScoreFrom;
    private String _readMaxScoreFrom;
    private String _readCompletionStatusFrom;
    private String _readProgressMeasureFrom;
    private String _writeRawScoreTo;
    private String _writeMinScoreTo;
    private String _writeMaxScoreTo;
    private String _writeCompletionStatusTo;
    private String _writeProgressMeasureTo;
    private long _columnBitmask;
    private LFObjectiveMap _escapedModelProxy;

    public LFObjectiveMapModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return LFObjectiveMap.class;
    }

    public String getModelClassName() {
        return LFObjectiveMap.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("objectiveID", getObjectiveID());
        attributes.put("readSatisfiedStatusFrom", getReadSatisfiedStatusFrom());
        attributes.put("readNormalizedMeasureFrom",
            getReadNormalizedMeasureFrom());
        attributes.put("writeSatisfiedStatusTo", getWriteSatisfiedStatusTo());
        attributes.put("writeNormalizedMeasureTo", getWriteNormalizedMeasureTo());
        attributes.put("readRawScoreFrom", getReadRawScoreFrom());
        attributes.put("readMinScoreFrom", getReadMinScoreFrom());
        attributes.put("readMaxScoreFrom", getReadMaxScoreFrom());
        attributes.put("readCompletionStatusFrom", getReadCompletionStatusFrom());
        attributes.put("readProgressMeasureFrom", getReadProgressMeasureFrom());
        attributes.put("writeRawScoreTo", getWriteRawScoreTo());
        attributes.put("writeMinScoreTo", getWriteMinScoreTo());
        attributes.put("writeMaxScoreTo", getWriteMaxScoreTo());
        attributes.put("writeCompletionStatusTo", getWriteCompletionStatusTo());
        attributes.put("writeProgressMeasureTo", getWriteProgressMeasureTo());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer objectiveID = (Integer) attributes.get("objectiveID");

        if (objectiveID != null) {
            setObjectiveID(objectiveID);
        }

        String readSatisfiedStatusFrom = (String) attributes.get(
                "readSatisfiedStatusFrom");

        if (readSatisfiedStatusFrom != null) {
            setReadSatisfiedStatusFrom(readSatisfiedStatusFrom);
        }

        String readNormalizedMeasureFrom = (String) attributes.get(
                "readNormalizedMeasureFrom");

        if (readNormalizedMeasureFrom != null) {
            setReadNormalizedMeasureFrom(readNormalizedMeasureFrom);
        }

        String writeSatisfiedStatusTo = (String) attributes.get(
                "writeSatisfiedStatusTo");

        if (writeSatisfiedStatusTo != null) {
            setWriteSatisfiedStatusTo(writeSatisfiedStatusTo);
        }

        String writeNormalizedMeasureTo = (String) attributes.get(
                "writeNormalizedMeasureTo");

        if (writeNormalizedMeasureTo != null) {
            setWriteNormalizedMeasureTo(writeNormalizedMeasureTo);
        }

        String readRawScoreFrom = (String) attributes.get("readRawScoreFrom");

        if (readRawScoreFrom != null) {
            setReadRawScoreFrom(readRawScoreFrom);
        }

        String readMinScoreFrom = (String) attributes.get("readMinScoreFrom");

        if (readMinScoreFrom != null) {
            setReadMinScoreFrom(readMinScoreFrom);
        }

        String readMaxScoreFrom = (String) attributes.get("readMaxScoreFrom");

        if (readMaxScoreFrom != null) {
            setReadMaxScoreFrom(readMaxScoreFrom);
        }

        String readCompletionStatusFrom = (String) attributes.get(
                "readCompletionStatusFrom");

        if (readCompletionStatusFrom != null) {
            setReadCompletionStatusFrom(readCompletionStatusFrom);
        }

        String readProgressMeasureFrom = (String) attributes.get(
                "readProgressMeasureFrom");

        if (readProgressMeasureFrom != null) {
            setReadProgressMeasureFrom(readProgressMeasureFrom);
        }

        String writeRawScoreTo = (String) attributes.get("writeRawScoreTo");

        if (writeRawScoreTo != null) {
            setWriteRawScoreTo(writeRawScoreTo);
        }

        String writeMinScoreTo = (String) attributes.get("writeMinScoreTo");

        if (writeMinScoreTo != null) {
            setWriteMinScoreTo(writeMinScoreTo);
        }

        String writeMaxScoreTo = (String) attributes.get("writeMaxScoreTo");

        if (writeMaxScoreTo != null) {
            setWriteMaxScoreTo(writeMaxScoreTo);
        }

        String writeCompletionStatusTo = (String) attributes.get(
                "writeCompletionStatusTo");

        if (writeCompletionStatusTo != null) {
            setWriteCompletionStatusTo(writeCompletionStatusTo);
        }

        String writeProgressMeasureTo = (String) attributes.get(
                "writeProgressMeasureTo");

        if (writeProgressMeasureTo != null) {
            setWriteProgressMeasureTo(writeProgressMeasureTo);
        }
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public Integer getObjectiveID() {
        return _objectiveID;
    }

    public void setObjectiveID(Integer objectiveID) {
        _columnBitmask |= OBJECTIVEID_COLUMN_BITMASK;

        if (!_setOriginalObjectiveID) {
            _setOriginalObjectiveID = true;

            _originalObjectiveID = _objectiveID;
        }

        _objectiveID = objectiveID;
    }

    public Integer getOriginalObjectiveID() {
        return _originalObjectiveID;
    }

    public String getReadSatisfiedStatusFrom() {
        if (_readSatisfiedStatusFrom == null) {
            return StringPool.BLANK;
        } else {
            return _readSatisfiedStatusFrom;
        }
    }

    public void setReadSatisfiedStatusFrom(String readSatisfiedStatusFrom) {
        _readSatisfiedStatusFrom = readSatisfiedStatusFrom;
    }

    public String getReadNormalizedMeasureFrom() {
        if (_readNormalizedMeasureFrom == null) {
            return StringPool.BLANK;
        } else {
            return _readNormalizedMeasureFrom;
        }
    }

    public void setReadNormalizedMeasureFrom(String readNormalizedMeasureFrom) {
        _readNormalizedMeasureFrom = readNormalizedMeasureFrom;
    }

    public String getWriteSatisfiedStatusTo() {
        if (_writeSatisfiedStatusTo == null) {
            return StringPool.BLANK;
        } else {
            return _writeSatisfiedStatusTo;
        }
    }

    public void setWriteSatisfiedStatusTo(String writeSatisfiedStatusTo) {
        _writeSatisfiedStatusTo = writeSatisfiedStatusTo;
    }

    public String getWriteNormalizedMeasureTo() {
        if (_writeNormalizedMeasureTo == null) {
            return StringPool.BLANK;
        } else {
            return _writeNormalizedMeasureTo;
        }
    }

    public void setWriteNormalizedMeasureTo(String writeNormalizedMeasureTo) {
        _writeNormalizedMeasureTo = writeNormalizedMeasureTo;
    }

    public String getReadRawScoreFrom() {
        if (_readRawScoreFrom == null) {
            return StringPool.BLANK;
        } else {
            return _readRawScoreFrom;
        }
    }

    public void setReadRawScoreFrom(String readRawScoreFrom) {
        _readRawScoreFrom = readRawScoreFrom;
    }

    public String getReadMinScoreFrom() {
        if (_readMinScoreFrom == null) {
            return StringPool.BLANK;
        } else {
            return _readMinScoreFrom;
        }
    }

    public void setReadMinScoreFrom(String readMinScoreFrom) {
        _readMinScoreFrom = readMinScoreFrom;
    }

    public String getReadMaxScoreFrom() {
        if (_readMaxScoreFrom == null) {
            return StringPool.BLANK;
        } else {
            return _readMaxScoreFrom;
        }
    }

    public void setReadMaxScoreFrom(String readMaxScoreFrom) {
        _readMaxScoreFrom = readMaxScoreFrom;
    }

    public String getReadCompletionStatusFrom() {
        if (_readCompletionStatusFrom == null) {
            return StringPool.BLANK;
        } else {
            return _readCompletionStatusFrom;
        }
    }

    public void setReadCompletionStatusFrom(String readCompletionStatusFrom) {
        _readCompletionStatusFrom = readCompletionStatusFrom;
    }

    public String getReadProgressMeasureFrom() {
        if (_readProgressMeasureFrom == null) {
            return StringPool.BLANK;
        } else {
            return _readProgressMeasureFrom;
        }
    }

    public void setReadProgressMeasureFrom(String readProgressMeasureFrom) {
        _readProgressMeasureFrom = readProgressMeasureFrom;
    }

    public String getWriteRawScoreTo() {
        if (_writeRawScoreTo == null) {
            return StringPool.BLANK;
        } else {
            return _writeRawScoreTo;
        }
    }

    public void setWriteRawScoreTo(String writeRawScoreTo) {
        _writeRawScoreTo = writeRawScoreTo;
    }

    public String getWriteMinScoreTo() {
        if (_writeMinScoreTo == null) {
            return StringPool.BLANK;
        } else {
            return _writeMinScoreTo;
        }
    }

    public void setWriteMinScoreTo(String writeMinScoreTo) {
        _writeMinScoreTo = writeMinScoreTo;
    }

    public String getWriteMaxScoreTo() {
        if (_writeMaxScoreTo == null) {
            return StringPool.BLANK;
        } else {
            return _writeMaxScoreTo;
        }
    }

    public void setWriteMaxScoreTo(String writeMaxScoreTo) {
        _writeMaxScoreTo = writeMaxScoreTo;
    }

    public String getWriteCompletionStatusTo() {
        if (_writeCompletionStatusTo == null) {
            return StringPool.BLANK;
        } else {
            return _writeCompletionStatusTo;
        }
    }

    public void setWriteCompletionStatusTo(String writeCompletionStatusTo) {
        _writeCompletionStatusTo = writeCompletionStatusTo;
    }

    public String getWriteProgressMeasureTo() {
        if (_writeProgressMeasureTo == null) {
            return StringPool.BLANK;
        } else {
            return _writeProgressMeasureTo;
        }
    }

    public void setWriteProgressMeasureTo(String writeProgressMeasureTo) {
        _writeProgressMeasureTo = writeProgressMeasureTo;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFObjectiveMap.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFObjectiveMap toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (LFObjectiveMap) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LFObjectiveMapImpl lfObjectiveMapImpl = new LFObjectiveMapImpl();

        lfObjectiveMapImpl.setId(getId());
        lfObjectiveMapImpl.setObjectiveID(getObjectiveID());
        lfObjectiveMapImpl.setReadSatisfiedStatusFrom(getReadSatisfiedStatusFrom());
        lfObjectiveMapImpl.setReadNormalizedMeasureFrom(getReadNormalizedMeasureFrom());
        lfObjectiveMapImpl.setWriteSatisfiedStatusTo(getWriteSatisfiedStatusTo());
        lfObjectiveMapImpl.setWriteNormalizedMeasureTo(getWriteNormalizedMeasureTo());
        lfObjectiveMapImpl.setReadRawScoreFrom(getReadRawScoreFrom());
        lfObjectiveMapImpl.setReadMinScoreFrom(getReadMinScoreFrom());
        lfObjectiveMapImpl.setReadMaxScoreFrom(getReadMaxScoreFrom());
        lfObjectiveMapImpl.setReadCompletionStatusFrom(getReadCompletionStatusFrom());
        lfObjectiveMapImpl.setReadProgressMeasureFrom(getReadProgressMeasureFrom());
        lfObjectiveMapImpl.setWriteRawScoreTo(getWriteRawScoreTo());
        lfObjectiveMapImpl.setWriteMinScoreTo(getWriteMinScoreTo());
        lfObjectiveMapImpl.setWriteMaxScoreTo(getWriteMaxScoreTo());
        lfObjectiveMapImpl.setWriteCompletionStatusTo(getWriteCompletionStatusTo());
        lfObjectiveMapImpl.setWriteProgressMeasureTo(getWriteProgressMeasureTo());

        lfObjectiveMapImpl.resetOriginalValues();

        return lfObjectiveMapImpl;
    }

    public int compareTo(LFObjectiveMap lfObjectiveMap) {
        long primaryKey = lfObjectiveMap.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        LFObjectiveMap lfObjectiveMap = null;

        try {
            lfObjectiveMap = (LFObjectiveMap) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = lfObjectiveMap.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFObjectiveMapModelImpl lfObjectiveMapModelImpl = this;

        lfObjectiveMapModelImpl._originalObjectiveID = lfObjectiveMapModelImpl._objectiveID;

        lfObjectiveMapModelImpl._setOriginalObjectiveID = false;

        lfObjectiveMapModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFObjectiveMap> toCacheModel() {
        LFObjectiveMapCacheModel lfObjectiveMapCacheModel = new LFObjectiveMapCacheModel();

        lfObjectiveMapCacheModel.id = getId();

        lfObjectiveMapCacheModel.objectiveID = getObjectiveID();

        lfObjectiveMapCacheModel.readSatisfiedStatusFrom = getReadSatisfiedStatusFrom();

        String readSatisfiedStatusFrom = lfObjectiveMapCacheModel.readSatisfiedStatusFrom;

        if ((readSatisfiedStatusFrom != null) &&
                (readSatisfiedStatusFrom.length() == 0)) {
            lfObjectiveMapCacheModel.readSatisfiedStatusFrom = null;
        }

        lfObjectiveMapCacheModel.readNormalizedMeasureFrom = getReadNormalizedMeasureFrom();

        String readNormalizedMeasureFrom = lfObjectiveMapCacheModel.readNormalizedMeasureFrom;

        if ((readNormalizedMeasureFrom != null) &&
                (readNormalizedMeasureFrom.length() == 0)) {
            lfObjectiveMapCacheModel.readNormalizedMeasureFrom = null;
        }

        lfObjectiveMapCacheModel.writeSatisfiedStatusTo = getWriteSatisfiedStatusTo();

        String writeSatisfiedStatusTo = lfObjectiveMapCacheModel.writeSatisfiedStatusTo;

        if ((writeSatisfiedStatusTo != null) &&
                (writeSatisfiedStatusTo.length() == 0)) {
            lfObjectiveMapCacheModel.writeSatisfiedStatusTo = null;
        }

        lfObjectiveMapCacheModel.writeNormalizedMeasureTo = getWriteNormalizedMeasureTo();

        String writeNormalizedMeasureTo = lfObjectiveMapCacheModel.writeNormalizedMeasureTo;

        if ((writeNormalizedMeasureTo != null) &&
                (writeNormalizedMeasureTo.length() == 0)) {
            lfObjectiveMapCacheModel.writeNormalizedMeasureTo = null;
        }

        lfObjectiveMapCacheModel.readRawScoreFrom = getReadRawScoreFrom();

        String readRawScoreFrom = lfObjectiveMapCacheModel.readRawScoreFrom;

        if ((readRawScoreFrom != null) && (readRawScoreFrom.length() == 0)) {
            lfObjectiveMapCacheModel.readRawScoreFrom = null;
        }

        lfObjectiveMapCacheModel.readMinScoreFrom = getReadMinScoreFrom();

        String readMinScoreFrom = lfObjectiveMapCacheModel.readMinScoreFrom;

        if ((readMinScoreFrom != null) && (readMinScoreFrom.length() == 0)) {
            lfObjectiveMapCacheModel.readMinScoreFrom = null;
        }

        lfObjectiveMapCacheModel.readMaxScoreFrom = getReadMaxScoreFrom();

        String readMaxScoreFrom = lfObjectiveMapCacheModel.readMaxScoreFrom;

        if ((readMaxScoreFrom != null) && (readMaxScoreFrom.length() == 0)) {
            lfObjectiveMapCacheModel.readMaxScoreFrom = null;
        }

        lfObjectiveMapCacheModel.readCompletionStatusFrom = getReadCompletionStatusFrom();

        String readCompletionStatusFrom = lfObjectiveMapCacheModel.readCompletionStatusFrom;

        if ((readCompletionStatusFrom != null) &&
                (readCompletionStatusFrom.length() == 0)) {
            lfObjectiveMapCacheModel.readCompletionStatusFrom = null;
        }

        lfObjectiveMapCacheModel.readProgressMeasureFrom = getReadProgressMeasureFrom();

        String readProgressMeasureFrom = lfObjectiveMapCacheModel.readProgressMeasureFrom;

        if ((readProgressMeasureFrom != null) &&
                (readProgressMeasureFrom.length() == 0)) {
            lfObjectiveMapCacheModel.readProgressMeasureFrom = null;
        }

        lfObjectiveMapCacheModel.writeRawScoreTo = getWriteRawScoreTo();

        String writeRawScoreTo = lfObjectiveMapCacheModel.writeRawScoreTo;

        if ((writeRawScoreTo != null) && (writeRawScoreTo.length() == 0)) {
            lfObjectiveMapCacheModel.writeRawScoreTo = null;
        }

        lfObjectiveMapCacheModel.writeMinScoreTo = getWriteMinScoreTo();

        String writeMinScoreTo = lfObjectiveMapCacheModel.writeMinScoreTo;

        if ((writeMinScoreTo != null) && (writeMinScoreTo.length() == 0)) {
            lfObjectiveMapCacheModel.writeMinScoreTo = null;
        }

        lfObjectiveMapCacheModel.writeMaxScoreTo = getWriteMaxScoreTo();

        String writeMaxScoreTo = lfObjectiveMapCacheModel.writeMaxScoreTo;

        if ((writeMaxScoreTo != null) && (writeMaxScoreTo.length() == 0)) {
            lfObjectiveMapCacheModel.writeMaxScoreTo = null;
        }

        lfObjectiveMapCacheModel.writeCompletionStatusTo = getWriteCompletionStatusTo();

        String writeCompletionStatusTo = lfObjectiveMapCacheModel.writeCompletionStatusTo;

        if ((writeCompletionStatusTo != null) &&
                (writeCompletionStatusTo.length() == 0)) {
            lfObjectiveMapCacheModel.writeCompletionStatusTo = null;
        }

        lfObjectiveMapCacheModel.writeProgressMeasureTo = getWriteProgressMeasureTo();

        String writeProgressMeasureTo = lfObjectiveMapCacheModel.writeProgressMeasureTo;

        if ((writeProgressMeasureTo != null) &&
                (writeProgressMeasureTo.length() == 0)) {
            lfObjectiveMapCacheModel.writeProgressMeasureTo = null;
        }

        return lfObjectiveMapCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(33);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", objectiveID=");
        sb.append(getObjectiveID());
        sb.append(", readSatisfiedStatusFrom=");
        sb.append(getReadSatisfiedStatusFrom());
        sb.append(", readNormalizedMeasureFrom=");
        sb.append(getReadNormalizedMeasureFrom());
        sb.append(", writeSatisfiedStatusTo=");
        sb.append(getWriteSatisfiedStatusTo());
        sb.append(", writeNormalizedMeasureTo=");
        sb.append(getWriteNormalizedMeasureTo());
        sb.append(", readRawScoreFrom=");
        sb.append(getReadRawScoreFrom());
        sb.append(", readMinScoreFrom=");
        sb.append(getReadMinScoreFrom());
        sb.append(", readMaxScoreFrom=");
        sb.append(getReadMaxScoreFrom());
        sb.append(", readCompletionStatusFrom=");
        sb.append(getReadCompletionStatusFrom());
        sb.append(", readProgressMeasureFrom=");
        sb.append(getReadProgressMeasureFrom());
        sb.append(", writeRawScoreTo=");
        sb.append(getWriteRawScoreTo());
        sb.append(", writeMinScoreTo=");
        sb.append(getWriteMinScoreTo());
        sb.append(", writeMaxScoreTo=");
        sb.append(getWriteMaxScoreTo());
        sb.append(", writeCompletionStatusTo=");
        sb.append(getWriteCompletionStatusTo());
        sb.append(", writeProgressMeasureTo=");
        sb.append(getWriteProgressMeasureTo());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(52);

        sb.append("<model><model-name>");
        sb.append("com.arcusys.learn.persistence.liferay.model.LFObjectiveMap");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>objectiveID</column-name><column-value><![CDATA[");
        sb.append(getObjectiveID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>readSatisfiedStatusFrom</column-name><column-value><![CDATA[");
        sb.append(getReadSatisfiedStatusFrom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>readNormalizedMeasureFrom</column-name><column-value><![CDATA[");
        sb.append(getReadNormalizedMeasureFrom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>writeSatisfiedStatusTo</column-name><column-value><![CDATA[");
        sb.append(getWriteSatisfiedStatusTo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>writeNormalizedMeasureTo</column-name><column-value><![CDATA[");
        sb.append(getWriteNormalizedMeasureTo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>readRawScoreFrom</column-name><column-value><![CDATA[");
        sb.append(getReadRawScoreFrom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>readMinScoreFrom</column-name><column-value><![CDATA[");
        sb.append(getReadMinScoreFrom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>readMaxScoreFrom</column-name><column-value><![CDATA[");
        sb.append(getReadMaxScoreFrom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>readCompletionStatusFrom</column-name><column-value><![CDATA[");
        sb.append(getReadCompletionStatusFrom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>readProgressMeasureFrom</column-name><column-value><![CDATA[");
        sb.append(getReadProgressMeasureFrom());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>writeRawScoreTo</column-name><column-value><![CDATA[");
        sb.append(getWriteRawScoreTo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>writeMinScoreTo</column-name><column-value><![CDATA[");
        sb.append(getWriteMinScoreTo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>writeMaxScoreTo</column-name><column-value><![CDATA[");
        sb.append(getWriteMaxScoreTo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>writeCompletionStatusTo</column-name><column-value><![CDATA[");
        sb.append(getWriteCompletionStatusTo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>writeProgressMeasureTo</column-name><column-value><![CDATA[");
        sb.append(getWriteProgressMeasureTo());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
