package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFActivityDataMap;
import com.arcusys.learn.persistence.liferay.model.LFActivityDataMapModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFActivityDataMap service. Represents a row in the &quot;Learn_LFActivityDataMap&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFActivityDataMapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFActivityDataMapImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFActivityDataMapImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFActivityDataMap
 * @see com.arcusys.learn.persistence.liferay.model.LFActivityDataMapModel
 * @generated
 */
public class LFActivityDataMapModelImpl extends BaseModelImpl<LFActivityDataMap>
    implements LFActivityDataMapModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f activity data map model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFActivityDataMap} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFActivityDataMap";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "packageID", Types.INTEGER },
            { "activityID", Types.VARCHAR },
            { "targetId", Types.CLOB },
            { "readSharedData", Types.BOOLEAN },
            { "writeSharedData", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFActivityDataMap (id_ LONG not null primary key,packageID INTEGER null,activityID VARCHAR(512) null,targetId TEXT null,readSharedData BOOLEAN null,writeSharedData BOOLEAN null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFActivityDataMap";
    public static final String ORDER_BY_JPQL = " ORDER BY lfActivityDataMap.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFActivityDataMap.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFActivityDataMap"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFActivityDataMap"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFActivityDataMap"),
            true);
    public static long ACTIVITYID_COLUMN_BITMASK = 1L;
    public static long PACKAGEID_COLUMN_BITMASK = 2L;
    public static long ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFActivityDataMap"));
    private static ClassLoader _classLoader = LFActivityDataMap.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFActivityDataMap.class
        };
    private long _id;
    private Integer _packageID;
    private Integer _originalPackageID;
    private boolean _setOriginalPackageID;
    private String _activityID;
    private String _originalActivityID;
    private String _targetId;
    private boolean _readSharedData;
    private boolean _writeSharedData;
    private long _columnBitmask;
    private LFActivityDataMap _escapedModel;

    public LFActivityDataMapModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFActivityDataMap.class;
    }

    @Override
    public String getModelClassName() {
        return LFActivityDataMap.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("packageID", getPackageID());
        attributes.put("activityID", getActivityID());
        attributes.put("targetId", getTargetId());
        attributes.put("readSharedData", getReadSharedData());
        attributes.put("writeSharedData", getWriteSharedData());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer packageID = (Integer) attributes.get("packageID");

        if (packageID != null) {
            setPackageID(packageID);
        }

        String activityID = (String) attributes.get("activityID");

        if (activityID != null) {
            setActivityID(activityID);
        }

        String targetId = (String) attributes.get("targetId");

        if (targetId != null) {
            setTargetId(targetId);
        }

        Boolean readSharedData = (Boolean) attributes.get("readSharedData");

        if (readSharedData != null) {
            setReadSharedData(readSharedData);
        }

        Boolean writeSharedData = (Boolean) attributes.get("writeSharedData");

        if (writeSharedData != null) {
            setWriteSharedData(writeSharedData);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public Integer getPackageID() {
        return _packageID;
    }

    @Override
    public void setPackageID(Integer packageID) {
        _columnBitmask |= PACKAGEID_COLUMN_BITMASK;

        if (!_setOriginalPackageID) {
            _setOriginalPackageID = true;

            _originalPackageID = _packageID;
        }

        _packageID = packageID;
    }

    public Integer getOriginalPackageID() {
        return _originalPackageID;
    }

    @Override
    public String getActivityID() {
        if (_activityID == null) {
            return StringPool.BLANK;
        } else {
            return _activityID;
        }
    }

    @Override
    public void setActivityID(String activityID) {
        _columnBitmask |= ACTIVITYID_COLUMN_BITMASK;

        if (_originalActivityID == null) {
            _originalActivityID = _activityID;
        }

        _activityID = activityID;
    }

    public String getOriginalActivityID() {
        return GetterUtil.getString(_originalActivityID);
    }

    @Override
    public String getTargetId() {
        if (_targetId == null) {
            return StringPool.BLANK;
        } else {
            return _targetId;
        }
    }

    @Override
    public void setTargetId(String targetId) {
        _targetId = targetId;
    }

    @Override
    public boolean getReadSharedData() {
        return _readSharedData;
    }

    @Override
    public boolean isReadSharedData() {
        return _readSharedData;
    }

    @Override
    public void setReadSharedData(boolean readSharedData) {
        _readSharedData = readSharedData;
    }

    @Override
    public boolean getWriteSharedData() {
        return _writeSharedData;
    }

    @Override
    public boolean isWriteSharedData() {
        return _writeSharedData;
    }

    @Override
    public void setWriteSharedData(boolean writeSharedData) {
        _writeSharedData = writeSharedData;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFActivityDataMap.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFActivityDataMap toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFActivityDataMap) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFActivityDataMapImpl lfActivityDataMapImpl = new LFActivityDataMapImpl();

        lfActivityDataMapImpl.setId(getId());
        lfActivityDataMapImpl.setPackageID(getPackageID());
        lfActivityDataMapImpl.setActivityID(getActivityID());
        lfActivityDataMapImpl.setTargetId(getTargetId());
        lfActivityDataMapImpl.setReadSharedData(getReadSharedData());
        lfActivityDataMapImpl.setWriteSharedData(getWriteSharedData());

        lfActivityDataMapImpl.resetOriginalValues();

        return lfActivityDataMapImpl;
    }

    @Override
    public int compareTo(LFActivityDataMap lfActivityDataMap) {
        long primaryKey = lfActivityDataMap.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFActivityDataMap)) {
            return false;
        }

        LFActivityDataMap lfActivityDataMap = (LFActivityDataMap) obj;

        long primaryKey = lfActivityDataMap.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFActivityDataMapModelImpl lfActivityDataMapModelImpl = this;

        lfActivityDataMapModelImpl._originalPackageID = lfActivityDataMapModelImpl._packageID;

        lfActivityDataMapModelImpl._setOriginalPackageID = false;

        lfActivityDataMapModelImpl._originalActivityID = lfActivityDataMapModelImpl._activityID;

        lfActivityDataMapModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFActivityDataMap> toCacheModel() {
        LFActivityDataMapCacheModel lfActivityDataMapCacheModel = new LFActivityDataMapCacheModel();

        lfActivityDataMapCacheModel.id = getId();

        lfActivityDataMapCacheModel.packageID = getPackageID();

        lfActivityDataMapCacheModel.activityID = getActivityID();

        String activityID = lfActivityDataMapCacheModel.activityID;

        if ((activityID != null) && (activityID.length() == 0)) {
            lfActivityDataMapCacheModel.activityID = null;
        }

        lfActivityDataMapCacheModel.targetId = getTargetId();

        String targetId = lfActivityDataMapCacheModel.targetId;

        if ((targetId != null) && (targetId.length() == 0)) {
            lfActivityDataMapCacheModel.targetId = null;
        }

        lfActivityDataMapCacheModel.readSharedData = getReadSharedData();

        lfActivityDataMapCacheModel.writeSharedData = getWriteSharedData();

        return lfActivityDataMapCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", packageID=");
        sb.append(getPackageID());
        sb.append(", activityID=");
        sb.append(getActivityID());
        sb.append(", targetId=");
        sb.append(getTargetId());
        sb.append(", readSharedData=");
        sb.append(getReadSharedData());
        sb.append(", writeSharedData=");
        sb.append(getWriteSharedData());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFActivityDataMap");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageID</column-name><column-value><![CDATA[");
        sb.append(getPackageID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>activityID</column-name><column-value><![CDATA[");
        sb.append(getActivityID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>targetId</column-name><column-value><![CDATA[");
        sb.append(getTargetId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>readSharedData</column-name><column-value><![CDATA[");
        sb.append(getReadSharedData());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>writeSharedData</column-name><column-value><![CDATA[");
        sb.append(getWriteSharedData());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
