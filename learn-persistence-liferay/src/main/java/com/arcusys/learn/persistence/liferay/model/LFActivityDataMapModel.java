package com.arcusys.learn.persistence.liferay.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the LFActivityDataMap service. Represents a row in the &quot;Learn_LFActivityDataMap&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.arcusys.learn.persistence.liferay.model.impl.LFActivityDataMapModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.arcusys.learn.persistence.liferay.model.impl.LFActivityDataMapImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFActivityDataMap
 * @see com.arcusys.learn.persistence.liferay.model.impl.LFActivityDataMapImpl
 * @see com.arcusys.learn.persistence.liferay.model.impl.LFActivityDataMapModelImpl
 * @generated
 */
public interface LFActivityDataMapModel extends BaseModel<LFActivityDataMap> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a l f activity data map model instance should use the {@link LFActivityDataMap} interface instead.
     */

    /**
     * Returns the primary key of this l f activity data map.
     *
     * @return the primary key of this l f activity data map
     */
    public long getPrimaryKey();

    /**
     * Sets the primary key of this l f activity data map.
     *
     * @param primaryKey the primary key of this l f activity data map
     */
    public void setPrimaryKey(long primaryKey);

    /**
     * Returns the ID of this l f activity data map.
     *
     * @return the ID of this l f activity data map
     */
    public long getId();

    /**
     * Sets the ID of this l f activity data map.
     *
     * @param id the ID of this l f activity data map
     */
    public void setId(long id);

    /**
     * Returns the package i d of this l f activity data map.
     *
     * @return the package i d of this l f activity data map
     */
    public Integer getPackageID();

    /**
     * Sets the package i d of this l f activity data map.
     *
     * @param packageID the package i d of this l f activity data map
     */
    public void setPackageID(Integer packageID);

    /**
     * Returns the activity i d of this l f activity data map.
     *
     * @return the activity i d of this l f activity data map
     */
    @AutoEscape
    public String getActivityID();

    /**
     * Sets the activity i d of this l f activity data map.
     *
     * @param activityID the activity i d of this l f activity data map
     */
    public void setActivityID(String activityID);

    /**
     * Returns the target ID of this l f activity data map.
     *
     * @return the target ID of this l f activity data map
     */
    @AutoEscape
    public String getTargetId();

    /**
     * Sets the target ID of this l f activity data map.
     *
     * @param targetId the target ID of this l f activity data map
     */
    public void setTargetId(String targetId);

    /**
     * Returns the read shared data of this l f activity data map.
     *
     * @return the read shared data of this l f activity data map
     */
    public boolean getReadSharedData();

    /**
     * Returns <code>true</code> if this l f activity data map is read shared data.
     *
     * @return <code>true</code> if this l f activity data map is read shared data; <code>false</code> otherwise
     */
    public boolean isReadSharedData();

    /**
     * Sets whether this l f activity data map is read shared data.
     *
     * @param readSharedData the read shared data of this l f activity data map
     */
    public void setReadSharedData(boolean readSharedData);

    /**
     * Returns the write shared data of this l f activity data map.
     *
     * @return the write shared data of this l f activity data map
     */
    public boolean getWriteSharedData();

    /**
     * Returns <code>true</code> if this l f activity data map is write shared data.
     *
     * @return <code>true</code> if this l f activity data map is write shared data; <code>false</code> otherwise
     */
    public boolean isWriteSharedData();

    /**
     * Sets whether this l f activity data map is write shared data.
     *
     * @param writeSharedData the write shared data of this l f activity data map
     */
    public void setWriteSharedData(boolean writeSharedData);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(LFActivityDataMap lfActivityDataMap);

    @Override
    public int hashCode();

    @Override
    public CacheModel<LFActivityDataMap> toCacheModel();

    @Override
    public LFActivityDataMap toEscapedModel();

    @Override
    public LFActivityDataMap toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
