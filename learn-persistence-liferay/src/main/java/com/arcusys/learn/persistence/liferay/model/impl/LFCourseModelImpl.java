package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFCourse;
import com.arcusys.learn.persistence.liferay.model.LFCourseModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
* The base model implementation for the LFCourse service. Represents a row in the &quot;Learn_LFCourse&quot; database table, with each column mapped to a property of this class.
*
* <p>
    * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFCourseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFCourseImpl}.
    * </p>
*
* @author Brian Wing Shun Chan
* @see LFCourseImpl
* @see com.arcusys.learn.persistence.liferay.model.LFCourse
* @see com.arcusys.learn.persistence.liferay.model.LFCourseModel
* @generated
*/
public class LFCourseModelImpl extends BaseModelImpl<LFCourse>
    implements LFCourseModel {
    /*
    * NOTE FOR DEVELOPERS:
    *
    * Never modify or reference this class directly. All methods that expect a l f course model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFCourse} interface instead.
    */
    public static final String TABLE_NAME = "Learn_LFCourse";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "courseID", Types.INTEGER },
            { "userID", Types.INTEGER },
            { "grade", Types.CLOB },
            { "comment_", Types.CLOB },
            { "date_", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFCourse (id_ LONG not null primary key,courseID INTEGER,userID INTEGER,grade TEXT null,comment_ TEXT null,date_ DATE null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFCourse";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFCourse"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFCourse"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFCourse"),
            true);
    public static long COURSEID_COLUMN_BITMASK = 1L;
    public static long GRADE_COLUMN_BITMASK = 2L;
    public static long USERID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFCourse"));
    private static ClassLoader _classLoader = LFCourse.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            LFCourse.class
        };
    private long _id;
    private Integer _courseID;
    private Integer _originalCourseID;
    private boolean _setOriginalCourseID;
    private Integer _userID;
    private Integer _originalUserID;
    private boolean _setOriginalUserID;
    private String _grade;
    private String _originalGrade;
    private String _comment;
    private Date _date;
    private long _columnBitmask;
    private LFCourse _escapedModelProxy;

    public LFCourseModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return LFCourse.class;
    }

    public String getModelClassName() {
        return LFCourse.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("courseID", getCourseID());
        attributes.put("userID", getUserID());
        attributes.put("grade", getGrade());
        attributes.put("comment", getComment());
        attributes.put("date", getDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer courseID = (Integer) attributes.get("courseID");

        if (courseID != null) {
            setCourseID(courseID);
        }

        Integer userID = (Integer) attributes.get("userID");

        if (userID != null) {
            setUserID(userID);
        }

        String grade = (String) attributes.get("grade");

        if (grade != null) {
            setGrade(grade);
        }

        String comment = (String) attributes.get("comment");

        if (comment != null) {
            setComment(comment);
        }

        Date date = (Date) attributes.get("date");

        if (date != null) {
            setDate(date);
        }
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public Integer getCourseID() {
        return _courseID;
    }

    public void setCourseID(Integer courseID) {
        _columnBitmask |= COURSEID_COLUMN_BITMASK;

        if (!_setOriginalCourseID) {
            _setOriginalCourseID = true;

            _originalCourseID = _courseID;
        }

        _courseID = courseID;
    }

    public Integer getOriginalCourseID() {
        return _originalCourseID;
    }

    public Integer getUserID() {
        return _userID;
    }

    public void setUserID(Integer userID) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserID) {
            _setOriginalUserID = true;

            _originalUserID = _userID;
        }

        _userID = userID;
    }

    public Integer getOriginalUserID() {
        return _originalUserID;
    }

    public String getGrade() {
        if (_grade == null) {
            return StringPool.BLANK;
        } else {
            return _grade;
        }
    }

    public void setGrade(String grade) {
        _columnBitmask |= GRADE_COLUMN_BITMASK;

        if (_originalGrade == null) {
            _originalGrade = _grade;
        }

        _grade = grade;
    }

    public String getOriginalGrade() {
        return GetterUtil.getString(_originalGrade);
    }

    public String getComment() {
        if (_comment == null) {
            return StringPool.BLANK;
        } else {
            return _comment;
        }
    }

    public void setComment(String comment) {
        _comment = comment;
    }

    public Date getDate() {
        return _date;
    }

    public void setDate(Date date) {
        _date = date;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFCourse.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFCourse toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (LFCourse) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LFCourseImpl lfCourseImpl = new LFCourseImpl();

        lfCourseImpl.setId(getId());
        lfCourseImpl.setCourseID(getCourseID());
        lfCourseImpl.setUserID(getUserID());
        lfCourseImpl.setGrade(getGrade());
        lfCourseImpl.setComment(getComment());
        lfCourseImpl.setDate(getDate());

        lfCourseImpl.resetOriginalValues();

        return lfCourseImpl;
    }

    public int compareTo(LFCourse lfCourse) {
        long primaryKey = lfCourse.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        LFCourse lfCourse = null;

        try {
            lfCourse = (LFCourse) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = lfCourse.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFCourseModelImpl lfCourseModelImpl = this;

        lfCourseModelImpl._originalCourseID = lfCourseModelImpl._courseID;

        lfCourseModelImpl._setOriginalCourseID = false;

        lfCourseModelImpl._originalUserID = lfCourseModelImpl._userID;

        lfCourseModelImpl._setOriginalUserID = false;

        lfCourseModelImpl._originalGrade = lfCourseModelImpl._grade;

        lfCourseModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFCourse> toCacheModel() {
        LFCourseCacheModel lfCourseCacheModel = new LFCourseCacheModel();

        lfCourseCacheModel.id = getId();

        lfCourseCacheModel.courseID = getCourseID();

        lfCourseCacheModel.userID = getUserID();

        lfCourseCacheModel.grade = getGrade();

        String grade = lfCourseCacheModel.grade;

        if ((grade != null) && (grade.length() == 0)) {
            lfCourseCacheModel.grade = null;
        }

        lfCourseCacheModel.comment = getComment();

        String comment = lfCourseCacheModel.comment;

        if ((comment != null) && (comment.length() == 0)) {
            lfCourseCacheModel.comment = null;
        }

        Date date = getDate();

        if (date != null) {
            lfCourseCacheModel.date = date.getTime();
        } else {
            lfCourseCacheModel.date = Long.MIN_VALUE;
        }

        return lfCourseCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", courseID=");
        sb.append(getCourseID());
        sb.append(", userID=");
        sb.append(getUserID());
        sb.append(", grade=");
        sb.append(getGrade());
        sb.append(", comment=");
        sb.append(getComment());
        sb.append(", date=");
        sb.append(getDate());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.arcusys.learn.persistence.liferay.model.LFCourse");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>courseID</column-name><column-value><![CDATA[");
        sb.append(getCourseID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userID</column-name><column-value><![CDATA[");
        sb.append(getUserID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grade</column-name><column-value><![CDATA[");
        sb.append(getGrade());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>comment</column-name><column-value><![CDATA[");
        sb.append(getComment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>date</column-name><column-value><![CDATA[");
        sb.append(getDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
