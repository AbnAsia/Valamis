package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFTincanURI;
import com.arcusys.learn.persistence.liferay.model.LFTincanURIModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFTincanURI service. Represents a row in the &quot;Learn_LFTincanURI&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFTincanURIModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFTincanURIImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFTincanURIImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFTincanURI
 * @see com.arcusys.learn.persistence.liferay.model.LFTincanURIModel
 * @generated
 */
public class LFTincanURIModelImpl extends BaseModelImpl<LFTincanURI>
    implements LFTincanURIModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f tincan u r i model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFTincanURI} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFTincanURI";
    public static final Object[][] TABLE_COLUMNS = {
            { "uri", Types.VARCHAR },
            { "objID", Types.VARCHAR },
            { "objType", Types.VARCHAR },
            { "content", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFTincanURI (uri VARCHAR(200) not null primary key,objID VARCHAR(512) null,objType VARCHAR(512) null,content VARCHAR(2000) null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFTincanURI";
    public static final String ORDER_BY_JPQL = " ORDER BY lfTincanURI.uri ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFTincanURI.uri ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanURI"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanURI"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanURI"),
            true);
    public static long OBJID_COLUMN_BITMASK = 1L;
    public static long OBJTYPE_COLUMN_BITMASK = 2L;
    public static long URI_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFTincanURI"));
    private static ClassLoader _classLoader = LFTincanURI.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFTincanURI.class
        };
    private String _uri;
    private String _objID;
    private String _originalObjID;
    private String _objType;
    private String _originalObjType;
    private String _content;
    private long _columnBitmask;
    private LFTincanURI _escapedModel;

    public LFTincanURIModelImpl() {
    }

    @Override
    public String getPrimaryKey() {
        return _uri;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setUri(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _uri;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return LFTincanURI.class;
    }

    @Override
    public String getModelClassName() {
        return LFTincanURI.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uri", getUri());
        attributes.put("objID", getObjID());
        attributes.put("objType", getObjType());
        attributes.put("content", getContent());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uri = (String) attributes.get("uri");

        if (uri != null) {
            setUri(uri);
        }

        String objID = (String) attributes.get("objID");

        if (objID != null) {
            setObjID(objID);
        }

        String objType = (String) attributes.get("objType");

        if (objType != null) {
            setObjType(objType);
        }

        String content = (String) attributes.get("content");

        if (content != null) {
            setContent(content);
        }
    }

    @Override
    public String getUri() {
        return _uri;
    }

    @Override
    public void setUri(String uri) {
        _uri = uri;
    }

    @Override
    public String getObjID() {
        return _objID;
    }

    @Override
    public void setObjID(String objID) {
        _columnBitmask |= OBJID_COLUMN_BITMASK;

        if (_originalObjID == null) {
            _originalObjID = _objID;
        }

        _objID = objID;
    }

    public String getOriginalObjID() {
        return _originalObjID;
    }

    @Override
    public String getObjType() {
        return _objType;
    }

    @Override
    public void setObjType(String objType) {
        _columnBitmask |= OBJTYPE_COLUMN_BITMASK;

        if (_originalObjType == null) {
            _originalObjType = _objType;
        }

        _objType = objType;
    }

    public String getOriginalObjType() {
        return _originalObjType;
    }

    @Override
    public String getContent() {
        return _content;
    }

    @Override
    public void setContent(String content) {
        _content = content;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public LFTincanURI toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFTincanURI) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFTincanURIImpl lfTincanURIImpl = new LFTincanURIImpl();

        lfTincanURIImpl.setUri(getUri());
        lfTincanURIImpl.setObjID(getObjID());
        lfTincanURIImpl.setObjType(getObjType());
        lfTincanURIImpl.setContent(getContent());

        lfTincanURIImpl.resetOriginalValues();

        return lfTincanURIImpl;
    }

    @Override
    public int compareTo(LFTincanURI lfTincanURI) {
        String primaryKey = lfTincanURI.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFTincanURI)) {
            return false;
        }

        LFTincanURI lfTincanURI = (LFTincanURI) obj;

        String primaryKey = lfTincanURI.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        LFTincanURIModelImpl lfTincanURIModelImpl = this;

        lfTincanURIModelImpl._originalObjID = lfTincanURIModelImpl._objID;

        lfTincanURIModelImpl._originalObjType = lfTincanURIModelImpl._objType;

        lfTincanURIModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFTincanURI> toCacheModel() {
        LFTincanURICacheModel lfTincanURICacheModel = new LFTincanURICacheModel();

        lfTincanURICacheModel.uri = getUri();

        String uri = lfTincanURICacheModel.uri;

        if ((uri != null) && (uri.length() == 0)) {
            lfTincanURICacheModel.uri = null;
        }

        lfTincanURICacheModel.objID = getObjID();

        String objID = lfTincanURICacheModel.objID;

        if ((objID != null) && (objID.length() == 0)) {
            lfTincanURICacheModel.objID = null;
        }

        lfTincanURICacheModel.objType = getObjType();

        String objType = lfTincanURICacheModel.objType;

        if ((objType != null) && (objType.length() == 0)) {
            lfTincanURICacheModel.objType = null;
        }

        lfTincanURICacheModel.content = getContent();

        String content = lfTincanURICacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            lfTincanURICacheModel.content = null;
        }

        return lfTincanURICacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{uri=");
        sb.append(getUri());
        sb.append(", objID=");
        sb.append(getObjID());
        sb.append(", objType=");
        sb.append(getObjType());
        sb.append(", content=");
        sb.append(getContent());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.arcusys.learn.persistence.liferay.model.LFTincanURI");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uri</column-name><column-value><![CDATA[");
        sb.append(getUri());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>objID</column-name><column-value><![CDATA[");
        sb.append(getObjID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>objType</column-name><column-value><![CDATA[");
        sb.append(getObjType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
