package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFCertificateToUser;
import com.arcusys.learn.persistence.liferay.model.LFCertificateToUserModel;
import com.arcusys.learn.persistence.liferay.service.persistence.LFCertificateToUserPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFCertificateToUser service. Represents a row in the &quot;Learn_LFCertificateToUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFCertificateToUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFCertificateToUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFCertificateToUserImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFCertificateToUser
 * @see com.arcusys.learn.persistence.liferay.model.LFCertificateToUserModel
 * @generated
 */
public class LFCertificateToUserModelImpl extends BaseModelImpl<LFCertificateToUser>
    implements LFCertificateToUserModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f certificate to user model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFCertificateToUser} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFCertificateToUser";
    public static final Object[][] TABLE_COLUMNS = {
            { "certificateID", Types.INTEGER },
            { "userID", Types.INTEGER },
            { "status", Types.VARCHAR },
            { "addedToUserDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFCertificateToUser (certificateID INTEGER not null,userID INTEGER not null,status VARCHAR(75) null,addedToUserDate DATE null,primary key (certificateID, userID))";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFCertificateToUser";
    public static final String ORDER_BY_JPQL = " ORDER BY lfCertificateToUser.id.certificateID ASC, lfCertificateToUser.id.userID ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFCertificateToUser.certificateID ASC, Learn_LFCertificateToUser.userID ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFCertificateToUser"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFCertificateToUser"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFCertificateToUser"),
            true);
    public static long CERTIFICATEID_COLUMN_BITMASK = 1L;
    public static long USERID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFCertificateToUser"));
    private static ClassLoader _classLoader = LFCertificateToUser.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFCertificateToUser.class
        };
    private Integer _certificateID;
    private Integer _originalCertificateID;
    private boolean _setOriginalCertificateID;
    private Integer _userID;
    private Integer _originalUserID;
    private boolean _setOriginalUserID;
    private String _status;
    private Date _addedToUserDate;
    private long _columnBitmask;
    private LFCertificateToUser _escapedModel;

    public LFCertificateToUserModelImpl() {
    }

    @Override
    public LFCertificateToUserPK getPrimaryKey() {
        return new LFCertificateToUserPK(_certificateID, _userID);
    }

    @Override
    public void setPrimaryKey(LFCertificateToUserPK primaryKey) {
        setCertificateID(primaryKey.certificateID);
        setUserID(primaryKey.userID);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new LFCertificateToUserPK(_certificateID, _userID);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((LFCertificateToUserPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return LFCertificateToUser.class;
    }

    @Override
    public String getModelClassName() {
        return LFCertificateToUser.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("certificateID", getCertificateID());
        attributes.put("userID", getUserID());
        attributes.put("status", getStatus());
        attributes.put("addedToUserDate", getAddedToUserDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer certificateID = (Integer) attributes.get("certificateID");

        if (certificateID != null) {
            setCertificateID(certificateID);
        }

        Integer userID = (Integer) attributes.get("userID");

        if (userID != null) {
            setUserID(userID);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Date addedToUserDate = (Date) attributes.get("addedToUserDate");

        if (addedToUserDate != null) {
            setAddedToUserDate(addedToUserDate);
        }
    }

    @Override
    public Integer getCertificateID() {
        return _certificateID;
    }

    @Override
    public void setCertificateID(Integer certificateID) {
        _columnBitmask |= CERTIFICATEID_COLUMN_BITMASK;

        if (!_setOriginalCertificateID) {
            _setOriginalCertificateID = true;

            _originalCertificateID = _certificateID;
        }

        _certificateID = certificateID;
    }

    public Integer getOriginalCertificateID() {
        return _originalCertificateID;
    }

    @Override
    public Integer getUserID() {
        return _userID;
    }

    @Override
    public void setUserID(Integer userID) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserID) {
            _setOriginalUserID = true;

            _originalUserID = _userID;
        }

        _userID = userID;
    }

    public Integer getOriginalUserID() {
        return _originalUserID;
    }

    @Override
    public String getStatus() {
        return _status;
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    @Override
    public Date getAddedToUserDate() {
        return _addedToUserDate;
    }

    @Override
    public void setAddedToUserDate(Date addedToUserDate) {
        _addedToUserDate = addedToUserDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public LFCertificateToUser toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFCertificateToUser) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFCertificateToUserImpl lfCertificateToUserImpl = new LFCertificateToUserImpl();

        lfCertificateToUserImpl.setCertificateID(getCertificateID());
        lfCertificateToUserImpl.setUserID(getUserID());
        lfCertificateToUserImpl.setStatus(getStatus());
        lfCertificateToUserImpl.setAddedToUserDate(getAddedToUserDate());

        lfCertificateToUserImpl.resetOriginalValues();

        return lfCertificateToUserImpl;
    }

    @Override
    public int compareTo(LFCertificateToUser lfCertificateToUser) {
        LFCertificateToUserPK primaryKey = lfCertificateToUser.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFCertificateToUser)) {
            return false;
        }

        LFCertificateToUser lfCertificateToUser = (LFCertificateToUser) obj;

        LFCertificateToUserPK primaryKey = lfCertificateToUser.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        LFCertificateToUserModelImpl lfCertificateToUserModelImpl = this;

        lfCertificateToUserModelImpl._originalCertificateID = lfCertificateToUserModelImpl._certificateID;

        lfCertificateToUserModelImpl._setOriginalCertificateID = false;

        lfCertificateToUserModelImpl._originalUserID = lfCertificateToUserModelImpl._userID;

        lfCertificateToUserModelImpl._setOriginalUserID = false;

        lfCertificateToUserModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFCertificateToUser> toCacheModel() {
        LFCertificateToUserCacheModel lfCertificateToUserCacheModel = new LFCertificateToUserCacheModel();

        lfCertificateToUserCacheModel.certificateID = getCertificateID();

        lfCertificateToUserCacheModel.userID = getUserID();

        lfCertificateToUserCacheModel.status = getStatus();

        String status = lfCertificateToUserCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            lfCertificateToUserCacheModel.status = null;
        }

        Date addedToUserDate = getAddedToUserDate();

        if (addedToUserDate != null) {
            lfCertificateToUserCacheModel.addedToUserDate = addedToUserDate.getTime();
        } else {
            lfCertificateToUserCacheModel.addedToUserDate = Long.MIN_VALUE;
        }

        return lfCertificateToUserCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{certificateID=");
        sb.append(getCertificateID());
        sb.append(", userID=");
        sb.append(getUserID());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", addedToUserDate=");
        sb.append(getAddedToUserDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFCertificateToUser");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>certificateID</column-name><column-value><![CDATA[");
        sb.append(getCertificateID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userID</column-name><column-value><![CDATA[");
        sb.append(getUserID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addedToUserDate</column-name><column-value><![CDATA[");
        sb.append(getAddedToUserDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
