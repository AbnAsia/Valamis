package com.arcusys.learn.persistence.liferay.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.math.BigDecimal;

/**
 * The base model interface for the LFObjectiveState service. Represents a row in the &quot;Learn_LFObjectiveState&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.arcusys.learn.persistence.liferay.model.impl.LFObjectiveStateModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.arcusys.learn.persistence.liferay.model.impl.LFObjectiveStateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFObjectiveState
 * @see com.arcusys.learn.persistence.liferay.model.impl.LFObjectiveStateImpl
 * @see com.arcusys.learn.persistence.liferay.model.impl.LFObjectiveStateModelImpl
 * @generated
 */
public interface LFObjectiveStateModel extends BaseModel<LFObjectiveState> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a l f objective state model instance should use the {@link LFObjectiveState} interface instead.
     */

    /**
     * Returns the primary key of this l f objective state.
     *
     * @return the primary key of this l f objective state
     */
    public long getPrimaryKey();

    /**
     * Sets the primary key of this l f objective state.
     *
     * @param primaryKey the primary key of this l f objective state
     */
    public void setPrimaryKey(long primaryKey);

    /**
     * Returns the ID of this l f objective state.
     *
     * @return the ID of this l f objective state
     */
    public long getId();

    /**
     * Sets the ID of this l f objective state.
     *
     * @param id the ID of this l f objective state
     */
    public void setId(long id);

    /**
     * Returns the satisfied of this l f objective state.
     *
     * @return the satisfied of this l f objective state
     */
    public Boolean getSatisfied();

    /**
     * Sets the satisfied of this l f objective state.
     *
     * @param satisfied the satisfied of this l f objective state
     */
    public void setSatisfied(Boolean satisfied);

    /**
     * Returns the normalized measure of this l f objective state.
     *
     * @return the normalized measure of this l f objective state
     */
    public BigDecimal getNormalizedMeasure();

    /**
     * Sets the normalized measure of this l f objective state.
     *
     * @param normalizedMeasure the normalized measure of this l f objective state
     */
    public void setNormalizedMeasure(BigDecimal normalizedMeasure);

    /**
     * Returns the map key of this l f objective state.
     *
     * @return the map key of this l f objective state
     */
    @AutoEscape
    public String getMapKey();

    /**
     * Sets the map key of this l f objective state.
     *
     * @param mapKey the map key of this l f objective state
     */
    public void setMapKey(String mapKey);

    /**
     * Returns the activity state i d of this l f objective state.
     *
     * @return the activity state i d of this l f objective state
     */
    public Integer getActivityStateID();

    /**
     * Sets the activity state i d of this l f objective state.
     *
     * @param activityStateID the activity state i d of this l f objective state
     */
    public void setActivityStateID(Integer activityStateID);

    /**
     * Returns the objective i d of this l f objective state.
     *
     * @return the objective i d of this l f objective state
     */
    public Integer getObjectiveID();

    /**
     * Sets the objective i d of this l f objective state.
     *
     * @param objectiveID the objective i d of this l f objective state
     */
    public void setObjectiveID(Integer objectiveID);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(LFObjectiveState lfObjectiveState);

    @Override
    public int hashCode();

    @Override
    public CacheModel<LFObjectiveState> toCacheModel();

    @Override
    public LFObjectiveState toEscapedModel();

    @Override
    public LFObjectiveState toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
