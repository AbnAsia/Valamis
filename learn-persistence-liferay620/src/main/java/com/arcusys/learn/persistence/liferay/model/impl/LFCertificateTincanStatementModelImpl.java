package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFCertificateTincanStatement;
import com.arcusys.learn.persistence.liferay.model.LFCertificateTincanStatementModel;
import com.arcusys.learn.persistence.liferay.service.persistence.LFCertificateTincanStatementPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFCertificateTincanStatement service. Represents a row in the &quot;Learn_LFCertificateTincanStatement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFCertificateTincanStatementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFCertificateTincanStatementImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFCertificateTincanStatementImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFCertificateTincanStatement
 * @see com.arcusys.learn.persistence.liferay.model.LFCertificateTincanStatementModel
 * @generated
 */
public class LFCertificateTincanStatementModelImpl extends BaseModelImpl<LFCertificateTincanStatement>
    implements LFCertificateTincanStatementModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f certificate tincan statement model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFCertificateTincanStatement} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFCertificateTincanStatement";
    public static final Object[][] TABLE_COLUMNS = {
            { "certificateID", Types.BIGINT },
            { "verb", Types.VARCHAR },
            { "object", Types.VARCHAR },
            { "periodType", Types.VARCHAR },
            { "period", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFCertificateTincanStatement (certificateID LONG not null,verb VARCHAR(75) not null,object VARCHAR(75) not null,periodType VARCHAR(75) null,period INTEGER null,primary key (certificateID, verb, object))";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFCertificateTincanStatement";
    public static final String ORDER_BY_JPQL = " ORDER BY lfCertificateTincanStatement.id.certificateID ASC, lfCertificateTincanStatement.id.verb ASC, lfCertificateTincanStatement.id.object ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFCertificateTincanStatement.certificateID ASC, Learn_LFCertificateTincanStatement.verb ASC, Learn_LFCertificateTincanStatement.object ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFCertificateTincanStatement"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFCertificateTincanStatement"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFCertificateTincanStatement"),
            true);
    public static long CERTIFICATEID_COLUMN_BITMASK = 1L;
    public static long OBJECT_COLUMN_BITMASK = 2L;
    public static long VERB_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFCertificateTincanStatement"));
    private static ClassLoader _classLoader = LFCertificateTincanStatement.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFCertificateTincanStatement.class
        };
    private Long _certificateID;
    private Long _originalCertificateID;
    private boolean _setOriginalCertificateID;
    private String _verb;
    private String _originalVerb;
    private String _object;
    private String _originalObject;
    private String _periodType;
    private Integer _period;
    private long _columnBitmask;
    private LFCertificateTincanStatement _escapedModel;

    public LFCertificateTincanStatementModelImpl() {
    }

    @Override
    public LFCertificateTincanStatementPK getPrimaryKey() {
        return new LFCertificateTincanStatementPK(_certificateID, _verb, _object);
    }

    @Override
    public void setPrimaryKey(LFCertificateTincanStatementPK primaryKey) {
        setCertificateID(primaryKey.certificateID);
        setVerb(primaryKey.verb);
        setObject(primaryKey.object);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new LFCertificateTincanStatementPK(_certificateID, _verb, _object);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((LFCertificateTincanStatementPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return LFCertificateTincanStatement.class;
    }

    @Override
    public String getModelClassName() {
        return LFCertificateTincanStatement.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("certificateID", getCertificateID());
        attributes.put("verb", getVerb());
        attributes.put("object", getObject());
        attributes.put("periodType", getPeriodType());
        attributes.put("period", getPeriod());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long certificateID = (Long) attributes.get("certificateID");

        if (certificateID != null) {
            setCertificateID(certificateID);
        }

        String verb = (String) attributes.get("verb");

        if (verb != null) {
            setVerb(verb);
        }

        String object = (String) attributes.get("object");

        if (object != null) {
            setObject(object);
        }

        String periodType = (String) attributes.get("periodType");

        if (periodType != null) {
            setPeriodType(periodType);
        }

        Integer period = (Integer) attributes.get("period");

        if (period != null) {
            setPeriod(period);
        }
    }

    @Override
    public Long getCertificateID() {
        return _certificateID;
    }

    @Override
    public void setCertificateID(Long certificateID) {
        _columnBitmask |= CERTIFICATEID_COLUMN_BITMASK;

        if (!_setOriginalCertificateID) {
            _setOriginalCertificateID = true;

            _originalCertificateID = _certificateID;
        }

        _certificateID = certificateID;
    }

    public Long getOriginalCertificateID() {
        return _originalCertificateID;
    }

    @Override
    public String getVerb() {
        return _verb;
    }

    @Override
    public void setVerb(String verb) {
        _columnBitmask |= VERB_COLUMN_BITMASK;

        if (_originalVerb == null) {
            _originalVerb = _verb;
        }

        _verb = verb;
    }

    public String getOriginalVerb() {
        return _originalVerb;
    }

    @Override
    public String getObject() {
        return _object;
    }

    @Override
    public void setObject(String object) {
        _columnBitmask |= OBJECT_COLUMN_BITMASK;

        if (_originalObject == null) {
            _originalObject = _object;
        }

        _object = object;
    }

    public String getOriginalObject() {
        return _originalObject;
    }

    @Override
    public String getPeriodType() {
        return _periodType;
    }

    @Override
    public void setPeriodType(String periodType) {
        _periodType = periodType;
    }

    @Override
    public Integer getPeriod() {
        return _period;
    }

    @Override
    public void setPeriod(Integer period) {
        _period = period;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public LFCertificateTincanStatement toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFCertificateTincanStatement) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFCertificateTincanStatementImpl lfCertificateTincanStatementImpl = new LFCertificateTincanStatementImpl();

        lfCertificateTincanStatementImpl.setCertificateID(getCertificateID());
        lfCertificateTincanStatementImpl.setVerb(getVerb());
        lfCertificateTincanStatementImpl.setObject(getObject());
        lfCertificateTincanStatementImpl.setPeriodType(getPeriodType());
        lfCertificateTincanStatementImpl.setPeriod(getPeriod());

        lfCertificateTincanStatementImpl.resetOriginalValues();

        return lfCertificateTincanStatementImpl;
    }

    @Override
    public int compareTo(
        LFCertificateTincanStatement lfCertificateTincanStatement) {
        LFCertificateTincanStatementPK primaryKey = lfCertificateTincanStatement.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFCertificateTincanStatement)) {
            return false;
        }

        LFCertificateTincanStatement lfCertificateTincanStatement = (LFCertificateTincanStatement) obj;

        LFCertificateTincanStatementPK primaryKey = lfCertificateTincanStatement.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        LFCertificateTincanStatementModelImpl lfCertificateTincanStatementModelImpl =
            this;

        lfCertificateTincanStatementModelImpl._originalCertificateID = lfCertificateTincanStatementModelImpl._certificateID;

        lfCertificateTincanStatementModelImpl._setOriginalCertificateID = false;

        lfCertificateTincanStatementModelImpl._originalVerb = lfCertificateTincanStatementModelImpl._verb;

        lfCertificateTincanStatementModelImpl._originalObject = lfCertificateTincanStatementModelImpl._object;

        lfCertificateTincanStatementModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFCertificateTincanStatement> toCacheModel() {
        LFCertificateTincanStatementCacheModel lfCertificateTincanStatementCacheModel =
            new LFCertificateTincanStatementCacheModel();

        lfCertificateTincanStatementCacheModel.certificateID = getCertificateID();

        lfCertificateTincanStatementCacheModel.verb = getVerb();

        String verb = lfCertificateTincanStatementCacheModel.verb;

        if ((verb != null) && (verb.length() == 0)) {
            lfCertificateTincanStatementCacheModel.verb = null;
        }

        lfCertificateTincanStatementCacheModel.object = getObject();

        String object = lfCertificateTincanStatementCacheModel.object;

        if ((object != null) && (object.length() == 0)) {
            lfCertificateTincanStatementCacheModel.object = null;
        }

        lfCertificateTincanStatementCacheModel.periodType = getPeriodType();

        String periodType = lfCertificateTincanStatementCacheModel.periodType;

        if ((periodType != null) && (periodType.length() == 0)) {
            lfCertificateTincanStatementCacheModel.periodType = null;
        }

        lfCertificateTincanStatementCacheModel.period = getPeriod();

        return lfCertificateTincanStatementCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{certificateID=");
        sb.append(getCertificateID());
        sb.append(", verb=");
        sb.append(getVerb());
        sb.append(", object=");
        sb.append(getObject());
        sb.append(", periodType=");
        sb.append(getPeriodType());
        sb.append(", period=");
        sb.append(getPeriod());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFCertificateTincanStatement");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>certificateID</column-name><column-value><![CDATA[");
        sb.append(getCertificateID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>verb</column-name><column-value><![CDATA[");
        sb.append(getVerb());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>object</column-name><column-value><![CDATA[");
        sb.append(getObject());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>periodType</column-name><column-value><![CDATA[");
        sb.append(getPeriodType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>period</column-name><column-value><![CDATA[");
        sb.append(getPeriod());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
