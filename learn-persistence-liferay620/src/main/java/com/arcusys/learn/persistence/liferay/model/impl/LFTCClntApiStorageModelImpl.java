package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFTCClntApiStorage;
import com.arcusys.learn.persistence.liferay.model.LFTCClntApiStorageModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFTCClntApiStorage service. Represents a row in the &quot;Learn_LFTCClntApiStorage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFTCClntApiStorageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFTCClntApiStorageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFTCClntApiStorageImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFTCClntApiStorage
 * @see com.arcusys.learn.persistence.liferay.model.LFTCClntApiStorageModel
 * @generated
 */
public class LFTCClntApiStorageModelImpl extends BaseModelImpl<LFTCClntApiStorage>
    implements LFTCClntApiStorageModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f t c clnt api storage model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFTCClntApiStorage} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFTCClntApiStorage";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "secret", Types.VARCHAR },
            { "url", Types.VARCHAR },
            { "redirectUrl", Types.VARCHAR },
            { "scope", Types.VARCHAR },
            { "iconUrl", Types.VARCHAR },
            { "token", Types.VARCHAR },
            { "code_", Types.VARCHAR },
            { "issuedAt", Types.TIMESTAMP },
            { "expiredIn", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFTCClntApiStorage (id_ LONG not null primary key,name VARCHAR(75) null,description VARCHAR(75) null,secret VARCHAR(75) null,url VARCHAR(75) null,redirectUrl VARCHAR(75) null,scope VARCHAR(75) null,iconUrl VARCHAR(75) null,token VARCHAR(75) null,code_ VARCHAR(75) null,issuedAt DATE null,expiredIn LONG)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFTCClntApiStorage";
    public static final String ORDER_BY_JPQL = " ORDER BY lftcClntApiStorage.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFTCClntApiStorage.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTCClntApiStorage"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTCClntApiStorage"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFTCClntApiStorage"),
            true);
    public static long CODE_COLUMN_BITMASK = 1L;
    public static long TOKEN_COLUMN_BITMASK = 2L;
    public static long ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFTCClntApiStorage"));
    private static ClassLoader _classLoader = LFTCClntApiStorage.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFTCClntApiStorage.class
        };
    private long _id;
    private String _name;
    private String _description;
    private String _secret;
    private String _url;
    private String _redirectUrl;
    private String _scope;
    private String _iconUrl;
    private String _token;
    private String _originalToken;
    private String _code;
    private String _originalCode;
    private Date _issuedAt;
    private Long _expiredIn;
    private long _columnBitmask;
    private LFTCClntApiStorage _escapedModel;

    public LFTCClntApiStorageModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFTCClntApiStorage.class;
    }

    @Override
    public String getModelClassName() {
        return LFTCClntApiStorage.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("name", getName());
        attributes.put("description", getDescription());
        attributes.put("secret", getSecret());
        attributes.put("url", getUrl());
        attributes.put("redirectUrl", getRedirectUrl());
        attributes.put("scope", getScope());
        attributes.put("iconUrl", getIconUrl());
        attributes.put("token", getToken());
        attributes.put("code", getCode());
        attributes.put("issuedAt", getIssuedAt());
        attributes.put("expiredIn", getExpiredIn());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String secret = (String) attributes.get("secret");

        if (secret != null) {
            setSecret(secret);
        }

        String url = (String) attributes.get("url");

        if (url != null) {
            setUrl(url);
        }

        String redirectUrl = (String) attributes.get("redirectUrl");

        if (redirectUrl != null) {
            setRedirectUrl(redirectUrl);
        }

        String scope = (String) attributes.get("scope");

        if (scope != null) {
            setScope(scope);
        }

        String iconUrl = (String) attributes.get("iconUrl");

        if (iconUrl != null) {
            setIconUrl(iconUrl);
        }

        String token = (String) attributes.get("token");

        if (token != null) {
            setToken(token);
        }

        String code = (String) attributes.get("code");

        if (code != null) {
            setCode(code);
        }

        Date issuedAt = (Date) attributes.get("issuedAt");

        if (issuedAt != null) {
            setIssuedAt(issuedAt);
        }

        Long expiredIn = (Long) attributes.get("expiredIn");

        if (expiredIn != null) {
            setExpiredIn(expiredIn);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public String getName() {
        return _name;
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public String getSecret() {
        return _secret;
    }

    @Override
    public void setSecret(String secret) {
        _secret = secret;
    }

    @Override
    public String getUrl() {
        if (_url == null) {
            return StringPool.BLANK;
        } else {
            return _url;
        }
    }

    @Override
    public void setUrl(String url) {
        _url = url;
    }

    @Override
    public String getRedirectUrl() {
        if (_redirectUrl == null) {
            return StringPool.BLANK;
        } else {
            return _redirectUrl;
        }
    }

    @Override
    public void setRedirectUrl(String redirectUrl) {
        _redirectUrl = redirectUrl;
    }

    @Override
    public String getScope() {
        return _scope;
    }

    @Override
    public void setScope(String scope) {
        _scope = scope;
    }

    @Override
    public String getIconUrl() {
        if (_iconUrl == null) {
            return StringPool.BLANK;
        } else {
            return _iconUrl;
        }
    }

    @Override
    public void setIconUrl(String iconUrl) {
        _iconUrl = iconUrl;
    }

    @Override
    public String getToken() {
        if (_token == null) {
            return StringPool.BLANK;
        } else {
            return _token;
        }
    }

    @Override
    public void setToken(String token) {
        _columnBitmask |= TOKEN_COLUMN_BITMASK;

        if (_originalToken == null) {
            _originalToken = _token;
        }

        _token = token;
    }

    public String getOriginalToken() {
        return GetterUtil.getString(_originalToken);
    }

    @Override
    public String getCode() {
        if (_code == null) {
            return StringPool.BLANK;
        } else {
            return _code;
        }
    }

    @Override
    public void setCode(String code) {
        _columnBitmask |= CODE_COLUMN_BITMASK;

        if (_originalCode == null) {
            _originalCode = _code;
        }

        _code = code;
    }

    public String getOriginalCode() {
        return GetterUtil.getString(_originalCode);
    }

    @Override
    public Date getIssuedAt() {
        return _issuedAt;
    }

    @Override
    public void setIssuedAt(Date issuedAt) {
        _issuedAt = issuedAt;
    }

    @Override
    public Long getExpiredIn() {
        return _expiredIn;
    }

    @Override
    public void setExpiredIn(Long expiredIn) {
        _expiredIn = expiredIn;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFTCClntApiStorage.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFTCClntApiStorage toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFTCClntApiStorage) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFTCClntApiStorageImpl lftcClntApiStorageImpl = new LFTCClntApiStorageImpl();

        lftcClntApiStorageImpl.setId(getId());
        lftcClntApiStorageImpl.setName(getName());
        lftcClntApiStorageImpl.setDescription(getDescription());
        lftcClntApiStorageImpl.setSecret(getSecret());
        lftcClntApiStorageImpl.setUrl(getUrl());
        lftcClntApiStorageImpl.setRedirectUrl(getRedirectUrl());
        lftcClntApiStorageImpl.setScope(getScope());
        lftcClntApiStorageImpl.setIconUrl(getIconUrl());
        lftcClntApiStorageImpl.setToken(getToken());
        lftcClntApiStorageImpl.setCode(getCode());
        lftcClntApiStorageImpl.setIssuedAt(getIssuedAt());
        lftcClntApiStorageImpl.setExpiredIn(getExpiredIn());

        lftcClntApiStorageImpl.resetOriginalValues();

        return lftcClntApiStorageImpl;
    }

    @Override
    public int compareTo(LFTCClntApiStorage lftcClntApiStorage) {
        long primaryKey = lftcClntApiStorage.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFTCClntApiStorage)) {
            return false;
        }

        LFTCClntApiStorage lftcClntApiStorage = (LFTCClntApiStorage) obj;

        long primaryKey = lftcClntApiStorage.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFTCClntApiStorageModelImpl lftcClntApiStorageModelImpl = this;

        lftcClntApiStorageModelImpl._originalToken = lftcClntApiStorageModelImpl._token;

        lftcClntApiStorageModelImpl._originalCode = lftcClntApiStorageModelImpl._code;

        lftcClntApiStorageModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFTCClntApiStorage> toCacheModel() {
        LFTCClntApiStorageCacheModel lftcClntApiStorageCacheModel = new LFTCClntApiStorageCacheModel();

        lftcClntApiStorageCacheModel.id = getId();

        lftcClntApiStorageCacheModel.name = getName();

        String name = lftcClntApiStorageCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            lftcClntApiStorageCacheModel.name = null;
        }

        lftcClntApiStorageCacheModel.description = getDescription();

        String description = lftcClntApiStorageCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            lftcClntApiStorageCacheModel.description = null;
        }

        lftcClntApiStorageCacheModel.secret = getSecret();

        String secret = lftcClntApiStorageCacheModel.secret;

        if ((secret != null) && (secret.length() == 0)) {
            lftcClntApiStorageCacheModel.secret = null;
        }

        lftcClntApiStorageCacheModel.url = getUrl();

        String url = lftcClntApiStorageCacheModel.url;

        if ((url != null) && (url.length() == 0)) {
            lftcClntApiStorageCacheModel.url = null;
        }

        lftcClntApiStorageCacheModel.redirectUrl = getRedirectUrl();

        String redirectUrl = lftcClntApiStorageCacheModel.redirectUrl;

        if ((redirectUrl != null) && (redirectUrl.length() == 0)) {
            lftcClntApiStorageCacheModel.redirectUrl = null;
        }

        lftcClntApiStorageCacheModel.scope = getScope();

        String scope = lftcClntApiStorageCacheModel.scope;

        if ((scope != null) && (scope.length() == 0)) {
            lftcClntApiStorageCacheModel.scope = null;
        }

        lftcClntApiStorageCacheModel.iconUrl = getIconUrl();

        String iconUrl = lftcClntApiStorageCacheModel.iconUrl;

        if ((iconUrl != null) && (iconUrl.length() == 0)) {
            lftcClntApiStorageCacheModel.iconUrl = null;
        }

        lftcClntApiStorageCacheModel.token = getToken();

        String token = lftcClntApiStorageCacheModel.token;

        if ((token != null) && (token.length() == 0)) {
            lftcClntApiStorageCacheModel.token = null;
        }

        lftcClntApiStorageCacheModel.code = getCode();

        String code = lftcClntApiStorageCacheModel.code;

        if ((code != null) && (code.length() == 0)) {
            lftcClntApiStorageCacheModel.code = null;
        }

        Date issuedAt = getIssuedAt();

        if (issuedAt != null) {
            lftcClntApiStorageCacheModel.issuedAt = issuedAt.getTime();
        } else {
            lftcClntApiStorageCacheModel.issuedAt = Long.MIN_VALUE;
        }

        lftcClntApiStorageCacheModel.expiredIn = getExpiredIn();

        return lftcClntApiStorageCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", secret=");
        sb.append(getSecret());
        sb.append(", url=");
        sb.append(getUrl());
        sb.append(", redirectUrl=");
        sb.append(getRedirectUrl());
        sb.append(", scope=");
        sb.append(getScope());
        sb.append(", iconUrl=");
        sb.append(getIconUrl());
        sb.append(", token=");
        sb.append(getToken());
        sb.append(", code=");
        sb.append(getCode());
        sb.append(", issuedAt=");
        sb.append(getIssuedAt());
        sb.append(", expiredIn=");
        sb.append(getExpiredIn());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFTCClntApiStorage");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>secret</column-name><column-value><![CDATA[");
        sb.append(getSecret());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>url</column-name><column-value><![CDATA[");
        sb.append(getUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>redirectUrl</column-name><column-value><![CDATA[");
        sb.append(getRedirectUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>scope</column-name><column-value><![CDATA[");
        sb.append(getScope());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>iconUrl</column-name><column-value><![CDATA[");
        sb.append(getIconUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>token</column-name><column-value><![CDATA[");
        sb.append(getToken());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>code</column-name><column-value><![CDATA[");
        sb.append(getCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>issuedAt</column-name><column-value><![CDATA[");
        sb.append(getIssuedAt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>expiredIn</column-name><column-value><![CDATA[");
        sb.append(getExpiredIn());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
