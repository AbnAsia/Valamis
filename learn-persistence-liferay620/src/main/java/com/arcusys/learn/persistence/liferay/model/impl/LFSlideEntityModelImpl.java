package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFSlideEntity;
import com.arcusys.learn.persistence.liferay.model.LFSlideEntityModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFSlideEntity service. Represents a row in the &quot;Learn_LFSlideEntity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFSlideEntityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFSlideEntityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFSlideEntityImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFSlideEntity
 * @see com.arcusys.learn.persistence.liferay.model.LFSlideEntityModel
 * @generated
 */
public class LFSlideEntityModelImpl extends BaseModelImpl<LFSlideEntity>
    implements LFSlideEntityModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f slide entity model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFSlideEntity} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFSlideEntity";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "top_", Types.VARCHAR },
            { "left_", Types.VARCHAR },
            { "width", Types.VARCHAR },
            { "height", Types.VARCHAR },
            { "zIndex", Types.VARCHAR },
            { "content", Types.CLOB },
            { "entityType", Types.VARCHAR },
            { "slideId", Types.BIGINT },
            { "correctLinkedSlideId", Types.BIGINT },
            { "incorrectLinkedSlideId", Types.BIGINT },
            { "notifyCorrectAnswer", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFSlideEntity (id_ LONG not null primary key,top_ VARCHAR(75) null,left_ VARCHAR(75) null,width VARCHAR(75) null,height VARCHAR(75) null,zIndex VARCHAR(75) null,content TEXT null,entityType VARCHAR(75) null,slideId LONG null,correctLinkedSlideId LONG null,incorrectLinkedSlideId LONG null,notifyCorrectAnswer BOOLEAN null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFSlideEntity";
    public static final String ORDER_BY_JPQL = " ORDER BY lfSlideEntity.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFSlideEntity.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFSlideEntity"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFSlideEntity"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFSlideEntity"));
    private static ClassLoader _classLoader = LFSlideEntity.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFSlideEntity.class
        };
    private long _id;
    private String _top;
    private String _left;
    private String _width;
    private String _height;
    private String _zIndex;
    private String _content;
    private String _entityType;
    private Long _slideId;
    private Long _correctLinkedSlideId;
    private Long _incorrectLinkedSlideId;
    private Boolean _notifyCorrectAnswer;
    private LFSlideEntity _escapedModel;

    public LFSlideEntityModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFSlideEntity.class;
    }

    @Override
    public String getModelClassName() {
        return LFSlideEntity.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("top", getTop());
        attributes.put("left", getLeft());
        attributes.put("width", getWidth());
        attributes.put("height", getHeight());
        attributes.put("zIndex", getZIndex());
        attributes.put("content", getContent());
        attributes.put("entityType", getEntityType());
        attributes.put("slideId", getSlideId());
        attributes.put("correctLinkedSlideId", getCorrectLinkedSlideId());
        attributes.put("incorrectLinkedSlideId", getIncorrectLinkedSlideId());
        attributes.put("notifyCorrectAnswer", getNotifyCorrectAnswer());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String top = (String) attributes.get("top");

        if (top != null) {
            setTop(top);
        }

        String left = (String) attributes.get("left");

        if (left != null) {
            setLeft(left);
        }

        String width = (String) attributes.get("width");

        if (width != null) {
            setWidth(width);
        }

        String height = (String) attributes.get("height");

        if (height != null) {
            setHeight(height);
        }

        String zIndex = (String) attributes.get("zIndex");

        if (zIndex != null) {
            setZIndex(zIndex);
        }

        String content = (String) attributes.get("content");

        if (content != null) {
            setContent(content);
        }

        String entityType = (String) attributes.get("entityType");

        if (entityType != null) {
            setEntityType(entityType);
        }

        Long slideId = (Long) attributes.get("slideId");

        if (slideId != null) {
            setSlideId(slideId);
        }

        Long correctLinkedSlideId = (Long) attributes.get(
                "correctLinkedSlideId");

        if (correctLinkedSlideId != null) {
            setCorrectLinkedSlideId(correctLinkedSlideId);
        }

        Long incorrectLinkedSlideId = (Long) attributes.get(
                "incorrectLinkedSlideId");

        if (incorrectLinkedSlideId != null) {
            setIncorrectLinkedSlideId(incorrectLinkedSlideId);
        }

        Boolean notifyCorrectAnswer = (Boolean) attributes.get(
                "notifyCorrectAnswer");

        if (notifyCorrectAnswer != null) {
            setNotifyCorrectAnswer(notifyCorrectAnswer);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public String getTop() {
        return _top;
    }

    @Override
    public void setTop(String top) {
        _top = top;
    }

    @Override
    public String getLeft() {
        return _left;
    }

    @Override
    public void setLeft(String left) {
        _left = left;
    }

    @Override
    public String getWidth() {
        return _width;
    }

    @Override
    public void setWidth(String width) {
        _width = width;
    }

    @Override
    public String getHeight() {
        return _height;
    }

    @Override
    public void setHeight(String height) {
        _height = height;
    }

    @Override
    public String getZIndex() {
        return _zIndex;
    }

    @Override
    public void setZIndex(String zIndex) {
        _zIndex = zIndex;
    }

    @Override
    public String getContent() {
        return _content;
    }

    @Override
    public void setContent(String content) {
        _content = content;
    }

    @Override
    public String getEntityType() {
        return _entityType;
    }

    @Override
    public void setEntityType(String entityType) {
        _entityType = entityType;
    }

    @Override
    public Long getSlideId() {
        return _slideId;
    }

    @Override
    public void setSlideId(Long slideId) {
        _slideId = slideId;
    }

    @Override
    public Long getCorrectLinkedSlideId() {
        return _correctLinkedSlideId;
    }

    @Override
    public void setCorrectLinkedSlideId(Long correctLinkedSlideId) {
        _correctLinkedSlideId = correctLinkedSlideId;
    }

    @Override
    public Long getIncorrectLinkedSlideId() {
        return _incorrectLinkedSlideId;
    }

    @Override
    public void setIncorrectLinkedSlideId(Long incorrectLinkedSlideId) {
        _incorrectLinkedSlideId = incorrectLinkedSlideId;
    }

    @Override
    public Boolean getNotifyCorrectAnswer() {
        return _notifyCorrectAnswer;
    }

    @Override
    public void setNotifyCorrectAnswer(Boolean notifyCorrectAnswer) {
        _notifyCorrectAnswer = notifyCorrectAnswer;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFSlideEntity.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFSlideEntity toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFSlideEntity) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFSlideEntityImpl lfSlideEntityImpl = new LFSlideEntityImpl();

        lfSlideEntityImpl.setId(getId());
        lfSlideEntityImpl.setTop(getTop());
        lfSlideEntityImpl.setLeft(getLeft());
        lfSlideEntityImpl.setWidth(getWidth());
        lfSlideEntityImpl.setHeight(getHeight());
        lfSlideEntityImpl.setZIndex(getZIndex());
        lfSlideEntityImpl.setContent(getContent());
        lfSlideEntityImpl.setEntityType(getEntityType());
        lfSlideEntityImpl.setSlideId(getSlideId());
        lfSlideEntityImpl.setCorrectLinkedSlideId(getCorrectLinkedSlideId());
        lfSlideEntityImpl.setIncorrectLinkedSlideId(getIncorrectLinkedSlideId());
        lfSlideEntityImpl.setNotifyCorrectAnswer(getNotifyCorrectAnswer());

        lfSlideEntityImpl.resetOriginalValues();

        return lfSlideEntityImpl;
    }

    @Override
    public int compareTo(LFSlideEntity lfSlideEntity) {
        long primaryKey = lfSlideEntity.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFSlideEntity)) {
            return false;
        }

        LFSlideEntity lfSlideEntity = (LFSlideEntity) obj;

        long primaryKey = lfSlideEntity.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<LFSlideEntity> toCacheModel() {
        LFSlideEntityCacheModel lfSlideEntityCacheModel = new LFSlideEntityCacheModel();

        lfSlideEntityCacheModel.id = getId();

        lfSlideEntityCacheModel.top = getTop();

        String top = lfSlideEntityCacheModel.top;

        if ((top != null) && (top.length() == 0)) {
            lfSlideEntityCacheModel.top = null;
        }

        lfSlideEntityCacheModel.left = getLeft();

        String left = lfSlideEntityCacheModel.left;

        if ((left != null) && (left.length() == 0)) {
            lfSlideEntityCacheModel.left = null;
        }

        lfSlideEntityCacheModel.width = getWidth();

        String width = lfSlideEntityCacheModel.width;

        if ((width != null) && (width.length() == 0)) {
            lfSlideEntityCacheModel.width = null;
        }

        lfSlideEntityCacheModel.height = getHeight();

        String height = lfSlideEntityCacheModel.height;

        if ((height != null) && (height.length() == 0)) {
            lfSlideEntityCacheModel.height = null;
        }

        lfSlideEntityCacheModel.zIndex = getZIndex();

        String zIndex = lfSlideEntityCacheModel.zIndex;

        if ((zIndex != null) && (zIndex.length() == 0)) {
            lfSlideEntityCacheModel.zIndex = null;
        }

        lfSlideEntityCacheModel.content = getContent();

        String content = lfSlideEntityCacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            lfSlideEntityCacheModel.content = null;
        }

        lfSlideEntityCacheModel.entityType = getEntityType();

        String entityType = lfSlideEntityCacheModel.entityType;

        if ((entityType != null) && (entityType.length() == 0)) {
            lfSlideEntityCacheModel.entityType = null;
        }

        lfSlideEntityCacheModel.slideId = getSlideId();

        lfSlideEntityCacheModel.correctLinkedSlideId = getCorrectLinkedSlideId();

        lfSlideEntityCacheModel.incorrectLinkedSlideId = getIncorrectLinkedSlideId();

        lfSlideEntityCacheModel.notifyCorrectAnswer = getNotifyCorrectAnswer();

        return lfSlideEntityCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", top=");
        sb.append(getTop());
        sb.append(", left=");
        sb.append(getLeft());
        sb.append(", width=");
        sb.append(getWidth());
        sb.append(", height=");
        sb.append(getHeight());
        sb.append(", zIndex=");
        sb.append(getZIndex());
        sb.append(", content=");
        sb.append(getContent());
        sb.append(", entityType=");
        sb.append(getEntityType());
        sb.append(", slideId=");
        sb.append(getSlideId());
        sb.append(", correctLinkedSlideId=");
        sb.append(getCorrectLinkedSlideId());
        sb.append(", incorrectLinkedSlideId=");
        sb.append(getIncorrectLinkedSlideId());
        sb.append(", notifyCorrectAnswer=");
        sb.append(getNotifyCorrectAnswer());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.arcusys.learn.persistence.liferay.model.LFSlideEntity");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>top</column-name><column-value><![CDATA[");
        sb.append(getTop());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>left</column-name><column-value><![CDATA[");
        sb.append(getLeft());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>width</column-name><column-value><![CDATA[");
        sb.append(getWidth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>height</column-name><column-value><![CDATA[");
        sb.append(getHeight());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>zIndex</column-name><column-value><![CDATA[");
        sb.append(getZIndex());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>entityType</column-name><column-value><![CDATA[");
        sb.append(getEntityType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>slideId</column-name><column-value><![CDATA[");
        sb.append(getSlideId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>correctLinkedSlideId</column-name><column-value><![CDATA[");
        sb.append(getCorrectLinkedSlideId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>incorrectLinkedSlideId</column-name><column-value><![CDATA[");
        sb.append(getIncorrectLinkedSlideId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>notifyCorrectAnswer</column-name><column-value><![CDATA[");
        sb.append(getNotifyCorrectAnswer());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
