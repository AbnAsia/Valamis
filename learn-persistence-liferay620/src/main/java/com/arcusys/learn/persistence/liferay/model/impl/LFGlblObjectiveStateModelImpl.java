package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFGlblObjectiveState;
import com.arcusys.learn.persistence.liferay.model.LFGlblObjectiveStateModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.math.BigDecimal;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFGlblObjectiveState service. Represents a row in the &quot;Learn_LFGlblObjectiveState&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFGlblObjectiveStateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFGlblObjectiveStateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFGlblObjectiveStateImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFGlblObjectiveState
 * @see com.arcusys.learn.persistence.liferay.model.LFGlblObjectiveStateModel
 * @generated
 */
public class LFGlblObjectiveStateModelImpl extends BaseModelImpl<LFGlblObjectiveState>
    implements LFGlblObjectiveStateModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f glbl objective state model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFGlblObjectiveState} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFGlblObjectiveState";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "satisfied", Types.BOOLEAN },
            { "normalizedMeasure", Types.NUMERIC },
            { "attemptCompleted", Types.BOOLEAN },
            { "mapKey", Types.VARCHAR },
            { "treeID", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFGlblObjectiveState (id_ LONG not null primary key,satisfied BOOLEAN null,normalizedMeasure NUMERIC(20,2),attemptCompleted BOOLEAN null,mapKey VARCHAR(75) null,treeID INTEGER null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFGlblObjectiveState";
    public static final String ORDER_BY_JPQL = " ORDER BY lfGlblObjectiveState.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFGlblObjectiveState.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFGlblObjectiveState"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFGlblObjectiveState"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFGlblObjectiveState"),
            true);
    public static long MAPKEY_COLUMN_BITMASK = 1L;
    public static long TREEID_COLUMN_BITMASK = 2L;
    public static long ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFGlblObjectiveState"));
    private static ClassLoader _classLoader = LFGlblObjectiveState.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFGlblObjectiveState.class
        };
    private long _id;
    private Boolean _satisfied;
    private BigDecimal _normalizedMeasure;
    private Boolean _attemptCompleted;
    private String _mapKey;
    private String _originalMapKey;
    private Integer _treeID;
    private Integer _originalTreeID;
    private boolean _setOriginalTreeID;
    private long _columnBitmask;
    private LFGlblObjectiveState _escapedModel;

    public LFGlblObjectiveStateModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFGlblObjectiveState.class;
    }

    @Override
    public String getModelClassName() {
        return LFGlblObjectiveState.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("satisfied", getSatisfied());
        attributes.put("normalizedMeasure", getNormalizedMeasure());
        attributes.put("attemptCompleted", getAttemptCompleted());
        attributes.put("mapKey", getMapKey());
        attributes.put("treeID", getTreeID());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Boolean satisfied = (Boolean) attributes.get("satisfied");

        if (satisfied != null) {
            setSatisfied(satisfied);
        }

        BigDecimal normalizedMeasure = (BigDecimal) attributes.get(
                "normalizedMeasure");

        if (normalizedMeasure != null) {
            setNormalizedMeasure(normalizedMeasure);
        }

        Boolean attemptCompleted = (Boolean) attributes.get("attemptCompleted");

        if (attemptCompleted != null) {
            setAttemptCompleted(attemptCompleted);
        }

        String mapKey = (String) attributes.get("mapKey");

        if (mapKey != null) {
            setMapKey(mapKey);
        }

        Integer treeID = (Integer) attributes.get("treeID");

        if (treeID != null) {
            setTreeID(treeID);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public Boolean getSatisfied() {
        return _satisfied;
    }

    @Override
    public void setSatisfied(Boolean satisfied) {
        _satisfied = satisfied;
    }

    @Override
    public BigDecimal getNormalizedMeasure() {
        return _normalizedMeasure;
    }

    @Override
    public void setNormalizedMeasure(BigDecimal normalizedMeasure) {
        _normalizedMeasure = normalizedMeasure;
    }

    @Override
    public Boolean getAttemptCompleted() {
        return _attemptCompleted;
    }

    @Override
    public void setAttemptCompleted(Boolean attemptCompleted) {
        _attemptCompleted = attemptCompleted;
    }

    @Override
    public String getMapKey() {
        return _mapKey;
    }

    @Override
    public void setMapKey(String mapKey) {
        _columnBitmask |= MAPKEY_COLUMN_BITMASK;

        if (_originalMapKey == null) {
            _originalMapKey = _mapKey;
        }

        _mapKey = mapKey;
    }

    public String getOriginalMapKey() {
        return _originalMapKey;
    }

    @Override
    public Integer getTreeID() {
        return _treeID;
    }

    @Override
    public void setTreeID(Integer treeID) {
        _columnBitmask |= TREEID_COLUMN_BITMASK;

        if (!_setOriginalTreeID) {
            _setOriginalTreeID = true;

            _originalTreeID = _treeID;
        }

        _treeID = treeID;
    }

    public Integer getOriginalTreeID() {
        return _originalTreeID;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFGlblObjectiveState.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFGlblObjectiveState toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFGlblObjectiveState) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFGlblObjectiveStateImpl lfGlblObjectiveStateImpl = new LFGlblObjectiveStateImpl();

        lfGlblObjectiveStateImpl.setId(getId());
        lfGlblObjectiveStateImpl.setSatisfied(getSatisfied());
        lfGlblObjectiveStateImpl.setNormalizedMeasure(getNormalizedMeasure());
        lfGlblObjectiveStateImpl.setAttemptCompleted(getAttemptCompleted());
        lfGlblObjectiveStateImpl.setMapKey(getMapKey());
        lfGlblObjectiveStateImpl.setTreeID(getTreeID());

        lfGlblObjectiveStateImpl.resetOriginalValues();

        return lfGlblObjectiveStateImpl;
    }

    @Override
    public int compareTo(LFGlblObjectiveState lfGlblObjectiveState) {
        long primaryKey = lfGlblObjectiveState.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFGlblObjectiveState)) {
            return false;
        }

        LFGlblObjectiveState lfGlblObjectiveState = (LFGlblObjectiveState) obj;

        long primaryKey = lfGlblObjectiveState.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFGlblObjectiveStateModelImpl lfGlblObjectiveStateModelImpl = this;

        lfGlblObjectiveStateModelImpl._originalMapKey = lfGlblObjectiveStateModelImpl._mapKey;

        lfGlblObjectiveStateModelImpl._originalTreeID = lfGlblObjectiveStateModelImpl._treeID;

        lfGlblObjectiveStateModelImpl._setOriginalTreeID = false;

        lfGlblObjectiveStateModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFGlblObjectiveState> toCacheModel() {
        LFGlblObjectiveStateCacheModel lfGlblObjectiveStateCacheModel = new LFGlblObjectiveStateCacheModel();

        lfGlblObjectiveStateCacheModel.id = getId();

        lfGlblObjectiveStateCacheModel.satisfied = getSatisfied();

        lfGlblObjectiveStateCacheModel.normalizedMeasure = getNormalizedMeasure();

        lfGlblObjectiveStateCacheModel.attemptCompleted = getAttemptCompleted();

        lfGlblObjectiveStateCacheModel.mapKey = getMapKey();

        String mapKey = lfGlblObjectiveStateCacheModel.mapKey;

        if ((mapKey != null) && (mapKey.length() == 0)) {
            lfGlblObjectiveStateCacheModel.mapKey = null;
        }

        lfGlblObjectiveStateCacheModel.treeID = getTreeID();

        return lfGlblObjectiveStateCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", satisfied=");
        sb.append(getSatisfied());
        sb.append(", normalizedMeasure=");
        sb.append(getNormalizedMeasure());
        sb.append(", attemptCompleted=");
        sb.append(getAttemptCompleted());
        sb.append(", mapKey=");
        sb.append(getMapKey());
        sb.append(", treeID=");
        sb.append(getTreeID());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFGlblObjectiveState");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>satisfied</column-name><column-value><![CDATA[");
        sb.append(getSatisfied());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>normalizedMeasure</column-name><column-value><![CDATA[");
        sb.append(getNormalizedMeasure());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>attemptCompleted</column-name><column-value><![CDATA[");
        sb.append(getAttemptCompleted());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mapKey</column-name><column-value><![CDATA[");
        sb.append(getMapKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>treeID</column-name><column-value><![CDATA[");
        sb.append(getTreeID());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
