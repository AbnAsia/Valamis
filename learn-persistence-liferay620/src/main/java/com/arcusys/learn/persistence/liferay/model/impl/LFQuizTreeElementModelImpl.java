package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFQuizTreeElement;
import com.arcusys.learn.persistence.liferay.model.LFQuizTreeElementModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFQuizTreeElement service. Represents a row in the &quot;Learn_LFQuizTreeElement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFQuizTreeElementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFQuizTreeElementImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFQuizTreeElementImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFQuizTreeElement
 * @see com.arcusys.learn.persistence.liferay.model.LFQuizTreeElementModel
 * @generated
 */
public class LFQuizTreeElementModelImpl extends BaseModelImpl<LFQuizTreeElement>
    implements LFQuizTreeElementModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f quiz tree element model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFQuizTreeElement} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFQuizTreeElement";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "quizID", Types.INTEGER },
            { "elementID", Types.VARCHAR },
            { "isCategory", Types.BOOLEAN },
            { "parentID", Types.VARCHAR },
            { "arrangementIndex", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFQuizTreeElement (id_ LONG not null primary key,quizID INTEGER null,elementID VARCHAR(75) null,isCategory BOOLEAN null,parentID VARCHAR(75) null,arrangementIndex INTEGER null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFQuizTreeElement";
    public static final String ORDER_BY_JPQL = " ORDER BY lfQuizTreeElement.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFQuizTreeElement.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFQuizTreeElement"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFQuizTreeElement"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFQuizTreeElement"),
            true);
    public static long ELEMENTID_COLUMN_BITMASK = 1L;
    public static long PARENTID_COLUMN_BITMASK = 2L;
    public static long QUIZID_COLUMN_BITMASK = 4L;
    public static long ID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFQuizTreeElement"));
    private static ClassLoader _classLoader = LFQuizTreeElement.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFQuizTreeElement.class
        };
    private long _id;
    private Integer _quizID;
    private Integer _originalQuizID;
    private boolean _setOriginalQuizID;
    private String _elementID;
    private String _originalElementID;
    private Boolean _isCategory;
    private String _parentID;
    private String _originalParentID;
    private Integer _arrangementIndex;
    private long _columnBitmask;
    private LFQuizTreeElement _escapedModel;

    public LFQuizTreeElementModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFQuizTreeElement.class;
    }

    @Override
    public String getModelClassName() {
        return LFQuizTreeElement.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("quizID", getQuizID());
        attributes.put("elementID", getElementID());
        attributes.put("isCategory", getIsCategory());
        attributes.put("parentID", getParentID());
        attributes.put("arrangementIndex", getArrangementIndex());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer quizID = (Integer) attributes.get("quizID");

        if (quizID != null) {
            setQuizID(quizID);
        }

        String elementID = (String) attributes.get("elementID");

        if (elementID != null) {
            setElementID(elementID);
        }

        Boolean isCategory = (Boolean) attributes.get("isCategory");

        if (isCategory != null) {
            setIsCategory(isCategory);
        }

        String parentID = (String) attributes.get("parentID");

        if (parentID != null) {
            setParentID(parentID);
        }

        Integer arrangementIndex = (Integer) attributes.get("arrangementIndex");

        if (arrangementIndex != null) {
            setArrangementIndex(arrangementIndex);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public Integer getQuizID() {
        return _quizID;
    }

    @Override
    public void setQuizID(Integer quizID) {
        _columnBitmask |= QUIZID_COLUMN_BITMASK;

        if (!_setOriginalQuizID) {
            _setOriginalQuizID = true;

            _originalQuizID = _quizID;
        }

        _quizID = quizID;
    }

    public Integer getOriginalQuizID() {
        return _originalQuizID;
    }

    @Override
    public String getElementID() {
        return _elementID;
    }

    @Override
    public void setElementID(String elementID) {
        _columnBitmask |= ELEMENTID_COLUMN_BITMASK;

        if (_originalElementID == null) {
            _originalElementID = _elementID;
        }

        _elementID = elementID;
    }

    public String getOriginalElementID() {
        return _originalElementID;
    }

    @Override
    public Boolean getIsCategory() {
        return _isCategory;
    }

    @Override
    public void setIsCategory(Boolean isCategory) {
        _isCategory = isCategory;
    }

    @Override
    public String getParentID() {
        return _parentID;
    }

    @Override
    public void setParentID(String parentID) {
        _columnBitmask |= PARENTID_COLUMN_BITMASK;

        if (_originalParentID == null) {
            _originalParentID = _parentID;
        }

        _parentID = parentID;
    }

    public String getOriginalParentID() {
        return _originalParentID;
    }

    @Override
    public Integer getArrangementIndex() {
        return _arrangementIndex;
    }

    @Override
    public void setArrangementIndex(Integer arrangementIndex) {
        _arrangementIndex = arrangementIndex;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFQuizTreeElement.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFQuizTreeElement toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFQuizTreeElement) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFQuizTreeElementImpl lfQuizTreeElementImpl = new LFQuizTreeElementImpl();

        lfQuizTreeElementImpl.setId(getId());
        lfQuizTreeElementImpl.setQuizID(getQuizID());
        lfQuizTreeElementImpl.setElementID(getElementID());
        lfQuizTreeElementImpl.setIsCategory(getIsCategory());
        lfQuizTreeElementImpl.setParentID(getParentID());
        lfQuizTreeElementImpl.setArrangementIndex(getArrangementIndex());

        lfQuizTreeElementImpl.resetOriginalValues();

        return lfQuizTreeElementImpl;
    }

    @Override
    public int compareTo(LFQuizTreeElement lfQuizTreeElement) {
        long primaryKey = lfQuizTreeElement.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFQuizTreeElement)) {
            return false;
        }

        LFQuizTreeElement lfQuizTreeElement = (LFQuizTreeElement) obj;

        long primaryKey = lfQuizTreeElement.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFQuizTreeElementModelImpl lfQuizTreeElementModelImpl = this;

        lfQuizTreeElementModelImpl._originalQuizID = lfQuizTreeElementModelImpl._quizID;

        lfQuizTreeElementModelImpl._setOriginalQuizID = false;

        lfQuizTreeElementModelImpl._originalElementID = lfQuizTreeElementModelImpl._elementID;

        lfQuizTreeElementModelImpl._originalParentID = lfQuizTreeElementModelImpl._parentID;

        lfQuizTreeElementModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFQuizTreeElement> toCacheModel() {
        LFQuizTreeElementCacheModel lfQuizTreeElementCacheModel = new LFQuizTreeElementCacheModel();

        lfQuizTreeElementCacheModel.id = getId();

        lfQuizTreeElementCacheModel.quizID = getQuizID();

        lfQuizTreeElementCacheModel.elementID = getElementID();

        String elementID = lfQuizTreeElementCacheModel.elementID;

        if ((elementID != null) && (elementID.length() == 0)) {
            lfQuizTreeElementCacheModel.elementID = null;
        }

        lfQuizTreeElementCacheModel.isCategory = getIsCategory();

        lfQuizTreeElementCacheModel.parentID = getParentID();

        String parentID = lfQuizTreeElementCacheModel.parentID;

        if ((parentID != null) && (parentID.length() == 0)) {
            lfQuizTreeElementCacheModel.parentID = null;
        }

        lfQuizTreeElementCacheModel.arrangementIndex = getArrangementIndex();

        return lfQuizTreeElementCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", quizID=");
        sb.append(getQuizID());
        sb.append(", elementID=");
        sb.append(getElementID());
        sb.append(", isCategory=");
        sb.append(getIsCategory());
        sb.append(", parentID=");
        sb.append(getParentID());
        sb.append(", arrangementIndex=");
        sb.append(getArrangementIndex());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFQuizTreeElement");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>quizID</column-name><column-value><![CDATA[");
        sb.append(getQuizID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>elementID</column-name><column-value><![CDATA[");
        sb.append(getElementID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isCategory</column-name><column-value><![CDATA[");
        sb.append(getIsCategory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentID</column-name><column-value><![CDATA[");
        sb.append(getParentID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>arrangementIndex</column-name><column-value><![CDATA[");
        sb.append(getArrangementIndex());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
