package com.arcusys.learn.persistence.liferay.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.math.BigDecimal;

/**
 * The base model interface for the LFRuleCondition service. Represents a row in the &quot;Learn_LFRuleCondition&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.arcusys.learn.persistence.liferay.model.impl.LFRuleConditionModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.arcusys.learn.persistence.liferay.model.impl.LFRuleConditionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFRuleCondition
 * @see com.arcusys.learn.persistence.liferay.model.impl.LFRuleConditionImpl
 * @see com.arcusys.learn.persistence.liferay.model.impl.LFRuleConditionModelImpl
 * @generated
 */
public interface LFRuleConditionModel extends BaseModel<LFRuleCondition> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a l f rule condition model instance should use the {@link LFRuleCondition} interface instead.
     */

    /**
     * Returns the primary key of this l f rule condition.
     *
     * @return the primary key of this l f rule condition
     */
    public long getPrimaryKey();

    /**
     * Sets the primary key of this l f rule condition.
     *
     * @param primaryKey the primary key of this l f rule condition
     */
    public void setPrimaryKey(long primaryKey);

    /**
     * Returns the ID of this l f rule condition.
     *
     * @return the ID of this l f rule condition
     */
    public long getId();

    /**
     * Sets the ID of this l f rule condition.
     *
     * @param id the ID of this l f rule condition
     */
    public void setId(long id);

    /**
     * Returns the condition type of this l f rule condition.
     *
     * @return the condition type of this l f rule condition
     */
    @AutoEscape
    public String getConditionType();

    /**
     * Sets the condition type of this l f rule condition.
     *
     * @param conditionType the condition type of this l f rule condition
     */
    public void setConditionType(String conditionType);

    /**
     * Returns the objective ID of this l f rule condition.
     *
     * @return the objective ID of this l f rule condition
     */
    @AutoEscape
    public String getObjectiveId();

    /**
     * Sets the objective ID of this l f rule condition.
     *
     * @param objectiveId the objective ID of this l f rule condition
     */
    public void setObjectiveId(String objectiveId);

    /**
     * Returns the measure threshold of this l f rule condition.
     *
     * @return the measure threshold of this l f rule condition
     */
    public BigDecimal getMeasureThreshold();

    /**
     * Sets the measure threshold of this l f rule condition.
     *
     * @param measureThreshold the measure threshold of this l f rule condition
     */
    public void setMeasureThreshold(BigDecimal measureThreshold);

    /**
     * Returns the inverse of this l f rule condition.
     *
     * @return the inverse of this l f rule condition
     */
    public boolean getInverse();

    /**
     * Returns <code>true</code> if this l f rule condition is inverse.
     *
     * @return <code>true</code> if this l f rule condition is inverse; <code>false</code> otherwise
     */
    public boolean isInverse();

    /**
     * Sets whether this l f rule condition is inverse.
     *
     * @param inverse the inverse of this l f rule condition
     */
    public void setInverse(boolean inverse);

    /**
     * Returns the rollup rule i d of this l f rule condition.
     *
     * @return the rollup rule i d of this l f rule condition
     */
    public Integer getRollupRuleID();

    /**
     * Sets the rollup rule i d of this l f rule condition.
     *
     * @param rollupRuleID the rollup rule i d of this l f rule condition
     */
    public void setRollupRuleID(Integer rollupRuleID);

    /**
     * Returns the condition rule i d of this l f rule condition.
     *
     * @return the condition rule i d of this l f rule condition
     */
    public Integer getConditionRuleID();

    /**
     * Sets the condition rule i d of this l f rule condition.
     *
     * @param conditionRuleID the condition rule i d of this l f rule condition
     */
    public void setConditionRuleID(Integer conditionRuleID);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(LFRuleCondition lfRuleCondition);

    @Override
    public int hashCode();

    @Override
    public CacheModel<LFRuleCondition> toCacheModel();

    @Override
    public LFRuleCondition toEscapedModel();

    @Override
    public LFRuleCondition toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
