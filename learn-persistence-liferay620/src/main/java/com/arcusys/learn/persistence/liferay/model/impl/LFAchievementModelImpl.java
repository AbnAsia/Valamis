package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFAchievement;
import com.arcusys.learn.persistence.liferay.model.LFAchievementModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFAchievement service. Represents a row in the &quot;Learn_LFAchievement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFAchievementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFAchievementImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFAchievementImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFAchievement
 * @see com.arcusys.learn.persistence.liferay.model.LFAchievementModel
 * @generated
 */
public class LFAchievementModelImpl extends BaseModelImpl<LFAchievement>
    implements LFAchievementModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f achievement model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFAchievement} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFAchievement";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "description", Types.CLOB },
            { "logo", Types.CLOB },
            { "creationDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFAchievement (id_ LONG not null primary key,title VARCHAR(75) null,description TEXT null,logo TEXT null,creationDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFAchievement";
    public static final String ORDER_BY_JPQL = " ORDER BY lfAchievement.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFAchievement.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFAchievement"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFAchievement"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFAchievement"));
    private static ClassLoader _classLoader = LFAchievement.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFAchievement.class
        };
    private long _id;
    private String _title;
    private String _description;
    private String _logo;
    private Date _creationDate;
    private LFAchievement _escapedModel;

    public LFAchievementModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFAchievement.class;
    }

    @Override
    public String getModelClassName() {
        return LFAchievement.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("title", getTitle());
        attributes.put("description", getDescription());
        attributes.put("logo", getLogo());
        attributes.put("creationDate", getCreationDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String logo = (String) attributes.get("logo");

        if (logo != null) {
            setLogo(logo);
        }

        Date creationDate = (Date) attributes.get("creationDate");

        if (creationDate != null) {
            setCreationDate(creationDate);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public String getTitle() {
        return _title;
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @Override
    public String getDescription() {
        return _description;
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public String getLogo() {
        return _logo;
    }

    @Override
    public void setLogo(String logo) {
        _logo = logo;
    }

    @Override
    public Date getCreationDate() {
        return _creationDate;
    }

    @Override
    public void setCreationDate(Date creationDate) {
        _creationDate = creationDate;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFAchievement.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFAchievement toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFAchievement) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFAchievementImpl lfAchievementImpl = new LFAchievementImpl();

        lfAchievementImpl.setId(getId());
        lfAchievementImpl.setTitle(getTitle());
        lfAchievementImpl.setDescription(getDescription());
        lfAchievementImpl.setLogo(getLogo());
        lfAchievementImpl.setCreationDate(getCreationDate());

        lfAchievementImpl.resetOriginalValues();

        return lfAchievementImpl;
    }

    @Override
    public int compareTo(LFAchievement lfAchievement) {
        long primaryKey = lfAchievement.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFAchievement)) {
            return false;
        }

        LFAchievement lfAchievement = (LFAchievement) obj;

        long primaryKey = lfAchievement.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<LFAchievement> toCacheModel() {
        LFAchievementCacheModel lfAchievementCacheModel = new LFAchievementCacheModel();

        lfAchievementCacheModel.id = getId();

        lfAchievementCacheModel.title = getTitle();

        String title = lfAchievementCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            lfAchievementCacheModel.title = null;
        }

        lfAchievementCacheModel.description = getDescription();

        String description = lfAchievementCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            lfAchievementCacheModel.description = null;
        }

        lfAchievementCacheModel.logo = getLogo();

        String logo = lfAchievementCacheModel.logo;

        if ((logo != null) && (logo.length() == 0)) {
            lfAchievementCacheModel.logo = null;
        }

        Date creationDate = getCreationDate();

        if (creationDate != null) {
            lfAchievementCacheModel.creationDate = creationDate.getTime();
        } else {
            lfAchievementCacheModel.creationDate = Long.MIN_VALUE;
        }

        return lfAchievementCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", logo=");
        sb.append(getLogo());
        sb.append(", creationDate=");
        sb.append(getCreationDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.arcusys.learn.persistence.liferay.model.LFAchievement");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>logo</column-name><column-value><![CDATA[");
        sb.append(getLogo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creationDate</column-name><column-value><![CDATA[");
        sb.append(getCreationDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
