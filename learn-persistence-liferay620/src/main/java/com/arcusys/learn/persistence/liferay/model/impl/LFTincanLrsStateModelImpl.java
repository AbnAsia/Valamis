package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFTincanLrsState;
import com.arcusys.learn.persistence.liferay.model.LFTincanLrsStateModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFTincanLrsState service. Represents a row in the &quot;Learn_LFTincanLrsState&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFTincanLrsStateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFTincanLrsStateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFTincanLrsStateImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFTincanLrsState
 * @see com.arcusys.learn.persistence.liferay.model.LFTincanLrsStateModel
 * @generated
 */
public class LFTincanLrsStateModelImpl extends BaseModelImpl<LFTincanLrsState>
    implements LFTincanLrsStateModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f tincan lrs state model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFTincanLrsState} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFTincanLrsState";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "stateId", Types.VARCHAR },
            { "documentId", Types.VARCHAR },
            { "activityId", Types.VARCHAR },
            { "registration", Types.CLOB },
            { "agentId", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFTincanLrsState (id_ LONG not null primary key,stateId VARCHAR(75) null,documentId VARCHAR(75) null,activityId VARCHAR(75) null,registration TEXT null,agentId INTEGER null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFTincanLrsState";
    public static final String ORDER_BY_JPQL = " ORDER BY lfTincanLrsState.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFTincanLrsState.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsState"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsState"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFTincanLrsState"),
            true);
    public static long ACTIVITYID_COLUMN_BITMASK = 1L;
    public static long AGENTID_COLUMN_BITMASK = 2L;
    public static long REGISTRATION_COLUMN_BITMASK = 4L;
    public static long STATEID_COLUMN_BITMASK = 8L;
    public static long ID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFTincanLrsState"));
    private static ClassLoader _classLoader = LFTincanLrsState.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFTincanLrsState.class
        };
    private long _id;
    private String _stateId;
    private String _originalStateId;
    private String _documentId;
    private String _activityId;
    private String _originalActivityId;
    private String _registration;
    private String _originalRegistration;
    private Integer _agentId;
    private Integer _originalAgentId;
    private boolean _setOriginalAgentId;
    private long _columnBitmask;
    private LFTincanLrsState _escapedModel;

    public LFTincanLrsStateModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFTincanLrsState.class;
    }

    @Override
    public String getModelClassName() {
        return LFTincanLrsState.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("stateId", getStateId());
        attributes.put("documentId", getDocumentId());
        attributes.put("activityId", getActivityId());
        attributes.put("registration", getRegistration());
        attributes.put("agentId", getAgentId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String stateId = (String) attributes.get("stateId");

        if (stateId != null) {
            setStateId(stateId);
        }

        String documentId = (String) attributes.get("documentId");

        if (documentId != null) {
            setDocumentId(documentId);
        }

        String activityId = (String) attributes.get("activityId");

        if (activityId != null) {
            setActivityId(activityId);
        }

        String registration = (String) attributes.get("registration");

        if (registration != null) {
            setRegistration(registration);
        }

        Integer agentId = (Integer) attributes.get("agentId");

        if (agentId != null) {
            setAgentId(agentId);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public String getStateId() {
        return _stateId;
    }

    @Override
    public void setStateId(String stateId) {
        _columnBitmask |= STATEID_COLUMN_BITMASK;

        if (_originalStateId == null) {
            _originalStateId = _stateId;
        }

        _stateId = stateId;
    }

    public String getOriginalStateId() {
        return _originalStateId;
    }

    @Override
    public String getDocumentId() {
        return _documentId;
    }

    @Override
    public void setDocumentId(String documentId) {
        _documentId = documentId;
    }

    @Override
    public String getActivityId() {
        return _activityId;
    }

    @Override
    public void setActivityId(String activityId) {
        _columnBitmask |= ACTIVITYID_COLUMN_BITMASK;

        if (_originalActivityId == null) {
            _originalActivityId = _activityId;
        }

        _activityId = activityId;
    }

    public String getOriginalActivityId() {
        return _originalActivityId;
    }

    @Override
    public String getRegistration() {
        return _registration;
    }

    @Override
    public void setRegistration(String registration) {
        _columnBitmask |= REGISTRATION_COLUMN_BITMASK;

        if (_originalRegistration == null) {
            _originalRegistration = _registration;
        }

        _registration = registration;
    }

    public String getOriginalRegistration() {
        return _originalRegistration;
    }

    @Override
    public Integer getAgentId() {
        return _agentId;
    }

    @Override
    public void setAgentId(Integer agentId) {
        _columnBitmask |= AGENTID_COLUMN_BITMASK;

        if (!_setOriginalAgentId) {
            _setOriginalAgentId = true;

            _originalAgentId = _agentId;
        }

        _agentId = agentId;
    }

    public Integer getOriginalAgentId() {
        return _originalAgentId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFTincanLrsState.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFTincanLrsState toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFTincanLrsState) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFTincanLrsStateImpl lfTincanLrsStateImpl = new LFTincanLrsStateImpl();

        lfTincanLrsStateImpl.setId(getId());
        lfTincanLrsStateImpl.setStateId(getStateId());
        lfTincanLrsStateImpl.setDocumentId(getDocumentId());
        lfTincanLrsStateImpl.setActivityId(getActivityId());
        lfTincanLrsStateImpl.setRegistration(getRegistration());
        lfTincanLrsStateImpl.setAgentId(getAgentId());

        lfTincanLrsStateImpl.resetOriginalValues();

        return lfTincanLrsStateImpl;
    }

    @Override
    public int compareTo(LFTincanLrsState lfTincanLrsState) {
        long primaryKey = lfTincanLrsState.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFTincanLrsState)) {
            return false;
        }

        LFTincanLrsState lfTincanLrsState = (LFTincanLrsState) obj;

        long primaryKey = lfTincanLrsState.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFTincanLrsStateModelImpl lfTincanLrsStateModelImpl = this;

        lfTincanLrsStateModelImpl._originalStateId = lfTincanLrsStateModelImpl._stateId;

        lfTincanLrsStateModelImpl._originalActivityId = lfTincanLrsStateModelImpl._activityId;

        lfTincanLrsStateModelImpl._originalRegistration = lfTincanLrsStateModelImpl._registration;

        lfTincanLrsStateModelImpl._originalAgentId = lfTincanLrsStateModelImpl._agentId;

        lfTincanLrsStateModelImpl._setOriginalAgentId = false;

        lfTincanLrsStateModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFTincanLrsState> toCacheModel() {
        LFTincanLrsStateCacheModel lfTincanLrsStateCacheModel = new LFTincanLrsStateCacheModel();

        lfTincanLrsStateCacheModel.id = getId();

        lfTincanLrsStateCacheModel.stateId = getStateId();

        String stateId = lfTincanLrsStateCacheModel.stateId;

        if ((stateId != null) && (stateId.length() == 0)) {
            lfTincanLrsStateCacheModel.stateId = null;
        }

        lfTincanLrsStateCacheModel.documentId = getDocumentId();

        String documentId = lfTincanLrsStateCacheModel.documentId;

        if ((documentId != null) && (documentId.length() == 0)) {
            lfTincanLrsStateCacheModel.documentId = null;
        }

        lfTincanLrsStateCacheModel.activityId = getActivityId();

        String activityId = lfTincanLrsStateCacheModel.activityId;

        if ((activityId != null) && (activityId.length() == 0)) {
            lfTincanLrsStateCacheModel.activityId = null;
        }

        lfTincanLrsStateCacheModel.registration = getRegistration();

        String registration = lfTincanLrsStateCacheModel.registration;

        if ((registration != null) && (registration.length() == 0)) {
            lfTincanLrsStateCacheModel.registration = null;
        }

        lfTincanLrsStateCacheModel.agentId = getAgentId();

        return lfTincanLrsStateCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", stateId=");
        sb.append(getStateId());
        sb.append(", documentId=");
        sb.append(getDocumentId());
        sb.append(", activityId=");
        sb.append(getActivityId());
        sb.append(", registration=");
        sb.append(getRegistration());
        sb.append(", agentId=");
        sb.append(getAgentId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFTincanLrsState");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stateId</column-name><column-value><![CDATA[");
        sb.append(getStateId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>documentId</column-name><column-value><![CDATA[");
        sb.append(getDocumentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>activityId</column-name><column-value><![CDATA[");
        sb.append(getActivityId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>registration</column-name><column-value><![CDATA[");
        sb.append(getRegistration());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>agentId</column-name><column-value><![CDATA[");
        sb.append(getAgentId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
