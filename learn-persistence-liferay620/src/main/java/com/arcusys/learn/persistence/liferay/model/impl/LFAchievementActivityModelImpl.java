package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFAchievementActivity;
import com.arcusys.learn.persistence.liferay.model.LFAchievementActivityModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFAchievementActivity service. Represents a row in the &quot;Learn_LFAchievementActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFAchievementActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFAchievementActivityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFAchievementActivityImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFAchievementActivity
 * @see com.arcusys.learn.persistence.liferay.model.LFAchievementActivityModel
 * @generated
 */
public class LFAchievementActivityModelImpl extends BaseModelImpl<LFAchievementActivity>
    implements LFAchievementActivityModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f achievement activity model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFAchievementActivity} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFAchievementActivity";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "userId", Types.INTEGER },
            { "achievementId", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFAchievementActivity (id_ LONG not null primary key,userId INTEGER null,achievementId INTEGER null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFAchievementActivity";
    public static final String ORDER_BY_JPQL = " ORDER BY lfAchievementActivity.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFAchievementActivity.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFAchievementActivity"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFAchievementActivity"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFAchievementActivity"),
            true);
    public static long ACHIEVEMENTID_COLUMN_BITMASK = 1L;
    public static long USERID_COLUMN_BITMASK = 2L;
    public static long ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFAchievementActivity"));
    private static ClassLoader _classLoader = LFAchievementActivity.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFAchievementActivity.class
        };
    private long _id;
    private Integer _userId;
    private Integer _originalUserId;
    private boolean _setOriginalUserId;
    private Integer _achievementId;
    private Integer _originalAchievementId;
    private boolean _setOriginalAchievementId;
    private long _columnBitmask;
    private LFAchievementActivity _escapedModel;

    public LFAchievementActivityModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFAchievementActivity.class;
    }

    @Override
    public String getModelClassName() {
        return LFAchievementActivity.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("userId", getUserId());
        attributes.put("achievementId", getAchievementId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer userId = (Integer) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Integer achievementId = (Integer) attributes.get("achievementId");

        if (achievementId != null) {
            setAchievementId(achievementId);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public Integer getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(Integer userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    public Integer getOriginalUserId() {
        return _originalUserId;
    }

    @Override
    public Integer getAchievementId() {
        return _achievementId;
    }

    @Override
    public void setAchievementId(Integer achievementId) {
        _columnBitmask |= ACHIEVEMENTID_COLUMN_BITMASK;

        if (!_setOriginalAchievementId) {
            _setOriginalAchievementId = true;

            _originalAchievementId = _achievementId;
        }

        _achievementId = achievementId;
    }

    public Integer getOriginalAchievementId() {
        return _originalAchievementId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFAchievementActivity.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFAchievementActivity toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFAchievementActivity) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFAchievementActivityImpl lfAchievementActivityImpl = new LFAchievementActivityImpl();

        lfAchievementActivityImpl.setId(getId());
        lfAchievementActivityImpl.setUserId(getUserId());
        lfAchievementActivityImpl.setAchievementId(getAchievementId());

        lfAchievementActivityImpl.resetOriginalValues();

        return lfAchievementActivityImpl;
    }

    @Override
    public int compareTo(LFAchievementActivity lfAchievementActivity) {
        long primaryKey = lfAchievementActivity.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFAchievementActivity)) {
            return false;
        }

        LFAchievementActivity lfAchievementActivity = (LFAchievementActivity) obj;

        long primaryKey = lfAchievementActivity.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFAchievementActivityModelImpl lfAchievementActivityModelImpl = this;

        lfAchievementActivityModelImpl._originalUserId = lfAchievementActivityModelImpl._userId;

        lfAchievementActivityModelImpl._setOriginalUserId = false;

        lfAchievementActivityModelImpl._originalAchievementId = lfAchievementActivityModelImpl._achievementId;

        lfAchievementActivityModelImpl._setOriginalAchievementId = false;

        lfAchievementActivityModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFAchievementActivity> toCacheModel() {
        LFAchievementActivityCacheModel lfAchievementActivityCacheModel = new LFAchievementActivityCacheModel();

        lfAchievementActivityCacheModel.id = getId();

        lfAchievementActivityCacheModel.userId = getUserId();

        lfAchievementActivityCacheModel.achievementId = getAchievementId();

        return lfAchievementActivityCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", achievementId=");
        sb.append(getAchievementId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFAchievementActivity");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>achievementId</column-name><column-value><![CDATA[");
        sb.append(getAchievementId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
