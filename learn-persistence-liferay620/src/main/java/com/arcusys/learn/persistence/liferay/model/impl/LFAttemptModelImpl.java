package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFAttempt;
import com.arcusys.learn.persistence.liferay.model.LFAttemptModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFAttempt service. Represents a row in the &quot;Learn_LFAttempt&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFAttemptModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFAttemptImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFAttemptImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFAttempt
 * @see com.arcusys.learn.persistence.liferay.model.LFAttemptModel
 * @generated
 */
public class LFAttemptModelImpl extends BaseModelImpl<LFAttempt>
    implements LFAttemptModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f attempt model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFAttempt} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFAttempt";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "userID", Types.INTEGER },
            { "packageID", Types.INTEGER },
            { "organizationID", Types.CLOB },
            { "isComplete", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFAttempt (id_ LONG not null primary key,userID INTEGER null,packageID INTEGER null,organizationID TEXT null,isComplete BOOLEAN null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFAttempt";
    public static final String ORDER_BY_JPQL = " ORDER BY lfAttempt.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFAttempt.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFAttempt"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFAttempt"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFAttempt"),
            true);
    public static long ISCOMPLETE_COLUMN_BITMASK = 1L;
    public static long PACKAGEID_COLUMN_BITMASK = 2L;
    public static long USERID_COLUMN_BITMASK = 4L;
    public static long ID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFAttempt"));
    private static ClassLoader _classLoader = LFAttempt.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFAttempt.class
        };
    private long _id;
    private Integer _userID;
    private Integer _originalUserID;
    private boolean _setOriginalUserID;
    private Integer _packageID;
    private Integer _originalPackageID;
    private boolean _setOriginalPackageID;
    private String _organizationID;
    private Boolean _isComplete;
    private Boolean _originalIsComplete;
    private boolean _setOriginalIsComplete;
    private long _columnBitmask;
    private LFAttempt _escapedModel;

    public LFAttemptModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFAttempt.class;
    }

    @Override
    public String getModelClassName() {
        return LFAttempt.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("userID", getUserID());
        attributes.put("packageID", getPackageID());
        attributes.put("organizationID", getOrganizationID());
        attributes.put("isComplete", getIsComplete());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer userID = (Integer) attributes.get("userID");

        if (userID != null) {
            setUserID(userID);
        }

        Integer packageID = (Integer) attributes.get("packageID");

        if (packageID != null) {
            setPackageID(packageID);
        }

        String organizationID = (String) attributes.get("organizationID");

        if (organizationID != null) {
            setOrganizationID(organizationID);
        }

        Boolean isComplete = (Boolean) attributes.get("isComplete");

        if (isComplete != null) {
            setIsComplete(isComplete);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public Integer getUserID() {
        return _userID;
    }

    @Override
    public void setUserID(Integer userID) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserID) {
            _setOriginalUserID = true;

            _originalUserID = _userID;
        }

        _userID = userID;
    }

    public Integer getOriginalUserID() {
        return _originalUserID;
    }

    @Override
    public Integer getPackageID() {
        return _packageID;
    }

    @Override
    public void setPackageID(Integer packageID) {
        _columnBitmask |= PACKAGEID_COLUMN_BITMASK;

        if (!_setOriginalPackageID) {
            _setOriginalPackageID = true;

            _originalPackageID = _packageID;
        }

        _packageID = packageID;
    }

    public Integer getOriginalPackageID() {
        return _originalPackageID;
    }

    @Override
    public String getOrganizationID() {
        if (_organizationID == null) {
            return StringPool.BLANK;
        } else {
            return _organizationID;
        }
    }

    @Override
    public void setOrganizationID(String organizationID) {
        _organizationID = organizationID;
    }

    @Override
    public Boolean getIsComplete() {
        return _isComplete;
    }

    @Override
    public void setIsComplete(Boolean isComplete) {
        _columnBitmask |= ISCOMPLETE_COLUMN_BITMASK;

        if (!_setOriginalIsComplete) {
            _setOriginalIsComplete = true;

            _originalIsComplete = _isComplete;
        }

        _isComplete = isComplete;
    }

    public Boolean getOriginalIsComplete() {
        return _originalIsComplete;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFAttempt.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFAttempt toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFAttempt) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFAttemptImpl lfAttemptImpl = new LFAttemptImpl();

        lfAttemptImpl.setId(getId());
        lfAttemptImpl.setUserID(getUserID());
        lfAttemptImpl.setPackageID(getPackageID());
        lfAttemptImpl.setOrganizationID(getOrganizationID());
        lfAttemptImpl.setIsComplete(getIsComplete());

        lfAttemptImpl.resetOriginalValues();

        return lfAttemptImpl;
    }

    @Override
    public int compareTo(LFAttempt lfAttempt) {
        long primaryKey = lfAttempt.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFAttempt)) {
            return false;
        }

        LFAttempt lfAttempt = (LFAttempt) obj;

        long primaryKey = lfAttempt.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFAttemptModelImpl lfAttemptModelImpl = this;

        lfAttemptModelImpl._originalUserID = lfAttemptModelImpl._userID;

        lfAttemptModelImpl._setOriginalUserID = false;

        lfAttemptModelImpl._originalPackageID = lfAttemptModelImpl._packageID;

        lfAttemptModelImpl._setOriginalPackageID = false;

        lfAttemptModelImpl._originalIsComplete = lfAttemptModelImpl._isComplete;

        lfAttemptModelImpl._setOriginalIsComplete = false;

        lfAttemptModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFAttempt> toCacheModel() {
        LFAttemptCacheModel lfAttemptCacheModel = new LFAttemptCacheModel();

        lfAttemptCacheModel.id = getId();

        lfAttemptCacheModel.userID = getUserID();

        lfAttemptCacheModel.packageID = getPackageID();

        lfAttemptCacheModel.organizationID = getOrganizationID();

        String organizationID = lfAttemptCacheModel.organizationID;

        if ((organizationID != null) && (organizationID.length() == 0)) {
            lfAttemptCacheModel.organizationID = null;
        }

        lfAttemptCacheModel.isComplete = getIsComplete();

        return lfAttemptCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", userID=");
        sb.append(getUserID());
        sb.append(", packageID=");
        sb.append(getPackageID());
        sb.append(", organizationID=");
        sb.append(getOrganizationID());
        sb.append(", isComplete=");
        sb.append(getIsComplete());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.arcusys.learn.persistence.liferay.model.LFAttempt");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userID</column-name><column-value><![CDATA[");
        sb.append(getUserID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packageID</column-name><column-value><![CDATA[");
        sb.append(getPackageID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationID</column-name><column-value><![CDATA[");
        sb.append(getOrganizationID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isComplete</column-name><column-value><![CDATA[");
        sb.append(getIsComplete());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
