package com.arcusys.learn.persistence.liferay.model.impl;

import com.arcusys.learn.persistence.liferay.model.LFSiteDependentConfig;
import com.arcusys.learn.persistence.liferay.model.LFSiteDependentConfigModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LFSiteDependentConfig service. Represents a row in the &quot;Learn_LFSiteDependentConfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arcusys.learn.persistence.liferay.model.LFSiteDependentConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LFSiteDependentConfigImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LFSiteDependentConfigImpl
 * @see com.arcusys.learn.persistence.liferay.model.LFSiteDependentConfig
 * @see com.arcusys.learn.persistence.liferay.model.LFSiteDependentConfigModel
 * @generated
 */
public class LFSiteDependentConfigModelImpl extends BaseModelImpl<LFSiteDependentConfig>
    implements LFSiteDependentConfigModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a l f site dependent config model instance should use the {@link com.arcusys.learn.persistence.liferay.model.LFSiteDependentConfig} interface instead.
     */
    public static final String TABLE_NAME = "Learn_LFSiteDependentConfig";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "siteID", Types.INTEGER },
            { "dataKey", Types.VARCHAR },
            { "dataValue", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Learn_LFSiteDependentConfig (id_ LONG not null primary key,siteID INTEGER null,dataKey VARCHAR(75) null,dataValue VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Learn_LFSiteDependentConfig";
    public static final String ORDER_BY_JPQL = " ORDER BY lfSiteDependentConfig.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Learn_LFSiteDependentConfig.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFSiteDependentConfig"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arcusys.learn.persistence.liferay.model.LFSiteDependentConfig"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arcusys.learn.persistence.liferay.model.LFSiteDependentConfig"),
            true);
    public static long DATAKEY_COLUMN_BITMASK = 1L;
    public static long SITEID_COLUMN_BITMASK = 2L;
    public static long ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arcusys.learn.persistence.liferay.model.LFSiteDependentConfig"));
    private static ClassLoader _classLoader = LFSiteDependentConfig.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LFSiteDependentConfig.class
        };
    private long _id;
    private Integer _siteID;
    private Integer _originalSiteID;
    private boolean _setOriginalSiteID;
    private String _dataKey;
    private String _originalDataKey;
    private String _dataValue;
    private long _columnBitmask;
    private LFSiteDependentConfig _escapedModel;

    public LFSiteDependentConfigModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LFSiteDependentConfig.class;
    }

    @Override
    public String getModelClassName() {
        return LFSiteDependentConfig.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("siteID", getSiteID());
        attributes.put("dataKey", getDataKey());
        attributes.put("dataValue", getDataValue());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Integer siteID = (Integer) attributes.get("siteID");

        if (siteID != null) {
            setSiteID(siteID);
        }

        String dataKey = (String) attributes.get("dataKey");

        if (dataKey != null) {
            setDataKey(dataKey);
        }

        String dataValue = (String) attributes.get("dataValue");

        if (dataValue != null) {
            setDataValue(dataValue);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public Integer getSiteID() {
        return _siteID;
    }

    @Override
    public void setSiteID(Integer siteID) {
        _columnBitmask |= SITEID_COLUMN_BITMASK;

        if (!_setOriginalSiteID) {
            _setOriginalSiteID = true;

            _originalSiteID = _siteID;
        }

        _siteID = siteID;
    }

    public Integer getOriginalSiteID() {
        return _originalSiteID;
    }

    @Override
    public String getDataKey() {
        return _dataKey;
    }

    @Override
    public void setDataKey(String dataKey) {
        _columnBitmask |= DATAKEY_COLUMN_BITMASK;

        if (_originalDataKey == null) {
            _originalDataKey = _dataKey;
        }

        _dataKey = dataKey;
    }

    public String getOriginalDataKey() {
        return _originalDataKey;
    }

    @Override
    public String getDataValue() {
        return _dataValue;
    }

    @Override
    public void setDataValue(String dataValue) {
        _dataValue = dataValue;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LFSiteDependentConfig.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LFSiteDependentConfig toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LFSiteDependentConfig) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LFSiteDependentConfigImpl lfSiteDependentConfigImpl = new LFSiteDependentConfigImpl();

        lfSiteDependentConfigImpl.setId(getId());
        lfSiteDependentConfigImpl.setSiteID(getSiteID());
        lfSiteDependentConfigImpl.setDataKey(getDataKey());
        lfSiteDependentConfigImpl.setDataValue(getDataValue());

        lfSiteDependentConfigImpl.resetOriginalValues();

        return lfSiteDependentConfigImpl;
    }

    @Override
    public int compareTo(LFSiteDependentConfig lfSiteDependentConfig) {
        long primaryKey = lfSiteDependentConfig.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LFSiteDependentConfig)) {
            return false;
        }

        LFSiteDependentConfig lfSiteDependentConfig = (LFSiteDependentConfig) obj;

        long primaryKey = lfSiteDependentConfig.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LFSiteDependentConfigModelImpl lfSiteDependentConfigModelImpl = this;

        lfSiteDependentConfigModelImpl._originalSiteID = lfSiteDependentConfigModelImpl._siteID;

        lfSiteDependentConfigModelImpl._setOriginalSiteID = false;

        lfSiteDependentConfigModelImpl._originalDataKey = lfSiteDependentConfigModelImpl._dataKey;

        lfSiteDependentConfigModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<LFSiteDependentConfig> toCacheModel() {
        LFSiteDependentConfigCacheModel lfSiteDependentConfigCacheModel = new LFSiteDependentConfigCacheModel();

        lfSiteDependentConfigCacheModel.id = getId();

        lfSiteDependentConfigCacheModel.siteID = getSiteID();

        lfSiteDependentConfigCacheModel.dataKey = getDataKey();

        String dataKey = lfSiteDependentConfigCacheModel.dataKey;

        if ((dataKey != null) && (dataKey.length() == 0)) {
            lfSiteDependentConfigCacheModel.dataKey = null;
        }

        lfSiteDependentConfigCacheModel.dataValue = getDataValue();

        String dataValue = lfSiteDependentConfigCacheModel.dataValue;

        if ((dataValue != null) && (dataValue.length() == 0)) {
            lfSiteDependentConfigCacheModel.dataValue = null;
        }

        return lfSiteDependentConfigCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", siteID=");
        sb.append(getSiteID());
        sb.append(", dataKey=");
        sb.append(getDataKey());
        sb.append(", dataValue=");
        sb.append(getDataValue());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append(
            "com.arcusys.learn.persistence.liferay.model.LFSiteDependentConfig");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>siteID</column-name><column-value><![CDATA[");
        sb.append(getSiteID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataKey</column-name><column-value><![CDATA[");
        sb.append(getDataKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataValue</column-name><column-value><![CDATA[");
        sb.append(getDataValue());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
